[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "On Scientific Computing",
    "section": "",
    "text": "I created this book, of sorts, as I came across what I think to be a lack of combined “Scientific Computing” and “Scientific Publishing” (or, perhaps, typesetting) courses available that were:\n\nBased in Python\nCovered command line tools\nFully open source."
  },
  {
    "objectID": "index.html#scientific-computing-environment",
    "href": "index.html#scientific-computing-environment",
    "title": "On Scientific Computing",
    "section": "Scientific Computing Environment",
    "text": "Scientific Computing Environment\n\nUtilize fundamental command-line tools (Bash) and a text editor (Neovim) for efficient scientific programming and workflow management.\nWrite and execute Python scripts for scientific computing tasks, demonstrating proficiency in basic Python syntax and structures."
  },
  {
    "objectID": "index.html#numerical-computation",
    "href": "index.html#numerical-computation",
    "title": "On Scientific Computing",
    "section": "Numerical Computation",
    "text": "Numerical Computation\n\nApply advanced numerical methods and understand the properties of floating-point arithmetic for accurate scientific computations.\nImplement and analyze high-performance computing techniques using Python libraries such as NumPy, SciPy, and SymPy for numerical analysis and symbolic mathematics.\nProcess, analyze, and visualize scientific datasets effectively using Pandas and Matplotlib."
  },
  {
    "objectID": "index.html#performance-optimization",
    "href": "index.html#performance-optimization",
    "title": "On Scientific Computing",
    "section": "Performance Optimization",
    "text": "Performance Optimization\n\nOptimize the performance of scientific code using techniques like Just-In-Time (JIT) compilation with Numba, static compilation with Cython, and integration with Fortran.\nCompare and contrast the strengths and weaknesses of different programming languages and tools for high-performance scientific computing."
  },
  {
    "objectID": "index.html#scientific-publishing",
    "href": "index.html#scientific-publishing",
    "title": "On Scientific Computing",
    "section": "Scientific Publishing",
    "text": "Scientific Publishing\n\nCreate professional scientific documents and presentations using markup languages and tools such as Markdown, HTML/CSS, LaTeX, Quarto, Typst, and Sphinx."
  },
  {
    "objectID": "index.rjs.html#scientific-computing-environment",
    "href": "index.rjs.html#scientific-computing-environment",
    "title": "On Scientific Computing",
    "section": "Scientific Computing Environment",
    "text": "Scientific Computing Environment\n\nUtilize fundamental command-line tools (Bash) and a text editor (Neovim) for efficient scientific programming and workflow management.\nWrite and execute Python scripts for scientific computing tasks, demonstrating proficiency in basic Python syntax and structures."
  },
  {
    "objectID": "index.rjs.html#numerical-computation",
    "href": "index.rjs.html#numerical-computation",
    "title": "On Scientific Computing",
    "section": "Numerical Computation",
    "text": "Numerical Computation\n\nApply advanced numerical methods and understand the properties of floating-point arithmetic for accurate scientific computations.\nImplement and analyze high-performance computing techniques using Python libraries such as NumPy, SciPy, and SymPy for numerical analysis and symbolic mathematics.\nProcess, analyze, and visualize scientific datasets effectively using Pandas and Matplotlib."
  },
  {
    "objectID": "index.rjs.html#performance-optimization",
    "href": "index.rjs.html#performance-optimization",
    "title": "On Scientific Computing",
    "section": "Performance Optimization",
    "text": "Performance Optimization\n\nOptimize the performance of scientific code using techniques like Just-In-Time (JIT) compilation with Numba, static compilation with Cython, and integration with Fortran.\nCompare and contrast the strengths and weaknesses of different programming languages and tools for high-performance scientific computing."
  },
  {
    "objectID": "index.rjs.html#scientific-publishing",
    "href": "index.rjs.html#scientific-publishing",
    "title": "On Scientific Computing",
    "section": "Scientific Publishing",
    "text": "Scientific Publishing\n\nCreate professional scientific documents and presentations using markup languages and tools such as Markdown, HTML/CSS, LaTeX, Quarto, Typst, and Sphinx."
  },
  {
    "objectID": "A0_gitbash.html#scientific-computing-on-windows",
    "href": "A0_gitbash.html#scientific-computing-on-windows",
    "title": "",
    "section": "Scientific Computing on Windows",
    "text": "Scientific Computing on Windows\n\nBash is a nearly universally standard for command line usage.\nWindows built-in cmd.bat and PowerShell are necessary for Windows to run properly, but rarely used in a computing context.\nGit, an extremely popular command line utility used in bash, provides “Git Bash” for Windows users to have access to bash scripting.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#why-git-bash",
    "href": "A0_gitbash.html#why-git-bash",
    "title": "",
    "section": "Why Git Bash?",
    "text": "Why Git Bash?\n\nIt’s relatively easy to setup and integrates well with Windows.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#why-not-git-bash",
    "href": "A0_gitbash.html#why-not-git-bash",
    "title": "",
    "section": "Why not Git Bash?",
    "text": "Why not Git Bash?\n\nWindows Subsystem for Linux (WSL) is better in every way except that beginning users often struggle to keep track of where files are.\nIt is also a bit harder to install.\nIf at all possible, use WSL by following that tutorial.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#requirements",
    "href": "A0_gitbash.html#requirements",
    "title": "",
    "section": "Requirements",
    "text": "Requirements\n\nYou may have it already, but download Window Terminal from the Microsoft Store.\nDownload (but do not yet install) Git for Windows from Git SCM.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#installing-git",
    "href": "A0_gitbash.html#installing-git",
    "title": "",
    "section": "Installing Git",
    "text": "Installing Git\n\nWe will install git, perhaps the most used command line utility, and bash at the same time.\nWe will go step-by-step through the “Git for Windows” installer to do so.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#accept-license",
    "href": "A0_gitbash.html#accept-license",
    "title": "",
    "section": "1. Accept License",
    "text": "1. Accept License\n\nWhen you open “Git for Windows” you will be prompted to accept the “GNU General Public License”\nThis license is what ensures “Git for Windows” is free.\nYou may read it, but it is well studied and trustworthy.\nI click “Next” to move on.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#select-components",
    "href": "A0_gitbash.html#select-components",
    "title": "",
    "section": "2. Select Components",
    "text": "2. Select Components\n\n\n\n\n\n\nThis is critical\n\n\n\nYou must select “Add a Git Bash Profile to Windows Terminal”\n\n\n\nThis box let’s us use bash directly on Windows!\nProbably no other boxes affect you, but I like “Windows Explorer integration -&gt; Open Git Bash here” which I use often.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#default-editor",
    "href": "A0_gitbash.html#default-editor",
    "title": "",
    "section": "3. Default Editor",
    "text": "3. Default Editor\n\nWhile not required, I configure Neovim to be my default editor.\nIt is quite likely that you do this by:\n\nSelecting “Select other editor as Git’s default editor”\nBrowsing to “C:Files”\nSelecting “nvim.exe”\n\nI find this much nicer than any alternative.\n\nNext best is probably Notepad++",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#aside",
    "href": "A0_gitbash.html#aside",
    "title": "",
    "section": "Aside",
    "text": "Aside\n\nI leave everything else on defaults.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#initial-branch",
    "href": "A0_gitbash.html#initial-branch",
    "title": "",
    "section": "4. Initial Branch",
    "text": "4. Initial Branch\n\nThis is out of scope for now.\n“Let Git decide” is fine.\n\n\n\n\n\n\n\nNote\n\n\n\nThe language we use to describe computing matters, and GitHub is working to make their language more accurate, precise, and inclusive. Read more",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#ssh-executable",
    "href": "A0_gitbash.html#ssh-executable",
    "title": "",
    "section": "5. SSH executable",
    "text": "5. SSH executable\n\nWe’ll cover SSH in more depth latter.\nI leave as default “Use bundled OpenSSH”",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#openssl-library",
    "href": "A0_gitbash.html#openssl-library",
    "title": "",
    "section": "6. OpenSSL library",
    "text": "6. OpenSSL library\n\nI leave as default “Use the OpenSSL library”\nI cover OpenSSL in a bit more detail in cryptography courses.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#line-endings",
    "href": "A0_gitbash.html#line-endings",
    "title": "",
    "section": "7. Line Endings",
    "text": "7. Line Endings\n\nVersus MacOS, Windows notes the end of lines of text in a novel way.\nI almost always find this annoying!\nI “Checkout as-is, commit Unix-style line encodings”\nWhy? I don’t like that Windows doesn’t follow standards.\nThis doesn’t really matter.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#terminal-emulator",
    "href": "A0_gitbash.html#terminal-emulator",
    "title": "",
    "section": "8. Terminal Emulator",
    "text": "8. Terminal Emulator\n\nWe will use Windows Terminal regardless.\n\nI select “Use Windows’ default console window” - which is not Windows Terminal - but is expected to become Windows Terminal someday.\nWindows is confusing!",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#git-pull",
    "href": "A0_gitbash.html#git-pull",
    "title": "",
    "section": "9. git pull",
    "text": "9. git pull\n\nI leave the default “Fast-forward or merge”\nBy the time this matters to you, you will know how to not use defaults.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#credential-helper",
    "href": "A0_gitbash.html#credential-helper",
    "title": "",
    "section": "10. Credential Helper",
    "text": "10. Credential Helper\n\n\n\n\n\n\nThis is critical\n\n\n\nYou must select “Git Credential Manager”\n\n\n\nIt is otherwise quite difficult to manage passwords when we get there.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#extra-options",
    "href": "A0_gitbash.html#extra-options",
    "title": "",
    "section": "11. Extra Options",
    "text": "11. Extra Options\n\nI do use “Enable file system caching” but I don’t know that I would recommend it.\nNo options is fine here!",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#finishing-up",
    "href": "A0_gitbash.html#finishing-up",
    "title": "",
    "section": "Finishing up",
    "text": "Finishing up\n\nAt this time, you may need to close any terminal windows you have open.\nSave your work (:w) first!",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#install",
    "href": "A0_gitbash.html#install",
    "title": "",
    "section": "Install",
    "text": "Install\n\nYou should get an install progress bar.",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.html#completion",
    "href": "A0_gitbash.html#completion",
    "title": "",
    "section": "Completion",
    "text": "Completion\n\nI uncheck both boxes and close the installer.\nI open Windows Terminal and click the downward facing arrow button next to the “plus” symbol button after my last tab.\nI select “Git Bash”\nI try ls\n\nYou should see multiple filenames per line and no other information (Bash ls).\nIf you see dates and times, it is still Windows PowerShell.\n\nGo over these instructions again, or ask for help!",
    "crumbs": [
      "Appendix - Git Bash"
    ]
  },
  {
    "objectID": "A0_gitbash.rjs.html#scientific-computing-on-windows",
    "href": "A0_gitbash.rjs.html#scientific-computing-on-windows",
    "title": "Scientific Computing",
    "section": "Scientific Computing on Windows",
    "text": "Scientific Computing on Windows\n\nBash is a nearly universally standard for command line usage.\nWindows built-in cmd.bat and PowerShell are necessary for Windows to run properly, but rarely used in a computing context.\nGit, an extremely popular command line utility used in bash, provides “Git Bash” for Windows users to have access to bash scripting."
  },
  {
    "objectID": "A0_gitbash.rjs.html#why-git-bash",
    "href": "A0_gitbash.rjs.html#why-git-bash",
    "title": "Scientific Computing",
    "section": "Why Git Bash?",
    "text": "Why Git Bash?\n\nIt’s relatively easy to setup and integrates well with Windows."
  },
  {
    "objectID": "A0_gitbash.rjs.html#why-not-git-bash",
    "href": "A0_gitbash.rjs.html#why-not-git-bash",
    "title": "Scientific Computing",
    "section": "Why not Git Bash?",
    "text": "Why not Git Bash?\n\nWindows Subsystem for Linux (WSL) is better in every way except that beginning users often struggle to keep track of where files are.\nIt is also a bit harder to install.\nIf at all possible, use WSL by following that tutorial."
  },
  {
    "objectID": "A0_gitbash.rjs.html#requirements",
    "href": "A0_gitbash.rjs.html#requirements",
    "title": "Scientific Computing",
    "section": "Requirements",
    "text": "Requirements\n\nYou may have it already, but download Window Terminal from the Microsoft Store.\nDownload (but do not yet install) Git for Windows from Git SCM."
  },
  {
    "objectID": "A0_gitbash.rjs.html#installing-git",
    "href": "A0_gitbash.rjs.html#installing-git",
    "title": "Scientific Computing",
    "section": "Installing Git",
    "text": "Installing Git\n\nWe will install git, perhaps the most used command line utility, and bash at the same time.\nWe will go step-by-step through the “Git for Windows” installer to do so."
  },
  {
    "objectID": "A0_gitbash.rjs.html#accept-license",
    "href": "A0_gitbash.rjs.html#accept-license",
    "title": "Scientific Computing",
    "section": "1. Accept License",
    "text": "1. Accept License\n\nWhen you open “Git for Windows” you will be prompted to accept the “GNU General Public License”\nThis license is what ensures “Git for Windows” is free.\nYou may read it, but it is well studied and trustworthy.\nI click “Next” to move on."
  },
  {
    "objectID": "A0_gitbash.rjs.html#select-components",
    "href": "A0_gitbash.rjs.html#select-components",
    "title": "Scientific Computing",
    "section": "2. Select Components",
    "text": "2. Select Components\n\n\n\n\n\n\nThis is critical\n\n\nYou must select “Add a Git Bash Profile to Windows Terminal”\n\n\n\n\nThis box let’s us use bash directly on Windows!\nProbably no other boxes affect you, but I like “Windows Explorer integration -&gt; Open Git Bash here” which I use often."
  },
  {
    "objectID": "A0_gitbash.rjs.html#default-editor",
    "href": "A0_gitbash.rjs.html#default-editor",
    "title": "Scientific Computing",
    "section": "3. Default Editor",
    "text": "3. Default Editor\n\nWhile not required, I configure Neovim to be my default editor.\nIt is quite likely that you do this by:\n\nSelecting “Select other editor as Git’s default editor”\nBrowsing to “C:Files”\nSelecting “nvim.exe”\n\nI find this much nicer than any alternative.\n\nNext best is probably Notepad++"
  },
  {
    "objectID": "A0_gitbash.rjs.html#aside",
    "href": "A0_gitbash.rjs.html#aside",
    "title": "Scientific Computing",
    "section": "Aside",
    "text": "Aside\n\nI leave everything else on defaults."
  },
  {
    "objectID": "A0_gitbash.rjs.html#initial-branch",
    "href": "A0_gitbash.rjs.html#initial-branch",
    "title": "Scientific Computing",
    "section": "4. Initial Branch",
    "text": "4. Initial Branch\n\nThis is out of scope for now.\n“Let Git decide” is fine.\n\n\n\n\n\n\n\nNote\n\n\nThe language we use to describe computing matters, and GitHub is working to make their language more accurate, precise, and inclusive. Read more"
  },
  {
    "objectID": "A0_gitbash.rjs.html#ssh-executable",
    "href": "A0_gitbash.rjs.html#ssh-executable",
    "title": "Scientific Computing",
    "section": "5. SSH executable",
    "text": "5. SSH executable\n\nWe’ll cover SSH in more depth latter.\nI leave as default “Use bundled OpenSSH”"
  },
  {
    "objectID": "A0_gitbash.rjs.html#openssl-library",
    "href": "A0_gitbash.rjs.html#openssl-library",
    "title": "Scientific Computing",
    "section": "6. OpenSSL library",
    "text": "6. OpenSSL library\n\nI leave as default “Use the OpenSSL library”\nI cover OpenSSL in a bit more detail in cryptography courses."
  },
  {
    "objectID": "A0_gitbash.rjs.html#line-endings",
    "href": "A0_gitbash.rjs.html#line-endings",
    "title": "Scientific Computing",
    "section": "7. Line Endings",
    "text": "7. Line Endings\n\nVersus MacOS, Windows notes the end of lines of text in a novel way.\nI almost always find this annoying!\nI “Checkout as-is, commit Unix-style line encodings”\nWhy? I don’t like that Windows doesn’t follow standards.\nThis doesn’t really matter."
  },
  {
    "objectID": "A0_gitbash.rjs.html#terminal-emulator",
    "href": "A0_gitbash.rjs.html#terminal-emulator",
    "title": "Scientific Computing",
    "section": "8. Terminal Emulator",
    "text": "8. Terminal Emulator\n\nWe will use Windows Terminal regardless.\n\nI select “Use Windows’ default console window” - which is not Windows Terminal - but is expected to become Windows Terminal someday.\nWindows is confusing!"
  },
  {
    "objectID": "A0_gitbash.rjs.html#git-pull",
    "href": "A0_gitbash.rjs.html#git-pull",
    "title": "Scientific Computing",
    "section": "9. git pull",
    "text": "9. git pull\n\nI leave the default “Fast-forward or merge”\nBy the time this matters to you, you will know how to not use defaults."
  },
  {
    "objectID": "A0_gitbash.rjs.html#credential-helper",
    "href": "A0_gitbash.rjs.html#credential-helper",
    "title": "Scientific Computing",
    "section": "10. Credential Helper",
    "text": "10. Credential Helper\n\n\n\n\n\n\nThis is critical\n\n\nYou must select “Git Credential Manager”\n\n\n\n\nIt is otherwise quite difficult to manage passwords when we get there."
  },
  {
    "objectID": "A0_gitbash.rjs.html#extra-options",
    "href": "A0_gitbash.rjs.html#extra-options",
    "title": "Scientific Computing",
    "section": "11. Extra Options",
    "text": "11. Extra Options\n\nI do use “Enable file system caching” but I don’t know that I would recommend it.\nNo options is fine here!"
  },
  {
    "objectID": "A0_gitbash.rjs.html#finishing-up",
    "href": "A0_gitbash.rjs.html#finishing-up",
    "title": "Scientific Computing",
    "section": "Finishing up",
    "text": "Finishing up\n\nAt this time, you may need to close any terminal windows you have open.\nSave your work (:w) first!"
  },
  {
    "objectID": "A0_gitbash.rjs.html#install",
    "href": "A0_gitbash.rjs.html#install",
    "title": "Scientific Computing",
    "section": "Install",
    "text": "Install\n\nYou should get an install progress bar."
  },
  {
    "objectID": "A0_gitbash.rjs.html#completion",
    "href": "A0_gitbash.rjs.html#completion",
    "title": "Scientific Computing",
    "section": "Completion",
    "text": "Completion\n\nI uncheck both boxes and close the installer.\nI open Windows Terminal and click the downward facing arrow button next to the “plus” symbol button after my last tab.\nI select “Git Bash”\nI try ls\n\nYou should see multiple filenames per line and no other information (Bash ls).\nIf you see dates and times, it is still Windows PowerShell.\n\nGo over these instructions again, or ask for help!"
  },
  {
    "objectID": "07_scipy.html",
    "href": "07_scipy.html",
    "title": "SciPy",
    "section": "",
    "text": "SciPy (pronounced “Sigh Pie”) is an open-source software for mathematics, science, and engineering.\n\n\nScientific Python\nBasically a NumPy extension.\n\n\n\n\nMost popular scientific computing platform in the world.\nBasis of scikit-learn, the most popular machine learning platform in the world.\nExtremely rigorous - most functions and documentation come with academic citations.\n\n\n\n\n\nSciPy for statistics has basically one challenger (statsmodels, which is great).\nSometimes SciPy is too “heavyweight” and NumPy would be sufficient.\nAs a rule, I tend to use NumPy for easy things and scikit-learn for hard things, and don’t use SciPy for much.\n\n\n\n\n\nThis is a scientific computing course!\nWe’ll do a bit of signal processing and interpolation.\n\n\n\n\n\nSciPy is a big, complex library with many components.\nI used each of:\n\nThe User Guide\nThe API reference\n\nAPI is “application program interface” - a description of the functions in SciPy by their arguments and return values.\n\nThe Cookbook which may be unofficial.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#why-scipy",
    "href": "07_scipy.html#why-scipy",
    "title": "SciPy",
    "section": "",
    "text": "Most popular scientific computing platform in the world.\nBasis of scikit-learn, the most popular machine learning platform in the world.\nExtremely rigorous - most functions and documentation come with academic citations.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#why-not-scipy",
    "href": "07_scipy.html#why-not-scipy",
    "title": "SciPy",
    "section": "",
    "text": "SciPy for statistics has basically one challenger (statsmodels, which is great).\nSometimes SciPy is too “heavyweight” and NumPy would be sufficient.\nAs a rule, I tend to use NumPy for easy things and scikit-learn for hard things, and don’t use SciPy for much.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#relevance",
    "href": "07_scipy.html#relevance",
    "title": "SciPy",
    "section": "",
    "text": "This is a scientific computing course!\nWe’ll do a bit of signal processing and interpolation.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#credits",
    "href": "07_scipy.html#credits",
    "title": "SciPy",
    "section": "",
    "text": "SciPy is a big, complex library with many components.\nI used each of:\n\nThe User Guide\nThe API reference\n\nAPI is “application program interface” - a description of the functions in SciPy by their arguments and return values.\n\nThe Cookbook which may be unofficial.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#pip-again",
    "href": "07_scipy.html#pip-again",
    "title": "SciPy",
    "section": "pip again",
    "text": "pip again\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install scipy\n\nThat might take a moment, when it does we can check it worked!",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#verify",
    "href": "07_scipy.html#verify",
    "title": "SciPy",
    "section": "Verify",
    "text": "Verify\n\nWe can quickly verify installation and introduce some conventions.\nOpen up Python and import the libraries:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy\n\nprint(scipy.__version__)\n\n1.14.1",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#motivation",
    "href": "07_scipy.html#motivation",
    "title": "SciPy",
    "section": "Motivation",
    "text": "Motivation\n\nI thought it would be fun to do some signal processing on a recognizable data set:\nPSY - GANGNAM STYLE(강남스타일) M/V",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#youtube",
    "href": "07_scipy.html#youtube",
    "title": "SciPy",
    "section": "YouTube",
    "text": "YouTube\n\n\n\n\n\n\nSTOP\n\n\n\nInstructor’s note: Do not click this link while streaming.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#problem-statement",
    "href": "07_scipy.html#problem-statement",
    "title": "SciPy",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nSciPy has the ability to read some filetypes but not others.\n\nCan read: “.wav” Waveform Audio File Format.\nCan’t read: YouTube urls\n\nWe use Python package yt-dlp to download from YouTube.\nWe use non-Python package ffmpeg to translate .mp4 files to .wav\nWe use VideoLAN VLC Media Player to play the .wav files.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#note",
    "href": "07_scipy.html#note",
    "title": "SciPy",
    "section": "Note",
    "text": "Note\n\nYou do not need to download any of these.\nHere is the .wav:\n\n\n\n\nHere is a link:\n\npsy.wav",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#yt-dlp",
    "href": "07_scipy.html#yt-dlp",
    "title": "SciPy",
    "section": "yt-dlp",
    "text": "yt-dlp\n\nWhile I don’t think you need it for anything, I installed yt-dlp as follows, from the shell:\n\npython -m pip install yt-dlp",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#ffmpeg",
    "href": "07_scipy.html#ffmpeg",
    "title": "SciPy",
    "section": "ffmpeg",
    "text": "ffmpeg\n\nI believe this is the best place to download ffmpeg for Windows and MacOS.\nhttps://www.ffmpeg.org/download.html\nI used it on Ubuntu Linux and did not attempt and Windows or MacOS install.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#download",
    "href": "07_scipy.html#download",
    "title": "SciPy",
    "section": "Download",
    "text": "Download\n\nBoth yt-dlp and ffmpeg are command line utilites (like Python, Neovim, or ls).\nI didn’t actually ever use ffmpeg directly, it is just used by yt-dlp.\nGiven the url, I used the following shell command:\n\nyt-dlp -x --audio-format wav https://www.youtube.com/watch?v=9bZkp7q19f0 -o psy.wav\n\nThis tells yt-dlp to go to the url, download to video, convert it to a .wav, and save it as “psy.wav”",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#vlc",
    "href": "07_scipy.html#vlc",
    "title": "SciPy",
    "section": "VLC",
    "text": "VLC\n\nI highly recommend having VLC installed.\nhttps://www.videolan.org/vlc/#download",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#curl",
    "href": "07_scipy.html#curl",
    "title": "SciPy",
    "section": "curl",
    "text": "curl\n\nAs an alternative, you can curl the file from the course webpage.\ncurl is a shell command that downloads a file from a url.\n\nCan also be used to get e.g. the “.csv” file we used with pandas!\n\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/psy.wav -o psy.wav\nThis directs the command line to download the file from the url and save it locally as “psy.wav”",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#wavfile",
    "href": "07_scipy.html#wavfile",
    "title": "SciPy",
    "section": "wavfile",
    "text": "wavfile\n\nTo load a wavfile into SciPy, it is a simple matter.\nBut first, we note one difference:\n\nWith NumPy, we imported as np\nWith pandas, we import as pd\n\nWith Matplotlib, we imported Matplotlib “dot” something - pyplot\n\nThe “Python interface”",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#scipy-modules",
    "href": "07_scipy.html#scipy-modules",
    "title": "SciPy",
    "section": "SciPy Modules",
    "text": "SciPy Modules\n\nSciPy is composed of many modules\nmatplotlib.pyplot is a previous example of a module.\nFor example:\n\nscipy.io includes ways to read files.\nscipy.fft does Fast Fourier Transforms.\nscipy.stats does statistics.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#load-psy.wav",
    "href": "07_scipy.html#load-psy.wav",
    "title": "SciPy",
    "section": "Load “psy.wav”",
    "text": "Load “psy.wav”\n\nWe will load a sound file as an np.array.\n\n\nrate, data = scipy.io.wavfile.read(\"psy.wav\")\n\n\nThis may look odd!",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#multiple-return",
    "href": "07_scipy.html#multiple-return",
    "title": "SciPy",
    "section": "Multiple return",
    "text": "Multiple return\n\nThis uses a slightly advanced Python topic of “multiple return”.\n\n\ndef roots(x):\n    root = np.sqrt(x)\n    return -root, root\n\n\nPython can return multiple comma-separated values from a function.\n\n\nneg, pos = roots(25)\n[neg, pos]\n\n[np.float64(-5.0), np.float64(5.0)]\n\n\n\nWe can “unpack” the multiple values by providing comma separated variable names.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#aside-tuples",
    "href": "07_scipy.html#aside-tuples",
    "title": "SciPy",
    "section": "Aside: Tuples",
    "text": "Aside: Tuples\n\nThese multiple returns are just tuples.\n\nThe things that are like lists, but not exactly.\n\n\n\nboth = roots(64)\ntype(both)\n\ntuple\n\n\n\nWe can also use indexing to see individual elements of a tuple.\n\n\nboth[0]\n\nnp.float64(-8.0)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#vs.-lists",
    "href": "07_scipy.html#vs.-lists",
    "title": "SciPy",
    "section": "vs. Lists",
    "text": "vs. Lists\n\nThe only difference compared to lists is updates.\nIn a list, we can change an element with its index:\n\n\ncolor_lst = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\ncolor_lst[-1] = \"purple\"\ncolor_lst\n\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#aside-errors",
    "href": "07_scipy.html#aside-errors",
    "title": "SciPy",
    "section": "Aside: Errors",
    "text": "Aside: Errors\n\nDoing this to a list would create an error.\nThus far we have avoided showing example code that won’t work.\nWe can use try and except (like if and else) on erroneous code.\n\n\ncolor_tup = tuple(color_lst)\ntry:\n    color_tup[-1] = \"violet\"\nexcept:\n    print(\"Tuples can't do that.\")\n\nTuples can't do that.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#reading-files",
    "href": "07_scipy.html#reading-files",
    "title": "SciPy",
    "section": "Reading files",
    "text": "Reading files\n\nTry except is very handy when reading files.\nA lot of files I try to read are garbled and can’t be read.\nUsing try and except prevents Python errors.\n\nMore useful in big scripts than single-line things.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#example",
    "href": "07_scipy.html#example",
    "title": "SciPy",
    "section": "Example",
    "text": "Example\n\nEarlier today, I tried the curl command to get “psy.wav” while (unbeknownst to me) my internet was spotty.\nI got a file named “psy.wav” that was of size 0\nUnsurprisingly, opening it with SciPy led to an error.\nThis happens all the time!",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#data",
    "href": "07_scipy.html#data",
    "title": "SciPy",
    "section": "Data",
    "text": "Data\n\nBack to our .wav file.\nLet’s look at that data!\n\n\ndata[:10]\n\narray([[0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0]], dtype=int16)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#rate",
    "href": "07_scipy.html#rate",
    "title": "SciPy",
    "section": "Rate",
    "text": "Rate\n\nrate\n\n48000\n\n\n\nYou may have listened to the file (or not).\nAudio doesn’t come in for about 4 seconds.\nThe song ends and there’s a kind of “outro”.\nWe can see these on the plot.\nBut that examples the zeros.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#plot",
    "href": "07_scipy.html#plot",
    "title": "SciPy",
    "section": "Plot",
    "text": "Plot\n\nplt.plot(data)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#back-to-data",
    "href": "07_scipy.html#back-to-data",
    "title": "SciPy",
    "section": "Back to Data",
    "text": "Back to Data\n\nGiven the rate, we can look at values ever rate amount of time.\nI bet it’s seconds, so we’ll see 3 or 4 zero-only then some non-zero.\n\n\ndata[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      3],\n       [-13903, -13896],\n       [ 12440,  12442],\n       [  6053,   6051],\n       [  5888,   5888],\n       [    53,     52]], dtype=int16)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#why-pairs",
    "href": "07_scipy.html#why-pairs",
    "title": "SciPy",
    "section": "Why pairs?",
    "text": "Why pairs?\n\nThose two values may look initially suspicious, then I remembered.\nMany mammals, including some assistant professors of computer science, have two ears!\nThis is a stereo file - the pairs are for each of two speakers.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#test-it",
    "href": "07_scipy.html#test-it",
    "title": "SciPy",
    "section": "Test it",
    "text": "Test it\n\nDon’t believe me?\nLet’s split into a “left” and “right” file.\nWe needn’t necessarily get the labels right, but these are simply NumPy operations.\nThen listen!",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#transpose",
    "href": "07_scipy.html#transpose",
    "title": "SciPy",
    "section": "Transpose",
    "text": "Transpose\n\nRemember .transpose?\nIt will take an array of pairs and make a pair of arrays.\n\n\ntpose = data.transpose()\ntpose[0][:rate*10:rate]\n\narray([     0,      0,      0,      0,     -2, -13903,  12440,   6053,\n         5888,     53], dtype=int16)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#split",
    "href": "07_scipy.html#split",
    "title": "SciPy",
    "section": "Split",
    "text": "Split\n\nI will arbitrarily call one “left” and one “rite” (not “right” because we don’t know if we’re right).\n\n\nleft = tpose[0]\nrite = tpose[1]",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#zeros",
    "href": "07_scipy.html#zeros",
    "title": "SciPy",
    "section": "Zeros",
    "text": "Zeros\n\nWe’ll also make a zero-only array of the same length.\n\n\n# We note the \"dtype\" was \"int16\" so we do the same.\n# We do have to be clear it's NumPy int16 though!\nzero = np.zeros(len(left),dtype=np.int16)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#combine",
    "href": "07_scipy.html#combine",
    "title": "SciPy",
    "section": "Combine",
    "text": "Combine\n\nWe can make left-only and rite-only arrays via:\n\nCombine\nTranspose\n\n\n\n\n\nleft_only = np.array([left,zero]).transpose()\nleft_only[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      0],\n       [-13903,      0],\n       [ 12440,      0],\n       [  6053,      0],\n       [  5888,      0],\n       [    53,      0]], dtype=int16)\n\n\n\n\nrite_only = np.array([zero,rite]).transpose()\nrite_only[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      3],\n       [     0, -13896],\n       [     0,  12442],\n       [     0,   6051],\n       [     0,   5888],\n       [     0,     52]], dtype=int16)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#save",
    "href": "07_scipy.html#save",
    "title": "SciPy",
    "section": "Save",
    "text": "Save\n\nLet’s write/save both then give ’um a listen.\n\n\n\n\nscipy.io.wavfile.write(\"left.wav\", rate, left_only)\n\n\n\nscipy.io.wavfile.write(\"rite.wav\", rate, rite_only)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#listen",
    "href": "07_scipy.html#listen",
    "title": "SciPy",
    "section": "Listen",
    "text": "Listen\n\nLet’s write/save both then give ’um a listen.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#noise-reduction",
    "href": "07_scipy.html#noise-reduction",
    "title": "SciPy",
    "section": "Noise Reduction",
    "text": "Noise Reduction\n\nIn a way, all sound is noise.\nLet’s try and isolate the vocals and music, regarding the other variously as noise at various points.\nFirst identify where vocals come in.\nTo me, 0:04 to 0:09 seems instrumental.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#view-it",
    "href": "07_scipy.html#view-it",
    "title": "SciPy",
    "section": "View it",
    "text": "View it\n\nLook for patterns\n\n\nsnip = left[4*rate:10*rate]\nplt.plot(snip)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#repeats",
    "href": "07_scipy.html#repeats",
    "title": "SciPy",
    "section": "Repeats?",
    "text": "Repeats?\n\nLooks like volume cuts low on a repeated pattern.\nMaybe we can isolate that pattern.\nLet’s:\n\nPick a range\nFind a minimal value\nFind where that value occurs.\n\n\n\nlow_val = min(snip)\nlow_val\n\nnp.int16(-32071)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#whoops",
    "href": "07_scipy.html#whoops",
    "title": "SciPy",
    "section": "Whoops!",
    "text": "Whoops!\n\nOh we need to use absolute value.\nNo worries!\n\n\nlow_val = min(np.absolute(snip))\nlow_val\n\nnp.int16(0)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#patterns",
    "href": "07_scipy.html#patterns",
    "title": "SciPy",
    "section": "Patterns",
    "text": "Patterns\n\nMaybe there’s something repeating on a periodicity of like… 65k?\n\n\n# We note that the result was enclosed in () so we get the [0] of it.\nlows = lows[0]\n# Then proceed\nlows = lows[np.where(lows &gt; 500)]\nlows\n\narray([ 13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n       153051, 210217, 216983, 271632, 278282])",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#visualize",
    "href": "07_scipy.html#visualize",
    "title": "SciPy",
    "section": "Visualize",
    "text": "Visualize\n\nLet’s just plot the place the minimum occurs.\n\n\n_ = plt.hist(lows)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#more-bins",
    "href": "07_scipy.html#more-bins",
    "title": "SciPy",
    "section": "More Bins",
    "text": "More Bins\n\nHard to see, we increase the “bin” count.\n\n\n_ = plt.hist(lows, 100)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#a-pattern",
    "href": "07_scipy.html#a-pattern",
    "title": "SciPy",
    "section": "A Pattern?",
    "text": "A Pattern?\n\n_ = plt.hist(np.where(left == 0))\n\n\n\n\n\n\n\n\n\nOnly before vocals enter?",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#isolate",
    "href": "07_scipy.html#isolate",
    "title": "SciPy",
    "section": "Isolate",
    "text": "Isolate\n\nLet’s see if we can isolate a motif.\nWe’ll take the first zero past.\nI hear about two repeats on this portion, so we’ll take a zero in the middle.\n\n\nnp.where(snip == 0)\n\n(array([    13,     14,     18,     20,     31,     39,     44,    126,\n           127,    136,    137,    138,    148,    155,    157,    174,\n           176,    193,    197,    202,    219,    221,    222,    223,\n           231,    232,    262,    268,    317,    383,    405,    430,\n         13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n        153051, 210217, 216983, 271632, 278282]),)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#motif",
    "href": "07_scipy.html#motif",
    "title": "SciPy",
    "section": "Motif",
    "text": "Motif\n\nstereo = np.array([snip,snip]).transpose()\nmotif = stereo[13580:131204]\nscipy.io.wavfile.write(\"motif.wav\", rate, motif)\n# os.system(\"open motif.wav\") # After import, if you have VLC, on MacOS\n\n\n\n\nother = stereo[13580:271632]\nscipy.io.wavfile.write(\"other.wav\", rate, other)\n\n\n\n\nscipy.io.wavfile.write(\"motifs.wav\", rate, np.concat([motif,motif,motif]))\nscipy.io.wavfile.write(\"others.wav\", rate, np.concat([other,other,other]))\n\n\n\n\n\n\nYou can go become a dj, or…",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#fft",
    "href": "07_scipy.html#fft",
    "title": "SciPy",
    "section": "FFT",
    "text": "FFT\n\nThe actual correct way to do this is with a SciPy FFT:\n\nFast Fourier Transform\n\nAnd with a NumPy stride:\n\nStride Tricks\n\nWhich is probably a bit much for now.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#regression",
    "href": "07_scipy.html#regression",
    "title": "SciPy",
    "section": "Regression",
    "text": "Regression\n\nOne of the most used computation techniques is regression.\nIt is used throughout the sciences, but most commonly in econometrics.\nIn my my undergraduate economics class, I had a homework assignment to “prove” that raising minimum wage increases unemployment.\n\nIt doesn’t, but that isn’t relevant here.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#the-data",
    "href": "07_scipy.html#the-data",
    "title": "SciPy",
    "section": "The Data",
    "text": "The Data\n\nI usually get economic data from the “St. Louis Fed” which has a data portal called “FRED”.\n\nMinimum wage FEDMINNFRWG\nUnemployment rage UNRATE\nInflation CPIAUCSL",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#curl-1",
    "href": "07_scipy.html#curl-1",
    "title": "SciPy",
    "section": "curl",
    "text": "curl\n\nIt is actually possible to curl these but you probably have to navigate the websites to find the urls regardless.\nI retrieved these manually on MS Windows on 31 May 2025 at 7:33 PM PT.\n\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/FEMINNFRWG.csv -o FEDMINNFRWG.csv\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/UNRATE.csv-o UNRATE.csv\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/CPIAUCSL.csv -o CPIAUCSL.csv",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#within-python",
    "href": "07_scipy.html#within-python",
    "title": "SciPy",
    "section": "Within Python",
    "text": "Within Python\n\nYou can of course also get these with out leaving Python.\nGiven some url with Python\n\nurl = \"https://...\"\n\nYou can of course also:\n\npandas pd.read_csv(url)\n“os” os.system(\"curl \" + url + \" -o name.csv\")",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#how-i-did-it",
    "href": "07_scipy.html#how-i-did-it",
    "title": "SciPy",
    "section": "How I did it",
    "text": "How I did it\n\nimport pandas as pd\n\nminwage = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/FEDMINNFRWG.csv\")\nunemploy = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/UNRATE.csv\")\ninflate = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/CPIAUCSL.csv\")\ninflate\n\n\n\n\n\n\n\n\nobservation_date\nCPIAUCSL\n\n\n\n\n0\n1947-01-01\n21.480\n\n\n1\n1947-02-01\n21.620\n\n\n2\n1947-03-01\n22.000\n\n\n3\n1947-04-01\n22.000\n\n\n4\n1947-05-01\n21.950\n\n\n...\n...\n...\n\n\n935\n2024-12-01\n317.603\n\n\n936\n2025-01-01\n319.086\n\n\n937\n2025-02-01\n319.775\n\n\n938\n2025-03-01\n319.615\n\n\n939\n2025-04-01\n320.321\n\n\n\n\n940 rows × 2 columns",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#check-columns",
    "href": "07_scipy.html#check-columns",
    "title": "SciPy",
    "section": "Check Columns",
    "text": "Check Columns\n\nminwage.columns\n\nIndex(['observation_date', 'FEDMINNFRWG'], dtype='object')\n\n\n\nunemploy.columns\n\nIndex(['observation_date', 'UNRATE'], dtype='object')\n\n\n\ninflate.columns\n\nIndex(['observation_date', 'CPIAUCSL'], dtype='object')",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#merge",
    "href": "07_scipy.html#merge",
    "title": "SciPy",
    "section": "Merge",
    "text": "Merge\n\nThis is suitable for a merge.\nAlternatively, set date as index then join.\n\n\ndf = minwage.merge(unemploy).merge(inflate)\ndf = df.drop(columns=[\"observation_date\"])\ndf[:3]\n\n\n\n\n\n\n\n\nFEDMINNFRWG\nUNRATE\nCPIAUCSL\n\n\n\n\n0\n0.4\n3.4\n23.68\n\n\n1\n0.4\n3.8\n23.67\n\n\n2\n0.4\n4.0\n23.50",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#adjustments",
    "href": "07_scipy.html#adjustments",
    "title": "SciPy",
    "section": "Adjustments",
    "text": "Adjustments\n\nUnemployment rate is rate.\nMinimum wage is a nominal value (e.g. it’s units are ill-defined).\nInflation is an index of wage units.\nWe can divide wage by inflation to get a “real wage”.\n\n\n# I made so many types here.\n# In a pinch use df[df.columns[0]]\ndf[\"REAL\"] = df[\"FEDMINNFRWG\"] / df[\"CPIAUCSL\"]",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#percent-change",
    "href": "07_scipy.html#percent-change",
    "title": "SciPy",
    "section": "Percent Change",
    "text": "Percent Change\n\nWe measure percent change in real wages.\n\nWe use pandas .pct_change()\n\nIt’s recommend by SciPy\n\nWe drop the row 0 which has no percent change.\n\nDrop rows by index, vs column=&lt;name&gt;\n\nWe drop an undefined (“NaN”) values\n\n\n\ndf[\"REALPCT\"] = df[\"REAL\"].pct_change()\ndf.drop(0)\ndf = df.dropna()",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#unemployment",
    "href": "07_scipy.html#unemployment",
    "title": "SciPy",
    "section": "Unemployment",
    "text": "Unemployment\n\nOh we should probably take a percentage change in unemployment as well.\n\n\ndf[\"UNRATE\"] = df[\"UNRATE\"].pct_change()",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#look-at-it",
    "href": "07_scipy.html#look-at-it",
    "title": "SciPy",
    "section": "Look at it",
    "text": "Look at it\n\nplt.xlabel(\"REALPCT\")\nplt.ylabel(\"UNRATE\")\n_ = plt.scatter(df[\"REALPCT\"],df[\"UNRATE\"])",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#linear-regression",
    "href": "07_scipy.html#linear-regression",
    "title": "SciPy",
    "section": "Linear Regression",
    "text": "Linear Regression\n\nThe standard measure of statistical significance.\nWe are assuming linearity, but it is already a comparison between rates.\nFor more, study statistics!\n\n\nfrom scipy import stats",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#linregress",
    "href": "07_scipy.html#linregress",
    "title": "SciPy",
    "section": "linregress",
    "text": "linregress\n\nres = stats.linregress(df[\"REALPCT\"],df[\"UNRATE\"])\nprint(res)\n\nLinregressResult(slope=np.float64(nan), intercept=np.float64(nan), rvalue=np.float64(nan), pvalue=np.float64(nan), stderr=np.float64(nan), intercept_stderr=np.float64(nan))",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#credit",
    "href": "07_scipy.html#credit",
    "title": "SciPy",
    "section": "Credit",
    "text": "Credit\n\nThe remainder is adapted from the scipy.stats.linregress example.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#view",
    "href": "07_scipy.html#view",
    "title": "SciPy",
    "section": "View",
    "text": "View\n\nplt.scatter(df[\"REALPCT\"],df[\"UNRATE\"])\nx = np.linspace(df[\"REALPCT\"].min(), df[\"REALPCT\"].max())\n_ = plt.plot(x, res.intercept + res.slope*x)",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#confidence-interval",
    "href": "07_scipy.html#confidence-interval",
    "title": "SciPy",
    "section": "Confidence Interval",
    "text": "Confidence Interval\n\n“Two-sided inverse Students t-distribution”\n\n\n# p - probability, df - degrees of freedom\ndef tinv(p, df): \n    return abs(stats.t.ppf(p/2, df))",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#results",
    "href": "07_scipy.html#results",
    "title": "SciPy",
    "section": "Results",
    "text": "Results\n\nts = tinv(0.05, len(x)-2)\nprint(f\"slope (95%): {res.slope:.6f} +/- {ts*res.stderr:.6f}\")\nprint(f\"intercept (95%): {res.intercept:.6f}\"\n      f\" +/- {ts*res.intercept_stderr:.6f}\")\n\nslope (95%): nan +/- nan\nintercept (95%): nan +/- nan",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#tada",
    "href": "07_scipy.html#tada",
    "title": "SciPy",
    "section": "Tada!",
    "text": "Tada!\n\nRaising minimum wage doesn’t predictable impact unemployment.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#technetium",
    "href": "07_scipy.html#technetium",
    "title": "SciPy",
    "section": "Technetium",
    "text": "Technetium\n\nWe recall the periodic table data\n\n\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf[::30]\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n0\n1\nHydrogen\nH\n1.007\n0\n1\n1\n1\n1.0\ngas\n...\n13.5984\n0.00009\n14.175\n20.28\n3.0\nCavendish\n1766.0\n14.304\n1\n1.0\n\n\n30\n31\nGallium\nGa\n69.723\n39\n31\n31\n4\n13.0\nsolid\n...\n5.9993\n5.91000\n302.910\n2477.00\n14.0\nde Boisbaudran\n1875.0\n0.371\n4\n3.0\n\n\n60\n61\nPromethium\nPm\n145.000\n84\n61\n61\n6\nNaN\nartificial\n...\n5.5820\n7.26000\n1204.150\n3273.00\n14.0\nMarinsky et al.\n1945.0\nNaN\n6\nNaN\n\n\n90\n91\nProtactinium\nPa\n231.036\n140\n91\n91\n7\nNaN\nsolid\n...\n5.8900\n15.40000\n1873.150\n4300.00\n14.0\nHahn and Meitner\n1917.0\nNaN\n7\nNaN\n\n\n\n\n4 rows × 28 columns",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#interpolation",
    "href": "07_scipy.html#interpolation",
    "title": "SciPy",
    "section": "Interpolation",
    "text": "Interpolation\n\nWhen first setting out the table, a number of elements had not yet been “observed”\n\nThat is, no one determined their chemical properties while away they were an element.\n\nSome certainly were never observed, namely technetium (Tc, 43) which does not exist in nature.\nHowever, the layout of the table allowed scientists to predict properties of technetium",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#extract",
    "href": "07_scipy.html#extract",
    "title": "SciPy",
    "section": "Extract",
    "text": "Extract\n\nWe will:\n\nSet aside technetium in a variable to check our predictions against.\nRemove the “transuranic” elements which were also not yet observed.\n\n\n\ndf = df.iloc[:91]\nTc = df.iloc[42]\ndf = df.drop(42)\nTc\n\nAtomicNumber                        43\nElement                     Technetium\nSymbol                              Tc\nAtomicMass                        98.0\nNumberofNeutrons                    55\nNumberofProtons                     43\nNumberofElectrons                   43\nPeriod                               5\nGroup                              7.0\nPhase                       artificial\nRadioactive                        yes\nNatural                            NaN\nMetal                              yes\nNonmetal                           NaN\nMetalloid                          NaN\nType                  Transition Metal\nAtomicRadius                       2.0\nElectronegativity                  1.9\nFirstIonization                   7.28\nDensity                           11.5\nMeltingPoint                   2473.15\nBoilingPoint                    5150.0\nNumberOfIsotopes                  23.0\nDiscoverer           Perrier and Segr�\nYear                            1937.0\nSpecificHeat                       NaN\nNumberofShells                       5\nNumberofValence                    NaN\nName: 42, dtype: object",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#import",
    "href": "07_scipy.html#import",
    "title": "SciPy",
    "section": "Import",
    "text": "Import\n\nTo save some typing, we’ll import it directly.\n\n\nfrom scipy.interpolate import LinearNDInterpolator",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#data-1",
    "href": "07_scipy.html#data-1",
    "title": "SciPy",
    "section": "Data",
    "text": "Data\n\nWe recall electronegativity.\n\n\n\nCode\n# Plot\nplt.scatter(\n    x=df[\"Group\"],\n    y=df[\"Period\"],\n    c=df[\"Electronegativity\"]\n)\nplt.gca().invert_yaxis()\n# Label\nplt.title(\"Electronegativity\")\nplt.xlabel(\"Group\")\nplt.ylabel(\"Period\")\n_ = plt.colorbar()",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#reference",
    "href": "07_scipy.html#reference",
    "title": "SciPy",
    "section": "Reference",
    "text": "Reference\n\nThe documentation we’re following is here\n\n\n\nCode\nfrom scipy.interpolate import LinearNDInterpolator\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.default_rng()\nx = rng.random(10) - 0.5\ny = rng.random(10) - 0.5\nz = np.hypot(x, y)\nX = np.linspace(min(x), max(x))\nY = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\ninterp = LinearNDInterpolator(list(zip(x, y)), z)\nZ = interp(X, Y)\nplt.pcolormesh(X, Y, Z, shading='auto')\nplt.plot(x, y, \"ok\", label=\"input point\")\nplt.legend()\nplt.colorbar()\nplt.axis(\"equal\")\nplt.show()",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#working-df",
    "href": "07_scipy.html#working-df",
    "title": "SciPy",
    "section": "Working df",
    "text": "Working df\n\nWe need a df to work with.\nWe need only Group, Period, Electronegativity\nWe must not have any invalid entries.\nWe modify df to have only these 3 values, then .dropna()\n\n\ndf = df[[\"Group\", \"Period\", \"Electronegativity\"]]\ndf = df.dropna()",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#x",
    "href": "07_scipy.html#x",
    "title": "SciPy",
    "section": "X",
    "text": "X\n\nWe will:\n\nDetermine the input x values.\nWe call this X (capitalized) to denote it is a vector or array.\n\nWe used “Group” for x.\n\n\nX = df[\"Group\"]\nX[::20]\n\n0      1.0\n23     6.0\n45    10.0\n80    13.0\nName: Group, dtype: float64",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#y",
    "href": "07_scipy.html#y",
    "title": "SciPy",
    "section": "Y",
    "text": "Y\n\nWe will:\n\nDetermine the input x values.\nWe call this Y (capitalized) to denote it is a vector or array.\n\nWe used “Period” for y.\n\n\nY = df[\"Period\"]\nY[::20]\n\n0     1\n23    4\n45    5\n80    6\nName: Period, dtype: int64",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#d",
    "href": "07_scipy.html#d",
    "title": "SciPy",
    "section": "2D",
    "text": "2D\n\nWe will:\n\nCreate the 2D space given X and Y\nThis is a “column stack”\n\n\n\narr2d = np.column_stack((X,Y))\narr2d[::20]\n\narray([[ 1.,  1.],\n       [ 6.,  4.],\n       [10.,  5.],\n       [13.,  6.]])",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#z",
    "href": "07_scipy.html#z",
    "title": "SciPy",
    "section": "Z",
    "text": "Z\n\nWe will:\n\nProvide known output values as Z\n\n\n\nZ = df[\"Electronegativity\"]\nZ\n\n0     2.20\n2     0.98\n3     1.57\n4     2.04\n5     2.55\n      ... \n83    2.00\n84    2.20\n86    0.70\n87    0.90\n88    1.10\nName: Electronegativity, Length: 68, dtype: float64",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#scipy",
    "href": "07_scipy.html#scipy",
    "title": "SciPy",
    "section": "SciPy",
    "text": "SciPy\n\nBack to SciPy!\n\nUse LinearNDInterpolar\n\nIt basically makes a function that theoretically described electronegativity.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#stop-1",
    "href": "07_scipy.html#stop-1",
    "title": "SciPy",
    "section": "Stop!",
    "text": "Stop!\n\n\n\n\n\n\nNote\n\n\n\n\nWe are about to, essentially, conduct an experiment!\nWe should make a hypothesis first, then test it.\nFirst, naively predict Tc’s electronegativity, and write down your guess!\n\n\n\n\nThe next slides have my guess, but you should make your own guess first!",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#my-guess",
    "href": "07_scipy.html#my-guess",
    "title": "SciPy",
    "section": "My Guess",
    "text": "My Guess\n\nI took the electronegativity of Tc’s neighbors vertically and horizontally.\n\n\nTc\n\nAtomicNumber                        43\nElement                     Technetium\nSymbol                              Tc\nAtomicMass                        98.0\nNumberofNeutrons                    55\nNumberofProtons                     43\nNumberofElectrons                   43\nPeriod                               5\nGroup                              7.0\nPhase                       artificial\nRadioactive                        yes\nNatural                            NaN\nMetal                              yes\nNonmetal                           NaN\nMetalloid                          NaN\nType                  Transition Metal\nAtomicRadius                       2.0\nElectronegativity                  1.9\nFirstIonization                   7.28\nDensity                           11.5\nMeltingPoint                   2473.15\nBoilingPoint                    5150.0\nNumberOfIsotopes                  23.0\nDiscoverer           Perrier and Segr�\nYear                            1937.0\nSpecificHeat                       NaN\nNumberofShells                       5\nNumberofValence                    NaN\nName: 42, dtype: object",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#one-way",
    "href": "07_scipy.html#one-way",
    "title": "SciPy",
    "section": "One Way",
    "text": "One Way\n\nTc is group 7 and period 5, so, perhaps…\n\n\n# DataFrame \"vertical horizontal neighbors\"\nvh = df[df[\"Group\"] &gt;= 6]\nvh = vh[vh[\"Group\"] &lt;= 8]\nvh = vh[vh[\"Period\"] &gt;= 4]\nvh = vh[vh[\"Period\"] &lt;= 6]\nvh\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n23\n6.0\n4\n1.66\n\n\n24\n7.0\n4\n1.55\n\n\n25\n8.0\n4\n1.83\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n73\n6.0\n6\n2.36\n\n\n74\n7.0\n6\n1.90\n\n\n75\n8.0\n6\n2.20",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#aside-boolean-index",
    "href": "07_scipy.html#aside-boolean-index",
    "title": "SciPy",
    "section": "Aside: Boolean Index",
    "text": "Aside: Boolean Index\n\nThe previous example was not graceful.\nWe can use Boolean Indexing\nThe range detection method used earlier in piecewise.py doesn’t work on arrays unfortunately.\nBut (array &lt; value) & (array &gt; value) works.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#aside-example",
    "href": "07_scipy.html#aside-example",
    "title": "SciPy",
    "section": "Aside: Example",
    "text": "Aside: Example\n\nvh = df[(df[\"Group\"] &gt;= 6) & (df[\"Group\"] &lt;= 8) & (df[\"Period\"] &gt;= 4) & (df[\"Period\"] &lt;= 6)]\nvh\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n23\n6.0\n4\n1.66\n\n\n24\n7.0\n4\n1.55\n\n\n25\n8.0\n4\n1.83\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n73\n6.0\n6\n2.36\n\n\n74\n7.0\n6\n1.90\n\n\n75\n8.0\n6\n2.20",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#aside-immediate-neighbor",
    "href": "07_scipy.html#aside-immediate-neighbor",
    "title": "SciPy",
    "section": "Aside: Immediate Neighbor",
    "text": "Aside: Immediate Neighbor\n\nIt actually probably makes more sense to take\n\nThe sum, of\nThe absolute values, of\nThe differences, between\n\nTc’s group and period, and\nThe tested row’s group and period.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#immediate-example",
    "href": "07_scipy.html#immediate-example",
    "title": "SciPy",
    "section": "Immediate Example",
    "text": "Immediate Example\n\nclose = df[(abs(df[\"Group\"] - 7) + abs(df[\"Period\"] - 5)) &lt; 2]\nclose\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n24\n7.0\n4\n1.55\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n74\n7.0\n6\n1.90",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#my-estimate",
    "href": "07_scipy.html#my-estimate",
    "title": "SciPy",
    "section": "My Estimate:",
    "text": "My Estimate:\n\nAfter picking what I thought was things near Tc that should cancel out each other’s distance, I calculate their mean.\n\n\nmy_pred = close[\"Electronegativity\"].mean()\nmy_pred\n\nnp.float64(1.9525000000000001)\n\n\n\nThis is my naive prediction.\nNow I interpolate.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#interpolate",
    "href": "07_scipy.html#interpolate",
    "title": "SciPy",
    "section": "Interpolate",
    "text": "Interpolate\n\nLinearNDInterpolator takes an array of known inputs and an array of known outputs and returns a function that it thinks describes the relationship.\n“Thinks” being a vague term here to convey a sense of learning or prediction or estimation.\n\n\nf = LinearNDInterpolator(arr2d, Z)\nscipy_pred = f(7,5)\n[scipy_pred, my_pred, Tc[\"Electronegativity\"]]\n\n[array(1.725), np.float64(1.9525000000000001), np.float64(1.9)]",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#exercise-1",
    "href": "07_scipy.html#exercise-1",
    "title": "SciPy",
    "section": "Exercise",
    "text": "Exercise\n\nPredict using your own methods the density of Tc.\nInterpolate using SciPy the density of Tc.",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.html#solution",
    "href": "07_scipy.html#solution",
    "title": "SciPy",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf.drop(42)\ndf = df[[\"Group\", \"Period\", \"Density\"]]\ndf = df.dropna()\nf = LinearNDInterpolator(np.column_stack((df[\"Group\"],df[\"Period\"])), df[\"Density\"])\nme = df[(abs(df[\"Group\"] - 7) + abs(df[\"Period\"] - 5)) &lt; 2][\"Density\"].mean()\n[f(7,5), me, Tc[\"Density\"]]",
    "crumbs": [
      "SciPy"
    ]
  },
  {
    "objectID": "07_scipy.rjs.html#why-scipy",
    "href": "07_scipy.rjs.html#why-scipy",
    "title": "SciPy",
    "section": "Why SciPy",
    "text": "Why SciPy\n\nMost popular scientific computing platform in the world.\nBasis of scikit-learn, the most popular machine learning platform in the world.\nExtremely rigorous - most functions and documentation come with academic citations."
  },
  {
    "objectID": "07_scipy.rjs.html#why-not-scipy",
    "href": "07_scipy.rjs.html#why-not-scipy",
    "title": "SciPy",
    "section": "Why not SciPy",
    "text": "Why not SciPy\n\nSciPy for statistics has basically one challenger (statsmodels, which is great).\nSometimes SciPy is too “heavyweight” and NumPy would be sufficient.\nAs a rule, I tend to use NumPy for easy things and scikit-learn for hard things, and don’t use SciPy for much."
  },
  {
    "objectID": "07_scipy.rjs.html#relevance",
    "href": "07_scipy.rjs.html#relevance",
    "title": "SciPy",
    "section": "Relevance",
    "text": "Relevance\n\nThis is a scientific computing course!\nWe’ll do a bit of signal processing and interpolation."
  },
  {
    "objectID": "07_scipy.rjs.html#credits",
    "href": "07_scipy.rjs.html#credits",
    "title": "SciPy",
    "section": "Credits",
    "text": "Credits\n\nSciPy is a big, complex library with many components.\nI used each of:\n\nThe User Guide\nThe API reference\n\nAPI is “application program interface” - a description of the functions in SciPy by their arguments and return values.\n\nThe Cookbook which may be unofficial."
  },
  {
    "objectID": "07_scipy.rjs.html#pip-again",
    "href": "07_scipy.rjs.html#pip-again",
    "title": "SciPy",
    "section": "pip again",
    "text": "pip again\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install scipy\n\nThat might take a moment, when it does we can check it worked!"
  },
  {
    "objectID": "07_scipy.rjs.html#verify",
    "href": "07_scipy.rjs.html#verify",
    "title": "SciPy",
    "section": "Verify",
    "text": "Verify\n\nWe can quickly verify installation and introduce some conventions.\nOpen up Python and import the libraries:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy\n\nprint(scipy.__version__)\n\n1.14.1"
  },
  {
    "objectID": "07_scipy.rjs.html#motivation",
    "href": "07_scipy.rjs.html#motivation",
    "title": "SciPy",
    "section": "Motivation",
    "text": "Motivation\n\nI thought it would be fun to do some signal processing on a recognizable data set:\nPSY - GANGNAM STYLE(강남스타일) M/V"
  },
  {
    "objectID": "07_scipy.rjs.html#youtube",
    "href": "07_scipy.rjs.html#youtube",
    "title": "SciPy",
    "section": "YouTube",
    "text": "YouTube\n\n\n\n\n\n\nSTOP\n\n\nInstructor’s note: Do not click this link while streaming."
  },
  {
    "objectID": "07_scipy.rjs.html#problem-statement",
    "href": "07_scipy.rjs.html#problem-statement",
    "title": "SciPy",
    "section": "Problem Statement",
    "text": "Problem Statement\n\nSciPy has the ability to read some filetypes but not others.\n\nCan read: “.wav” Waveform Audio File Format.\nCan’t read: YouTube urls\n\nWe use Python package yt-dlp to download from YouTube.\nWe use non-Python package ffmpeg to translate .mp4 files to .wav\nWe use VideoLAN VLC Media Player to play the .wav files."
  },
  {
    "objectID": "07_scipy.rjs.html#note",
    "href": "07_scipy.rjs.html#note",
    "title": "SciPy",
    "section": "Note",
    "text": "Note\n\nYou do not need to download any of these.\nHere is the .wav:\n\n\n\n\nHere is a link:\n\npsy.wav"
  },
  {
    "objectID": "07_scipy.rjs.html#yt-dlp",
    "href": "07_scipy.rjs.html#yt-dlp",
    "title": "SciPy",
    "section": "yt-dlp",
    "text": "yt-dlp\n\nWhile I don’t think you need it for anything, I installed yt-dlp as follows, from the shell:\n\npython -m pip install yt-dlp"
  },
  {
    "objectID": "07_scipy.rjs.html#ffmpeg",
    "href": "07_scipy.rjs.html#ffmpeg",
    "title": "SciPy",
    "section": "ffmpeg",
    "text": "ffmpeg\n\nI believe this is the best place to download ffmpeg for Windows and MacOS.\nhttps://www.ffmpeg.org/download.html\nI used it on Ubuntu Linux and did not attempt and Windows or MacOS install."
  },
  {
    "objectID": "07_scipy.rjs.html#download",
    "href": "07_scipy.rjs.html#download",
    "title": "SciPy",
    "section": "Download",
    "text": "Download\n\nBoth yt-dlp and ffmpeg are command line utilites (like Python, Neovim, or ls).\nI didn’t actually ever use ffmpeg directly, it is just used by yt-dlp.\nGiven the url, I used the following shell command:\n\nyt-dlp -x --audio-format wav https://www.youtube.com/watch?v=9bZkp7q19f0 -o psy.wav\n\nThis tells yt-dlp to go to the url, download to video, convert it to a .wav, and save it as “psy.wav”"
  },
  {
    "objectID": "07_scipy.rjs.html#vlc",
    "href": "07_scipy.rjs.html#vlc",
    "title": "SciPy",
    "section": "VLC",
    "text": "VLC\n\nI highly recommend having VLC installed.\nhttps://www.videolan.org/vlc/#download"
  },
  {
    "objectID": "07_scipy.rjs.html#curl",
    "href": "07_scipy.rjs.html#curl",
    "title": "SciPy",
    "section": "curl",
    "text": "curl\n\nAs an alternative, you can curl the file from the course webpage.\ncurl is a shell command that downloads a file from a url.\n\nCan also be used to get e.g. the “.csv” file we used with pandas!\n\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/psy.wav -o psy.wav\nThis directs the command line to download the file from the url and save it locally as “psy.wav”"
  },
  {
    "objectID": "07_scipy.rjs.html#wavfile",
    "href": "07_scipy.rjs.html#wavfile",
    "title": "SciPy",
    "section": "wavfile",
    "text": "wavfile\n\nTo load a wavfile into SciPy, it is a simple matter.\nBut first, we note one difference:\n\nWith NumPy, we imported as np\nWith pandas, we import as pd\n\nWith Matplotlib, we imported Matplotlib “dot” something - pyplot\n\nThe “Python interface”"
  },
  {
    "objectID": "07_scipy.rjs.html#scipy-modules",
    "href": "07_scipy.rjs.html#scipy-modules",
    "title": "SciPy",
    "section": "SciPy Modules",
    "text": "SciPy Modules\n\nSciPy is composed of many modules\nmatplotlib.pyplot is a previous example of a module.\nFor example:\n\nscipy.io includes ways to read files.\nscipy.fft does Fast Fourier Transforms.\nscipy.stats does statistics."
  },
  {
    "objectID": "07_scipy.rjs.html#load-psy.wav",
    "href": "07_scipy.rjs.html#load-psy.wav",
    "title": "SciPy",
    "section": "Load “psy.wav”",
    "text": "Load “psy.wav”\n\nWe will load a sound file as an np.array.\n\n\nrate, data = scipy.io.wavfile.read(\"psy.wav\")\n\n\nThis may look odd!"
  },
  {
    "objectID": "07_scipy.rjs.html#multiple-return",
    "href": "07_scipy.rjs.html#multiple-return",
    "title": "SciPy",
    "section": "Multiple return",
    "text": "Multiple return\n\nThis uses a slightly advanced Python topic of “multiple return”.\n\n\ndef roots(x):\n    root = np.sqrt(x)\n    return -root, root\n\n\nPython can return multiple comma-separated values from a function.\n\n\nneg, pos = roots(25)\n[neg, pos]\n\n[np.float64(-5.0), np.float64(5.0)]\n\n\n\nWe can “unpack” the multiple values by providing comma separated variable names."
  },
  {
    "objectID": "07_scipy.rjs.html#aside-tuples",
    "href": "07_scipy.rjs.html#aside-tuples",
    "title": "SciPy",
    "section": "Aside: Tuples",
    "text": "Aside: Tuples\n\nThese multiple returns are just tuples.\n\nThe things that are like lists, but not exactly.\n\n\n\nboth = roots(64)\ntype(both)\n\ntuple\n\n\n\nWe can also use indexing to see individual elements of a tuple.\n\n\nboth[0]\n\nnp.float64(-8.0)"
  },
  {
    "objectID": "07_scipy.rjs.html#vs.-lists",
    "href": "07_scipy.rjs.html#vs.-lists",
    "title": "SciPy",
    "section": "vs. Lists",
    "text": "vs. Lists\n\nThe only difference compared to lists is updates.\nIn a list, we can change an element with its index:\n\n\ncolor_lst = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\ncolor_lst[-1] = \"purple\"\ncolor_lst\n\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']"
  },
  {
    "objectID": "07_scipy.rjs.html#aside-errors",
    "href": "07_scipy.rjs.html#aside-errors",
    "title": "SciPy",
    "section": "Aside: Errors",
    "text": "Aside: Errors\n\nDoing this to a list would create an error.\nThus far we have avoided showing example code that won’t work.\nWe can use try and except (like if and else) on erroneous code.\n\n\ncolor_tup = tuple(color_lst)\ntry:\n    color_tup[-1] = \"violet\"\nexcept:\n    print(\"Tuples can't do that.\")\n\nTuples can't do that."
  },
  {
    "objectID": "07_scipy.rjs.html#reading-files",
    "href": "07_scipy.rjs.html#reading-files",
    "title": "SciPy",
    "section": "Reading files",
    "text": "Reading files\n\nTry except is very handy when reading files.\nA lot of files I try to read are garbled and can’t be read.\nUsing try and except prevents Python errors.\n\nMore useful in big scripts than single-line things."
  },
  {
    "objectID": "07_scipy.rjs.html#example",
    "href": "07_scipy.rjs.html#example",
    "title": "SciPy",
    "section": "Example",
    "text": "Example\n\nEarlier today, I tried the curl command to get “psy.wav” while (unbeknownst to me) my internet was spotty.\nI got a file named “psy.wav” that was of size 0\nUnsurprisingly, opening it with SciPy led to an error.\nThis happens all the time!"
  },
  {
    "objectID": "07_scipy.rjs.html#data",
    "href": "07_scipy.rjs.html#data",
    "title": "SciPy",
    "section": "Data",
    "text": "Data\n\nBack to our .wav file.\nLet’s look at that data!\n\n\ndata[:10]\n\narray([[0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0]], dtype=int16)"
  },
  {
    "objectID": "07_scipy.rjs.html#rate",
    "href": "07_scipy.rjs.html#rate",
    "title": "SciPy",
    "section": "Rate",
    "text": "Rate\n\nrate\n\n48000\n\n\n\nYou may have listened to the file (or not).\nAudio doesn’t come in for about 4 seconds.\nThe song ends and there’s a kind of “outro”.\nWe can see these on the plot.\nBut that examples the zeros."
  },
  {
    "objectID": "07_scipy.rjs.html#plot",
    "href": "07_scipy.rjs.html#plot",
    "title": "SciPy",
    "section": "Plot",
    "text": "Plot\n\nplt.plot(data)"
  },
  {
    "objectID": "07_scipy.rjs.html#back-to-data",
    "href": "07_scipy.rjs.html#back-to-data",
    "title": "SciPy",
    "section": "Back to Data",
    "text": "Back to Data\n\nGiven the rate, we can look at values ever rate amount of time.\nI bet it’s seconds, so we’ll see 3 or 4 zero-only then some non-zero.\n\n\ndata[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      3],\n       [-13903, -13896],\n       [ 12440,  12442],\n       [  6053,   6051],\n       [  5888,   5888],\n       [    53,     52]], dtype=int16)"
  },
  {
    "objectID": "07_scipy.rjs.html#why-pairs",
    "href": "07_scipy.rjs.html#why-pairs",
    "title": "SciPy",
    "section": "Why pairs?",
    "text": "Why pairs?\n\nThose two values may look initially suspicious, then I remembered.\nMany mammals, including some assistant professors of computer science, have two ears!\nThis is a stereo file - the pairs are for each of two speakers."
  },
  {
    "objectID": "07_scipy.rjs.html#test-it",
    "href": "07_scipy.rjs.html#test-it",
    "title": "SciPy",
    "section": "Test it",
    "text": "Test it\n\nDon’t believe me?\nLet’s split into a “left” and “right” file.\nWe needn’t necessarily get the labels right, but these are simply NumPy operations.\nThen listen!"
  },
  {
    "objectID": "07_scipy.rjs.html#transpose",
    "href": "07_scipy.rjs.html#transpose",
    "title": "SciPy",
    "section": "Transpose",
    "text": "Transpose\n\nRemember .transpose?\nIt will take an array of pairs and make a pair of arrays.\n\n\ntpose = data.transpose()\ntpose[0][:rate*10:rate]\n\narray([     0,      0,      0,      0,     -2, -13903,  12440,   6053,\n         5888,     53], dtype=int16)"
  },
  {
    "objectID": "07_scipy.rjs.html#split",
    "href": "07_scipy.rjs.html#split",
    "title": "SciPy",
    "section": "Split",
    "text": "Split\n\nI will arbitrarily call one “left” and one “rite” (not “right” because we don’t know if we’re right).\n\n\nleft = tpose[0]\nrite = tpose[1]"
  },
  {
    "objectID": "07_scipy.rjs.html#zeros",
    "href": "07_scipy.rjs.html#zeros",
    "title": "SciPy",
    "section": "Zeros",
    "text": "Zeros\n\nWe’ll also make a zero-only array of the same length.\n\n\n# We note the \"dtype\" was \"int16\" so we do the same.\n# We do have to be clear it's NumPy int16 though!\nzero = np.zeros(len(left),dtype=np.int16)"
  },
  {
    "objectID": "07_scipy.rjs.html#combine",
    "href": "07_scipy.rjs.html#combine",
    "title": "SciPy",
    "section": "Combine",
    "text": "Combine\n\nWe can make left-only and rite-only arrays via:\n\nCombine\nTranspose\n\n\n\n\n\nleft_only = np.array([left,zero]).transpose()\nleft_only[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      0],\n       [-13903,      0],\n       [ 12440,      0],\n       [  6053,      0],\n       [  5888,      0],\n       [    53,      0]], dtype=int16)\n\n\n\n\nrite_only = np.array([zero,rite]).transpose()\nrite_only[:rate*10:rate]\n\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      3],\n       [     0, -13896],\n       [     0,  12442],\n       [     0,   6051],\n       [     0,   5888],\n       [     0,     52]], dtype=int16)"
  },
  {
    "objectID": "07_scipy.rjs.html#save",
    "href": "07_scipy.rjs.html#save",
    "title": "SciPy",
    "section": "Save",
    "text": "Save\n\nLet’s write/save both then give ’um a listen.\n\n\n\n\nscipy.io.wavfile.write(\"left.wav\", rate, left_only)\n\n\n\nscipy.io.wavfile.write(\"rite.wav\", rate, rite_only)"
  },
  {
    "objectID": "07_scipy.rjs.html#listen",
    "href": "07_scipy.rjs.html#listen",
    "title": "SciPy",
    "section": "Listen",
    "text": "Listen\n\nLet’s write/save both then give ’um a listen."
  },
  {
    "objectID": "07_scipy.rjs.html#noise-reduction",
    "href": "07_scipy.rjs.html#noise-reduction",
    "title": "SciPy",
    "section": "Noise Reduction",
    "text": "Noise Reduction\n\nIn a way, all sound is noise.\nLet’s try and isolate the vocals and music, regarding the other variously as noise at various points.\nFirst identify where vocals come in.\nTo me, 0:04 to 0:09 seems instrumental."
  },
  {
    "objectID": "07_scipy.rjs.html#view-it",
    "href": "07_scipy.rjs.html#view-it",
    "title": "SciPy",
    "section": "View it",
    "text": "View it\n\nLook for patterns\n\n\nsnip = left[4*rate:10*rate]\nplt.plot(snip)"
  },
  {
    "objectID": "07_scipy.rjs.html#repeats",
    "href": "07_scipy.rjs.html#repeats",
    "title": "SciPy",
    "section": "Repeats?",
    "text": "Repeats?\n\nLooks like volume cuts low on a repeated pattern.\nMaybe we can isolate that pattern.\nLet’s:\n\nPick a range\nFind a minimal value\nFind where that value occurs.\n\n\n\nlow_val = min(snip)\nlow_val\n\nnp.int16(-32071)"
  },
  {
    "objectID": "07_scipy.rjs.html#whoops",
    "href": "07_scipy.rjs.html#whoops",
    "title": "SciPy",
    "section": "Whoops!",
    "text": "Whoops!\n\nOh we need to use absolute value.\nNo worries!\n\n\nlow_val = min(np.absolute(snip))\nlow_val\n\nnp.int16(0)"
  },
  {
    "objectID": "07_scipy.rjs.html#patterns",
    "href": "07_scipy.rjs.html#patterns",
    "title": "SciPy",
    "section": "Patterns",
    "text": "Patterns\n\nMaybe there’s something repeating on a periodicity of like… 65k?\n\n\n# We note that the result was enclosed in () so we get the [0] of it.\nlows = lows[0]\n# Then proceed\nlows = lows[np.where(lows &gt; 500)]\nlows\n\narray([ 13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n       153051, 210217, 216983, 271632, 278282])"
  },
  {
    "objectID": "07_scipy.rjs.html#visualize",
    "href": "07_scipy.rjs.html#visualize",
    "title": "SciPy",
    "section": "Visualize",
    "text": "Visualize\n\nLet’s just plot the place the minimum occurs.\n\n\n_ = plt.hist(lows)"
  },
  {
    "objectID": "07_scipy.rjs.html#more-bins",
    "href": "07_scipy.rjs.html#more-bins",
    "title": "SciPy",
    "section": "More Bins",
    "text": "More Bins\n\nHard to see, we increase the “bin” count.\n\n\n_ = plt.hist(lows, 100)"
  },
  {
    "objectID": "07_scipy.rjs.html#a-pattern",
    "href": "07_scipy.rjs.html#a-pattern",
    "title": "SciPy",
    "section": "A Pattern?",
    "text": "A Pattern?\n\n_ = plt.hist(np.where(left == 0))\n\n\n\n\n\n\n\n\n\nOnly before vocals enter?"
  },
  {
    "objectID": "07_scipy.rjs.html#isolate",
    "href": "07_scipy.rjs.html#isolate",
    "title": "SciPy",
    "section": "Isolate",
    "text": "Isolate\n\nLet’s see if we can isolate a motif.\nWe’ll take the first zero past.\nI hear about two repeats on this portion, so we’ll take a zero in the middle.\n\n\nnp.where(snip == 0)\n\n(array([    13,     14,     18,     20,     31,     39,     44,    126,\n           127,    136,    137,    138,    148,    155,    157,    174,\n           176,    193,    197,    202,    219,    221,    222,    223,\n           231,    232,    262,    268,    317,    383,    405,    430,\n         13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n        153051, 210217, 216983, 271632, 278282]),)"
  },
  {
    "objectID": "07_scipy.rjs.html#motif",
    "href": "07_scipy.rjs.html#motif",
    "title": "SciPy",
    "section": "Motif",
    "text": "Motif\n\nstereo = np.array([snip,snip]).transpose()\nmotif = stereo[13580:131204]\nscipy.io.wavfile.write(\"motif.wav\", rate, motif)\n# os.system(\"open motif.wav\") # After import, if you have VLC, on MacOS\n\n\n\n\nother = stereo[13580:271632]\nscipy.io.wavfile.write(\"other.wav\", rate, other)\n\n\n\n\nscipy.io.wavfile.write(\"motifs.wav\", rate, np.concat([motif,motif,motif]))\nscipy.io.wavfile.write(\"others.wav\", rate, np.concat([other,other,other]))\n\n\n\n\n\n\nYou can go become a dj, or…"
  },
  {
    "objectID": "07_scipy.rjs.html#fft",
    "href": "07_scipy.rjs.html#fft",
    "title": "SciPy",
    "section": "FFT",
    "text": "FFT\n\nThe actual correct way to do this is with a SciPy FFT:\n\nFast Fourier Transform\n\nAnd with a NumPy stride:\n\nStride Tricks\n\nWhich is probably a bit much for now."
  },
  {
    "objectID": "07_scipy.rjs.html#regression",
    "href": "07_scipy.rjs.html#regression",
    "title": "SciPy",
    "section": "Regression",
    "text": "Regression\n\nOne of the most used computation techniques is regression.\nIt is used throughout the sciences, but most commonly in econometrics.\nIn my my undergraduate economics class, I had a homework assignment to “prove” that raising minimum wage increases unemployment.\n\nIt doesn’t, but that isn’t relevant here."
  },
  {
    "objectID": "07_scipy.rjs.html#the-data",
    "href": "07_scipy.rjs.html#the-data",
    "title": "SciPy",
    "section": "The Data",
    "text": "The Data\n\nI usually get economic data from the “St. Louis Fed” which has a data portal called “FRED”.\n\nMinimum wage FEDMINNFRWG\nUnemployment rage UNRATE\nInflation CPIAUCSL"
  },
  {
    "objectID": "07_scipy.rjs.html#curl-1",
    "href": "07_scipy.rjs.html#curl-1",
    "title": "SciPy",
    "section": "curl",
    "text": "curl\n\nIt is actually possible to curl these but you probably have to navigate the websites to find the urls regardless.\nI retrieved these manually on MS Windows on 31 May 2025 at 7:33 PM PT.\n\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/FEMINNFRWG.csv -o FEDMINNFRWG.csv\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/UNRATE.csv-o UNRATE.csv\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/CPIAUCSL.csv -o CPIAUCSL.csv"
  },
  {
    "objectID": "07_scipy.rjs.html#within-python",
    "href": "07_scipy.rjs.html#within-python",
    "title": "SciPy",
    "section": "Within Python",
    "text": "Within Python\n\nYou can of course also get these with out leaving Python.\nGiven some url with Python\n\nurl = \"https://...\"\n\nYou can of course also:\n\npandas pd.read_csv(url)\n“os” os.system(\"curl \" + url + \" -o name.csv\")"
  },
  {
    "objectID": "07_scipy.rjs.html#how-i-did-it",
    "href": "07_scipy.rjs.html#how-i-did-it",
    "title": "SciPy",
    "section": "How I did it",
    "text": "How I did it\n\nimport pandas as pd\n\nminwage = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/FEDMINNFRWG.csv\")\nunemploy = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/UNRATE.csv\")\ninflate = pd.read_csv(\"https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/CPIAUCSL.csv\")\ninflate\n\n\n\n\n\n\n\n\nobservation_date\nCPIAUCSL\n\n\n\n\n0\n1947-01-01\n21.480\n\n\n1\n1947-02-01\n21.620\n\n\n2\n1947-03-01\n22.000\n\n\n3\n1947-04-01\n22.000\n\n\n4\n1947-05-01\n21.950\n\n\n...\n...\n...\n\n\n935\n2024-12-01\n317.603\n\n\n936\n2025-01-01\n319.086\n\n\n937\n2025-02-01\n319.775\n\n\n938\n2025-03-01\n319.615\n\n\n939\n2025-04-01\n320.321\n\n\n\n\n940 rows × 2 columns"
  },
  {
    "objectID": "07_scipy.rjs.html#check-columns",
    "href": "07_scipy.rjs.html#check-columns",
    "title": "SciPy",
    "section": "Check Columns",
    "text": "Check Columns\n\nminwage.columns\n\nIndex(['observation_date', 'FEDMINNFRWG'], dtype='object')\n\n\n\nunemploy.columns\n\nIndex(['observation_date', 'UNRATE'], dtype='object')\n\n\n\ninflate.columns\n\nIndex(['observation_date', 'CPIAUCSL'], dtype='object')"
  },
  {
    "objectID": "07_scipy.rjs.html#merge",
    "href": "07_scipy.rjs.html#merge",
    "title": "SciPy",
    "section": "Merge",
    "text": "Merge\n\nThis is suitable for a merge.\nAlternatively, set date as index then join.\n\n\ndf = minwage.merge(unemploy).merge(inflate)\ndf = df.drop(columns=[\"observation_date\"])\ndf[:3]\n\n\n\n\n\n\n\n\nFEDMINNFRWG\nUNRATE\nCPIAUCSL\n\n\n\n\n0\n0.4\n3.4\n23.68\n\n\n1\n0.4\n3.8\n23.67\n\n\n2\n0.4\n4.0\n23.50"
  },
  {
    "objectID": "07_scipy.rjs.html#adjustments",
    "href": "07_scipy.rjs.html#adjustments",
    "title": "SciPy",
    "section": "Adjustments",
    "text": "Adjustments\n\nUnemployment rate is rate.\nMinimum wage is a nominal value (e.g. it’s units are ill-defined).\nInflation is an index of wage units.\nWe can divide wage by inflation to get a “real wage”.\n\n\n# I made so many types here.\n# In a pinch use df[df.columns[0]]\ndf[\"REAL\"] = df[\"FEDMINNFRWG\"] / df[\"CPIAUCSL\"]"
  },
  {
    "objectID": "07_scipy.rjs.html#percent-change",
    "href": "07_scipy.rjs.html#percent-change",
    "title": "SciPy",
    "section": "Percent Change",
    "text": "Percent Change\n\nWe measure percent change in real wages.\n\nWe use pandas .pct_change()\n\nIt’s recommend by SciPy\n\nWe drop the row 0 which has no percent change.\n\nDrop rows by index, vs column=&lt;name&gt;\n\nWe drop an undefined (“NaN”) values\n\n\n\ndf[\"REALPCT\"] = df[\"REAL\"].pct_change()\ndf.drop(0)\ndf = df.dropna()"
  },
  {
    "objectID": "07_scipy.rjs.html#unemployment",
    "href": "07_scipy.rjs.html#unemployment",
    "title": "SciPy",
    "section": "Unemployment",
    "text": "Unemployment\n\nOh we should probably take a percentage change in unemployment as well.\n\n\ndf[\"UNRATE\"] = df[\"UNRATE\"].pct_change()"
  },
  {
    "objectID": "07_scipy.rjs.html#look-at-it",
    "href": "07_scipy.rjs.html#look-at-it",
    "title": "SciPy",
    "section": "Look at it",
    "text": "Look at it\n\nplt.xlabel(\"REALPCT\")\nplt.ylabel(\"UNRATE\")\n_ = plt.scatter(df[\"REALPCT\"],df[\"UNRATE\"])"
  },
  {
    "objectID": "07_scipy.rjs.html#linear-regression",
    "href": "07_scipy.rjs.html#linear-regression",
    "title": "SciPy",
    "section": "Linear Regression",
    "text": "Linear Regression\n\nThe standard measure of statistical significance.\nWe are assuming linearity, but it is already a comparison between rates.\nFor more, study statistics!\n\n\nfrom scipy import stats"
  },
  {
    "objectID": "07_scipy.rjs.html#linregress",
    "href": "07_scipy.rjs.html#linregress",
    "title": "SciPy",
    "section": "linregress",
    "text": "linregress\n\nres = stats.linregress(df[\"REALPCT\"],df[\"UNRATE\"])\nprint(res)\n\nLinregressResult(slope=np.float64(nan), intercept=np.float64(nan), rvalue=np.float64(nan), pvalue=np.float64(nan), stderr=np.float64(nan), intercept_stderr=np.float64(nan))"
  },
  {
    "objectID": "07_scipy.rjs.html#credit",
    "href": "07_scipy.rjs.html#credit",
    "title": "SciPy",
    "section": "Credit",
    "text": "Credit\n\nThe remainder is adapted from the scipy.stats.linregress example."
  },
  {
    "objectID": "07_scipy.rjs.html#view",
    "href": "07_scipy.rjs.html#view",
    "title": "SciPy",
    "section": "View",
    "text": "View\n\nplt.scatter(df[\"REALPCT\"],df[\"UNRATE\"])\nx = np.linspace(df[\"REALPCT\"].min(), df[\"REALPCT\"].max())\n_ = plt.plot(x, res.intercept + res.slope*x)"
  },
  {
    "objectID": "07_scipy.rjs.html#confidence-interval",
    "href": "07_scipy.rjs.html#confidence-interval",
    "title": "SciPy",
    "section": "Confidence Interval",
    "text": "Confidence Interval\n\n“Two-sided inverse Students t-distribution”\n\n\n# p - probability, df - degrees of freedom\ndef tinv(p, df): \n    return abs(stats.t.ppf(p/2, df))"
  },
  {
    "objectID": "07_scipy.rjs.html#results",
    "href": "07_scipy.rjs.html#results",
    "title": "SciPy",
    "section": "Results",
    "text": "Results\n\nts = tinv(0.05, len(x)-2)\nprint(f\"slope (95%): {res.slope:.6f} +/- {ts*res.stderr:.6f}\")\nprint(f\"intercept (95%): {res.intercept:.6f}\"\n      f\" +/- {ts*res.intercept_stderr:.6f}\")\n\nslope (95%): nan +/- nan\nintercept (95%): nan +/- nan"
  },
  {
    "objectID": "07_scipy.rjs.html#tada",
    "href": "07_scipy.rjs.html#tada",
    "title": "SciPy",
    "section": "Tada!",
    "text": "Tada!\n\nRaising minimum wage doesn’t predictable impact unemployment."
  },
  {
    "objectID": "07_scipy.rjs.html#technetium",
    "href": "07_scipy.rjs.html#technetium",
    "title": "SciPy",
    "section": "Technetium",
    "text": "Technetium\n\nWe recall the periodic table data\n\n\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf[::30]\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n0\n1\nHydrogen\nH\n1.007\n0\n1\n1\n1\n1.0\ngas\n...\n13.5984\n0.00009\n14.175\n20.28\n3.0\nCavendish\n1766.0\n14.304\n1\n1.0\n\n\n30\n31\nGallium\nGa\n69.723\n39\n31\n31\n4\n13.0\nsolid\n...\n5.9993\n5.91000\n302.910\n2477.00\n14.0\nde Boisbaudran\n1875.0\n0.371\n4\n3.0\n\n\n60\n61\nPromethium\nPm\n145.000\n84\n61\n61\n6\nNaN\nartificial\n...\n5.5820\n7.26000\n1204.150\n3273.00\n14.0\nMarinsky et al.\n1945.0\nNaN\n6\nNaN\n\n\n90\n91\nProtactinium\nPa\n231.036\n140\n91\n91\n7\nNaN\nsolid\n...\n5.8900\n15.40000\n1873.150\n4300.00\n14.0\nHahn and Meitner\n1917.0\nNaN\n7\nNaN\n\n\n\n\n4 rows × 28 columns"
  },
  {
    "objectID": "07_scipy.rjs.html#interpolation",
    "href": "07_scipy.rjs.html#interpolation",
    "title": "SciPy",
    "section": "Interpolation",
    "text": "Interpolation\n\nWhen first setting out the table, a number of elements had not yet been “observed”\n\nThat is, no one determined their chemical properties while away they were an element.\n\nSome certainly were never observed, namely technetium (Tc, 43) which does not exist in nature.\nHowever, the layout of the table allowed scientists to predict properties of technetium"
  },
  {
    "objectID": "07_scipy.rjs.html#extract",
    "href": "07_scipy.rjs.html#extract",
    "title": "SciPy",
    "section": "Extract",
    "text": "Extract\n\nWe will:\n\nSet aside technetium in a variable to check our predictions against.\nRemove the “transuranic” elements which were also not yet observed.\n\n\n\ndf = df.iloc[:91]\nTc = df.iloc[42]\ndf = df.drop(42)\nTc\n\nAtomicNumber                        43\nElement                     Technetium\nSymbol                              Tc\nAtomicMass                        98.0\nNumberofNeutrons                    55\nNumberofProtons                     43\nNumberofElectrons                   43\nPeriod                               5\nGroup                              7.0\nPhase                       artificial\nRadioactive                        yes\nNatural                            NaN\nMetal                              yes\nNonmetal                           NaN\nMetalloid                          NaN\nType                  Transition Metal\nAtomicRadius                       2.0\nElectronegativity                  1.9\nFirstIonization                   7.28\nDensity                           11.5\nMeltingPoint                   2473.15\nBoilingPoint                    5150.0\nNumberOfIsotopes                  23.0\nDiscoverer           Perrier and Segr�\nYear                            1937.0\nSpecificHeat                       NaN\nNumberofShells                       5\nNumberofValence                    NaN\nName: 42, dtype: object"
  },
  {
    "objectID": "07_scipy.rjs.html#import",
    "href": "07_scipy.rjs.html#import",
    "title": "SciPy",
    "section": "Import",
    "text": "Import\n\nTo save some typing, we’ll import it directly.\n\n\nfrom scipy.interpolate import LinearNDInterpolator"
  },
  {
    "objectID": "07_scipy.rjs.html#data-1",
    "href": "07_scipy.rjs.html#data-1",
    "title": "SciPy",
    "section": "Data",
    "text": "Data\n\nWe recall electronegativity.\n\n\n\nCode\n# Plot\nplt.scatter(\n    x=df[\"Group\"],\n    y=df[\"Period\"],\n    c=df[\"Electronegativity\"]\n)\nplt.gca().invert_yaxis()\n# Label\nplt.title(\"Electronegativity\")\nplt.xlabel(\"Group\")\nplt.ylabel(\"Period\")\n_ = plt.colorbar()"
  },
  {
    "objectID": "07_scipy.rjs.html#reference",
    "href": "07_scipy.rjs.html#reference",
    "title": "SciPy",
    "section": "Reference",
    "text": "Reference\n\nThe documentation we’re following is here\n\n\n\nCode\nfrom scipy.interpolate import LinearNDInterpolator\nimport numpy as np\nimport matplotlib.pyplot as plt\nrng = np.random.default_rng()\nx = rng.random(10) - 0.5\ny = rng.random(10) - 0.5\nz = np.hypot(x, y)\nX = np.linspace(min(x), max(x))\nY = np.linspace(min(y), max(y))\nX, Y = np.meshgrid(X, Y)  # 2D grid for interpolation\ninterp = LinearNDInterpolator(list(zip(x, y)), z)\nZ = interp(X, Y)\nplt.pcolormesh(X, Y, Z, shading='auto')\nplt.plot(x, y, \"ok\", label=\"input point\")\nplt.legend()\nplt.colorbar()\nplt.axis(\"equal\")\nplt.show()"
  },
  {
    "objectID": "07_scipy.rjs.html#working-df",
    "href": "07_scipy.rjs.html#working-df",
    "title": "SciPy",
    "section": "Working df",
    "text": "Working df\n\nWe need a df to work with.\nWe need only Group, Period, Electronegativity\nWe must not have any invalid entries.\nWe modify df to have only these 3 values, then .dropna()\n\n\ndf = df[[\"Group\", \"Period\", \"Electronegativity\"]]\ndf = df.dropna()"
  },
  {
    "objectID": "07_scipy.rjs.html#x",
    "href": "07_scipy.rjs.html#x",
    "title": "SciPy",
    "section": "X",
    "text": "X\n\nWe will:\n\nDetermine the input x values.\nWe call this X (capitalized) to denote it is a vector or array.\n\nWe used “Group” for x.\n\n\nX = df[\"Group\"]\nX[::20]\n\n0      1.0\n23     6.0\n45    10.0\n80    13.0\nName: Group, dtype: float64"
  },
  {
    "objectID": "07_scipy.rjs.html#y",
    "href": "07_scipy.rjs.html#y",
    "title": "SciPy",
    "section": "Y",
    "text": "Y\n\nWe will:\n\nDetermine the input x values.\nWe call this Y (capitalized) to denote it is a vector or array.\n\nWe used “Period” for y.\n\n\nY = df[\"Period\"]\nY[::20]\n\n0     1\n23    4\n45    5\n80    6\nName: Period, dtype: int64"
  },
  {
    "objectID": "07_scipy.rjs.html#d",
    "href": "07_scipy.rjs.html#d",
    "title": "SciPy",
    "section": "2D",
    "text": "2D\n\nWe will:\n\nCreate the 2D space given X and Y\nThis is a “column stack”\n\n\n\narr2d = np.column_stack((X,Y))\narr2d[::20]\n\narray([[ 1.,  1.],\n       [ 6.,  4.],\n       [10.,  5.],\n       [13.,  6.]])"
  },
  {
    "objectID": "07_scipy.rjs.html#z",
    "href": "07_scipy.rjs.html#z",
    "title": "SciPy",
    "section": "Z",
    "text": "Z\n\nWe will:\n\nProvide known output values as Z\n\n\n\nZ = df[\"Electronegativity\"]\nZ\n\n0     2.20\n2     0.98\n3     1.57\n4     2.04\n5     2.55\n      ... \n83    2.00\n84    2.20\n86    0.70\n87    0.90\n88    1.10\nName: Electronegativity, Length: 68, dtype: float64"
  },
  {
    "objectID": "07_scipy.rjs.html#scipy",
    "href": "07_scipy.rjs.html#scipy",
    "title": "SciPy",
    "section": "SciPy",
    "text": "SciPy\n\nBack to SciPy!\n\nUse LinearNDInterpolar\n\nIt basically makes a function that theoretically described electronegativity."
  },
  {
    "objectID": "07_scipy.rjs.html#stop-1",
    "href": "07_scipy.rjs.html#stop-1",
    "title": "SciPy",
    "section": "Stop!",
    "text": "Stop!\n\n\n\n\n\n\nNote\n\n\n\nWe are about to, essentially, conduct an experiment!\nWe should make a hypothesis first, then test it.\nFirst, naively predict Tc’s electronegativity, and write down your guess!\n\n\n\n\n\nThe next slides have my guess, but you should make your own guess first!"
  },
  {
    "objectID": "07_scipy.rjs.html#my-guess",
    "href": "07_scipy.rjs.html#my-guess",
    "title": "SciPy",
    "section": "My Guess",
    "text": "My Guess\n\nI took the electronegativity of Tc’s neighbors vertically and horizontally.\n\n\nTc\n\nAtomicNumber                        43\nElement                     Technetium\nSymbol                              Tc\nAtomicMass                        98.0\nNumberofNeutrons                    55\nNumberofProtons                     43\nNumberofElectrons                   43\nPeriod                               5\nGroup                              7.0\nPhase                       artificial\nRadioactive                        yes\nNatural                            NaN\nMetal                              yes\nNonmetal                           NaN\nMetalloid                          NaN\nType                  Transition Metal\nAtomicRadius                       2.0\nElectronegativity                  1.9\nFirstIonization                   7.28\nDensity                           11.5\nMeltingPoint                   2473.15\nBoilingPoint                    5150.0\nNumberOfIsotopes                  23.0\nDiscoverer           Perrier and Segr�\nYear                            1937.0\nSpecificHeat                       NaN\nNumberofShells                       5\nNumberofValence                    NaN\nName: 42, dtype: object"
  },
  {
    "objectID": "07_scipy.rjs.html#one-way",
    "href": "07_scipy.rjs.html#one-way",
    "title": "SciPy",
    "section": "One Way",
    "text": "One Way\n\nTc is group 7 and period 5, so, perhaps…\n\n\n# DataFrame \"vertical horizontal neighbors\"\nvh = df[df[\"Group\"] &gt;= 6]\nvh = vh[vh[\"Group\"] &lt;= 8]\nvh = vh[vh[\"Period\"] &gt;= 4]\nvh = vh[vh[\"Period\"] &lt;= 6]\nvh\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n23\n6.0\n4\n1.66\n\n\n24\n7.0\n4\n1.55\n\n\n25\n8.0\n4\n1.83\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n73\n6.0\n6\n2.36\n\n\n74\n7.0\n6\n1.90\n\n\n75\n8.0\n6\n2.20"
  },
  {
    "objectID": "07_scipy.rjs.html#aside-boolean-index",
    "href": "07_scipy.rjs.html#aside-boolean-index",
    "title": "SciPy",
    "section": "Aside: Boolean Index",
    "text": "Aside: Boolean Index\n\nThe previous example was not graceful.\nWe can use Boolean Indexing\nThe range detection method used earlier in piecewise.py doesn’t work on arrays unfortunately.\nBut (array &lt; value) & (array &gt; value) works."
  },
  {
    "objectID": "07_scipy.rjs.html#aside-example",
    "href": "07_scipy.rjs.html#aside-example",
    "title": "SciPy",
    "section": "Aside: Example",
    "text": "Aside: Example\n\nvh = df[(df[\"Group\"] &gt;= 6) & (df[\"Group\"] &lt;= 8) & (df[\"Period\"] &gt;= 4) & (df[\"Period\"] &lt;= 6)]\nvh\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n23\n6.0\n4\n1.66\n\n\n24\n7.0\n4\n1.55\n\n\n25\n8.0\n4\n1.83\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n73\n6.0\n6\n2.36\n\n\n74\n7.0\n6\n1.90\n\n\n75\n8.0\n6\n2.20"
  },
  {
    "objectID": "07_scipy.rjs.html#aside-immediate-neighbor",
    "href": "07_scipy.rjs.html#aside-immediate-neighbor",
    "title": "SciPy",
    "section": "Aside: Immediate Neighbor",
    "text": "Aside: Immediate Neighbor\n\nIt actually probably makes more sense to take\n\nThe sum, of\nThe absolute values, of\nThe differences, between\n\nTc’s group and period, and\nThe tested row’s group and period."
  },
  {
    "objectID": "07_scipy.rjs.html#immediate-example",
    "href": "07_scipy.rjs.html#immediate-example",
    "title": "SciPy",
    "section": "Immediate Example",
    "text": "Immediate Example\n\nclose = df[(abs(df[\"Group\"] - 7) + abs(df[\"Period\"] - 5)) &lt; 2]\nclose\n\n\n\n\n\n\n\n\nGroup\nPeriod\nElectronegativity\n\n\n\n\n24\n7.0\n4\n1.55\n\n\n41\n6.0\n5\n2.16\n\n\n43\n8.0\n5\n2.20\n\n\n74\n7.0\n6\n1.90"
  },
  {
    "objectID": "07_scipy.rjs.html#my-estimate",
    "href": "07_scipy.rjs.html#my-estimate",
    "title": "SciPy",
    "section": "My Estimate:",
    "text": "My Estimate:\n\nAfter picking what I thought was things near Tc that should cancel out each other’s distance, I calculate their mean.\n\n\nmy_pred = close[\"Electronegativity\"].mean()\nmy_pred\n\nnp.float64(1.9525000000000001)\n\n\n\nThis is my naive prediction.\nNow I interpolate."
  },
  {
    "objectID": "07_scipy.rjs.html#interpolate",
    "href": "07_scipy.rjs.html#interpolate",
    "title": "SciPy",
    "section": "Interpolate",
    "text": "Interpolate\n\nLinearNDInterpolator takes an array of known inputs and an array of known outputs and returns a function that it thinks describes the relationship.\n“Thinks” being a vague term here to convey a sense of learning or prediction or estimation.\n\n\nf = LinearNDInterpolator(arr2d, Z)\nscipy_pred = f(7,5)\n[scipy_pred, my_pred, Tc[\"Electronegativity\"]]\n\n[array(1.725), np.float64(1.9525000000000001), np.float64(1.9)]"
  },
  {
    "objectID": "07_scipy.rjs.html#exercise-1",
    "href": "07_scipy.rjs.html#exercise-1",
    "title": "SciPy",
    "section": "Exercise",
    "text": "Exercise\n\nPredict using your own methods the density of Tc.\nInterpolate using SciPy the density of Tc."
  },
  {
    "objectID": "07_scipy.rjs.html#solution",
    "href": "07_scipy.rjs.html#solution",
    "title": "SciPy",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf.drop(42)\ndf = df[[\"Group\", \"Period\", \"Density\"]]\ndf = df.dropna()\nf = LinearNDInterpolator(np.column_stack((df[\"Group\"],df[\"Period\"])), df[\"Density\"])\nme = df[(abs(df[\"Group\"] - 7) + abs(df[\"Period\"] - 5)) &lt; 2][\"Density\"].mean()\n[f(7,5), me, Tc[\"Density\"]]"
  },
  {
    "objectID": "05_matplotlib.html",
    "href": "05_matplotlib.html",
    "title": "Matplotlib",
    "section": "",
    "text": "Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations.\n\n\nMATLAB Plot Library\nBased on the “industry standard” library that predates Python\nBasis of many more modern tools (namely Seaborn)\n\n\n\n\nVersus its closest competitors (Altair, Seaborn, ggplot2, Plotly):\n\nAllows dramatically more control over created plots.\nExtremely good NumPy and pandas (our next library) integration.\nWealth of resources\nEntirely free and open-source\n\n\n\n\n\n\nAltair and Plotly have far better web integration and interaction.\nSeaborn has beautiful defaults.\nStatisticians like ggplot2, which is from another language (R)\nMany modern data visualizations go on websites, which is not to Matplotlib’s strengths.\n\n\n\n\n\nWe have been working with a piecewise function for sometime!\nCan we finally v: hideisualize it?",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#why-matplotlib",
    "href": "05_matplotlib.html#why-matplotlib",
    "title": "Matplotlib",
    "section": "",
    "text": "Versus its closest competitors (Altair, Seaborn, ggplot2, Plotly):\n\nAllows dramatically more control over created plots.\nExtremely good NumPy and pandas (our next library) integration.\nWealth of resources\nEntirely free and open-source",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#why-not-matplotlib",
    "href": "05_matplotlib.html#why-not-matplotlib",
    "title": "Matplotlib",
    "section": "",
    "text": "Altair and Plotly have far better web integration and interaction.\nSeaborn has beautiful defaults.\nStatisticians like ggplot2, which is from another language (R)\nMany modern data visualizations go on websites, which is not to Matplotlib’s strengths.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#relevance",
    "href": "05_matplotlib.html#relevance",
    "title": "Matplotlib",
    "section": "",
    "text": "We have been working with a piecewise function for sometime!\nCan we finally v: hideisualize it?",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#pip-like-numpy",
    "href": "05_matplotlib.html#pip-like-numpy",
    "title": "Matplotlib",
    "section": "pip like NumPy",
    "text": "pip like NumPy\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install matplotlib \n\nThat might take a moment, when it does we can check it worked!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#verify",
    "href": "05_matplotlib.html#verify",
    "title": "Matplotlib",
    "section": "Verify",
    "text": "Verify\n\nWe can quickly verify installation and introduce some conventions.\nOpen up Python and import the libraries:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#plotting",
    "href": "05_matplotlib.html#plotting",
    "title": "Matplotlib",
    "section": "Plotting",
    "text": "Plotting\n\nLet’s plot something\n\n\nA period is a horizontal row of the periodic table. There are seven periods in the periodic table, with each one beginning at the far left. A new period begins when a new principal energylevel begins filling with electrons.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#the-table",
    "href": "05_matplotlib.html#the-table",
    "title": "Matplotlib",
    "section": "The Table",
    "text": "The Table",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#rows",
    "href": "05_matplotlib.html#rows",
    "title": "Matplotlib",
    "section": "Rows",
    "text": "Rows\n\nPeriod 1 has only two elements (hydrogen and helium), while periods 2 and 3 have 8 elements. Periods 4 and 5 have 18 elements. Periods 6 and 7 have 32 elements, because the two bottom rows that are separate from the rest of the table belong to those periods.\n\nThis also happens to be the maximum number of electrons in the outermost “shell” of an atom.\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#plots",
    "href": "05_matplotlib.html#plots",
    "title": "Matplotlib",
    "section": "Plots",
    "text": "Plots\n\nCreating a naive (that is, specifying no options) plot is very easy.\n\n\nplt.plot(es)\n\n\n\n\n\n\n\n\n\nWait a minute - we’re at the command line… where does the image go?",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#command-line",
    "href": "05_matplotlib.html#command-line",
    "title": "Matplotlib",
    "section": "Command Line",
    "text": "Command Line\n\nWhen I do this at the command line, I usually see the following:\n\n&gt;&gt;&gt; plt.plot(a)\n[&lt;matplotlib.lines.Line2D object at 0x7f34f7094cd0&gt;]\n\nThat is… not a chart.\nNo worries!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#making-charts",
    "href": "05_matplotlib.html#making-charts",
    "title": "Matplotlib",
    "section": "Making Charts",
    "text": "Making Charts\n\nMy preferred way to work with charts is by saving them as an image file.\n\nCan include them as attachments in emails.\nCan incorporate them into scientific writing.\nCan post interesting findings on social media.\n\nWe simply save the file.\n\nI always save a “.svg” file - “scalable vector graphic”\nThese don’t get fuzzy when you zoom in.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#saving-charts",
    "href": "05_matplotlib.html#saving-charts",
    "title": "Matplotlib",
    "section": "Saving Charts",
    "text": "Saving Charts\n\nI use the following to save my chart as a “.svg” image file.\n\nplt.savefig(\"my_chart.svg\")",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#viewing-charts",
    "href": "05_matplotlib.html#viewing-charts",
    "title": "Matplotlib",
    "section": "Viewing Charts",
    "text": "Viewing Charts\n\nI usually exit Python to view charts, or wrote scripts that generate charts and run them at the command line.\n\n\n\nchart_maker.py\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])\nplt.plot(es)\nplt.savefig(\"my_chart.svg\")",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#open-image",
    "href": "05_matplotlib.html#open-image",
    "title": "Matplotlib",
    "section": "Open Image",
    "text": "Open Image\n\nOn Windows, view image from terminal:\n\nnvim chart_maker.py # code from last slide\npython chart_maker.py\nstart my_chart.svg\n\nOn MacOS, view image from terminal:\n\nnvim chart_maker.py # code from last slide\npython3 chart_maker.py \nopen my_chart.svg\n\nShould open in your default image viewer.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#reference",
    "href": "05_matplotlib.html#reference",
    "title": "Matplotlib",
    "section": "Reference",
    "text": "Reference\n\nRecall: We should see this:\n\n\nplt.plot(es) # how this was made",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#the-os-package",
    "href": "05_matplotlib.html#the-os-package",
    "title": "Matplotlib",
    "section": "The OS package",
    "text": "The OS package\n\nI often use one other import when working with images.\nOften times, I end up with a NumPy array where I’m trying various ways of plotting, and don’t want to close Python.\nI could open another terminal tab, but there’s another option:\n\n\nimport os # stands for \"operating system\"",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#using-os",
    "href": "05_matplotlib.html#using-os",
    "title": "Matplotlib",
    "section": "Using OS",
    "text": "Using OS\n\nOS let’s us do a lot of the things we do in the shell without leaving Python.\nThe most useful technique is os.system() which allows us to run a shell command from within Python.\nFor example, the following would open “my_chart.svg” on MacOS\n\n\nos.system(\"open my_chart.svg\")\n\n1",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#on-os",
    "href": "05_matplotlib.html#on-os",
    "title": "Matplotlib",
    "section": "On OS",
    "text": "On OS\n\nHistorically, an operating system was considered synonmous with its command line.\nThis is reflected within how we use the os module with the requirement to use start on Windows and open on MacOS.\nIn both cases, the same file is opened in a photo viewer, but\nThe command differs due to the different operating system (OS)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#use-of-os",
    "href": "05_matplotlib.html#use-of-os",
    "title": "Matplotlib",
    "section": "Use of OS",
    "text": "Use of OS\n\nThe os module has largely fallen out of favor versus subprocess, which more robust but harder to use.\nAs with Matplotlib vs. e.g. Altair or Seaborn, I teach the older, easier, less-snazzy version.\nIn general, os is no longer recommended for use outside of scientific computing.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#another-example",
    "href": "05_matplotlib.html#another-example",
    "title": "Matplotlib",
    "section": "Another example",
    "text": "Another example\n\nBy the way, you now know how to:\n\nOpen nvim, write a file, and save it\nimport that file\nRun the contents of that file to create an image and\nView the image\n\nAll without leaving Python!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#piecewise",
    "href": "05_matplotlib.html#piecewise",
    "title": "Matplotlib",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe return now to the income tax example to show some ways of plotting.\nLet’s recall the taxes array quickly.\n\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#naive-plotting",
    "href": "05_matplotlib.html#naive-plotting",
    "title": "Matplotlib",
    "section": "Naive Plotting",
    "text": "Naive Plotting\n\nThis is probably not what we intended!\n\n\nplt.plot(taxes)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#x-and-y",
    "href": "05_matplotlib.html#x-and-y",
    "title": "Matplotlib",
    "section": "x and y",
    "text": "x and y\n\nPlot “cutoff vs rate” by providing both.\n\n\nx = taxes[:,0]\ny = taxes[:,1]\nplt.plot(x,y)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#plotting-functions",
    "href": "05_matplotlib.html#plotting-functions",
    "title": "Matplotlib",
    "section": "Plotting Functions",
    "text": "Plotting Functions\n\nReally though, we want to:\n\nCreate an array of possible incomes.\nCalculate tax at that income.\nPlot that tax.\n\nThis is plotting a function!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#the-function",
    "href": "05_matplotlib.html#the-function",
    "title": "Matplotlib",
    "section": "The function",
    "text": "The function\n\nSpoilers for earlier exercises.\n\n\n\nCode\ntaxes = [\n    [9275, 0.1, 0.0],\n    [37650, 0.15, -463.75],\n    [91150, 0.25, -4228.75],\n    [190150, 0.28, -6963.25],\n    [413350, 0.33, -16470.75],\n    [415051, 0.35, -24737.75],\n]\n\ndef single_tax(income):\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    return income * .396 + -43830.05",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#creating-arrays",
    "href": "05_matplotlib.html#creating-arrays",
    "title": "Matplotlib",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nLet’s consider some possible incomes.\nWe can use np.arange() to create a range of values using the same idea as slices\n\nStart\nStop\nStep\n\n\n\nincomes = np.arange(10000,400000,100000)\nincomes\n\narray([ 10000, 110000, 210000, 310000])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#linspace",
    "href": "05_matplotlib.html#linspace",
    "title": "Matplotlib",
    "section": "linspace",
    "text": "linspace\n\nnp.linspace() is a bit more common and may be easier.\nGive a start, stop, and a number of values…\n\n\nincomes = np.linspace(10000,400000,5)\nincomes\n\narray([ 10000., 107500., 205000., 302500., 400000.])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#aside-0s-and-1s",
    "href": "05_matplotlib.html#aside-0s-and-1s",
    "title": "Matplotlib",
    "section": "Aside: 0s and 1s",
    "text": "Aside: 0s and 1s\n\nMore generally, we can create arrays with np.ones() or np.zeros()\nJust provide a length.\n\n\n\n\nnp.ones(3)\n\narray([1., 1., 1.])\n\n\n\n\nnp.zeros(2)\n\narray([0., 0.])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#aside-dtype",
    "href": "05_matplotlib.html#aside-dtype",
    "title": "Matplotlib",
    "section": "Aside: dtype",
    "text": "Aside: dtype\n\nBy default, these are floating point values.\n\n\nnp.ones(3) / np.arange(2,5,1)\n\narray([0.5       , 0.33333333, 0.25      ])\n\n\n\nYou can get integers by specifying a NumPy dtype (for data type)\n\n\nnp.ones(3, dtype=int) // np.arange(2,5,1)\n\narray([0, 0, 0])\n\n\n\nAlways think about whether you want round numbers or not.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#plotting-taxation",
    "href": "05_matplotlib.html#plotting-taxation",
    "title": "Matplotlib",
    "section": "Plotting Taxation",
    "text": "Plotting Taxation\n\nLet’s make a linspace from, say, 0 to 500000.\n\n\nincomes = np.linspace(0,500000,100)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#vectorizing",
    "href": "05_matplotlib.html#vectorizing",
    "title": "Matplotlib",
    "section": "Vectorizing",
    "text": "Vectorizing\n\nUnlike, say + and -, single_tax is not a built-in, vectorized operation in NumPy.\nNot to worry, we just ask NumPy to np.vectorize it!\n\n\nvector_tax = np.vectorize(single_tax)\ncosts = vector_tax(incomes)\ncosts[::20] # Just look at 5 examples\n\narray([     0.        ,  21319.57828283,  50195.91666667,  83529.25      ,\n       116862.58333333])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#plot-vector-functions",
    "href": "05_matplotlib.html#plot-vector-functions",
    "title": "Matplotlib",
    "section": "Plot Vector Functions",
    "text": "Plot Vector Functions\n\nLet’s take a look!\n\n\nplt.plot(incomes,costs)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#more-fun",
    "href": "05_matplotlib.html#more-fun",
    "title": "Matplotlib",
    "section": "More fun",
    "text": "More fun\n\nWe can also plot tax rate\n\n\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1186195173.py:1: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#or-both",
    "href": "05_matplotlib.html#or-both",
    "title": "Matplotlib",
    "section": "Or Both",
    "text": "Or Both\n\nplt.plot(incomes, costs)\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1999314129.py:2: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\n\n\n\n\n\n\n\n\nProbably should put them on different scales!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#well-formed-charts",
    "href": "05_matplotlib.html#well-formed-charts",
    "title": "Matplotlib",
    "section": "Well-formed Charts",
    "text": "Well-formed Charts\n\nI learned charts should have:\n\nLabels on the vertical and horizontal axes\nA title\nA legend\n\nLet’s add these.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section",
    "href": "05_matplotlib.html#section",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.title\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2974586296.py:2: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-1",
    "href": "05_matplotlib.html#section-1",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.xlabel and plt.ylabel\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1619337187.py:4: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-2",
    "href": "05_matplotlib.html#section-2",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.legend\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes)\nplt.legend() # We didn't label any of our plots!\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1652991527.py:4: RuntimeWarning:\n\ninvalid value encountered in divide\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1652991527.py:5: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-3",
    "href": "05_matplotlib.html#section-3",
    "title": "Matplotlib",
    "section": "",
    "text": "label=\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nplt.legend() # This shows the labels \n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\3285922608.py:4: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#annotation",
    "href": "05_matplotlib.html#annotation",
    "title": "Matplotlib",
    "section": "Annotation",
    "text": "Annotation\n\nWe’ll add a note where median income (about 40k) is.\n\n\nmed_inc = 40000\nmed_tax = single_tax(40000)\nmed_pct = med_tax / med_inc * 100\nxy = [med_inc, med_pct]\nxy\n\n[40000, 14.428125]\n\n\n\nWe’ll use plt.annotate",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-4",
    "href": "05_matplotlib.html#section-4",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.annotate()\n\n\nplt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nplt.annotate(\"Median Income\", xy)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2069779692.py:1: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\nText(40000, 14.428125, 'Median Income')",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#using-functions",
    "href": "05_matplotlib.html#using-functions",
    "title": "Matplotlib",
    "section": "Using functions",
    "text": "Using functions\n\nWe can use functions to add anotations.\n\n\ndef add_note(inc, note):\n    tax = single_tax(inc)\n    pct = tax / inc * 100\n    xy = [inc, pct]\n    plt.annotate(note, xy)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-5",
    "href": "05_matplotlib.html#section-5",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nadd_note(115000, \"CS Mid Career\")\nadd_note(80000, \"CS New Grads\")\nadd_note(70000, \"Physics New Grads\")\nadd_note(55000, \"All New Grads\")\nadd_note(40000, \"Median Income\")\nplt.title(\"Labor Market Outcomes of College Graduates by Major\")\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2832080454.py:1: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\nText(0.5, 1.0, 'Labor Market Outcomes of College Graduates by Major')",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#multiple-functions",
    "href": "05_matplotlib.html#multiple-functions",
    "title": "Matplotlib",
    "section": "Multiple Functions",
    "text": "Multiple Functions\n\nI think it would be helpful to see actual tax percentage versus marginal tax percentage.\nNo one actually pays the highest 39.6%!\nWe recall our array:\n\n\ntaxes\n\n[[9275, 0.1, 0.0],\n [37650, 0.15, -463.75],\n [91150, 0.25, -4228.75],\n [190150, 0.28, -6963.25],\n [413350, 0.33, -16470.75],\n [415051, 0.35, -24737.75]]",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#bracket",
    "href": "05_matplotlib.html#bracket",
    "title": "Matplotlib",
    "section": "Bracket %",
    "text": "Bracket %\n\n\n\ntaxes\n\n[[9275, 0.1, 0.0],\n [37650, 0.15, -463.75],\n [91150, 0.25, -4228.75],\n [190150, 0.28, -6963.25],\n [413350, 0.33, -16470.75],\n [415051, 0.35, -24737.75]]\n\n\n\n\ndef bracket_pct(income):\n    for bracket in taxes:\n        if income &lt; bracket[0]:\n            return bracket[1]\n    return .396\n\nbracket_vector = np.vectorize(bracket_pct)\nbrackets = bracket_vector(incomes) * 100\nbrackets[::20]\n\narray([10., 28., 33., 33., 33.])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-6",
    "href": "05_matplotlib.html#section-6",
    "title": "Matplotlib",
    "section": "",
    "text": "color=\n\n\nplt.plot(incomes, costs / incomes * 100, label = \"Tax Rate\", color=\"blue\")\nplt.plot(incomes, brackets, label=\"Marginal Rate\", color=\"red\")\nplt.legend()\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\3364552391.py:1: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-7",
    "href": "05_matplotlib.html#section-7",
    "title": "Matplotlib",
    "section": "",
    "text": "color=\n\n\nrates = costs / incomes * 100\nplt.plot(incomes, rates, label = \"Tax Rate\", color=\"blue\")\nplt.plot(incomes, brackets, label=\"Marginal Rate\", color=\"red\")\nplt.plot(incomes, brackets - rates, label=\"Discount Rate\", color=\"green\")\nplt.legend()\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2916591473.py:1: RuntimeWarning:\n\ninvalid value encountered in divide",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#more-than-lines",
    "href": "05_matplotlib.html#more-than-lines",
    "title": "Matplotlib",
    "section": "More than lines",
    "text": "More than lines\n\nWe are not restricted to line plots (of course)\nHistograms, boxplots, and scatterplots are all popular as well.\nWe’ll show a histogram quickly.\n\n\nes # number of electrons to fill outermost shell\n\narray([ 2,  8,  8, 18, 18, 32, 32])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#electron-shells",
    "href": "05_matplotlib.html#electron-shells",
    "title": "Matplotlib",
    "section": "Electron Shells",
    "text": "Electron Shells\n\nThat first 2 means:\n\nThere are two elements with a single electron shell\nOne has 1 of 2 electrons (Hydrogen)\nOne has 2 of 2 electrons (Helium)\n\nSo those elements have this many outermost electrons each:\n\n\nnp.arange(2) + 1\n\narray([1, 2])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#ordering-shells",
    "href": "05_matplotlib.html#ordering-shells",
    "title": "Matplotlib",
    "section": "Ordering Shells",
    "text": "Ordering Shells\n\nLet’s take a look at the distribution of how many electrons are present in the outermost shell.\nBasically, we need to take an np.arange() or each element of the es\n\n\nfor e in es:\n    np.arange(e) + 1",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#accumulate",
    "href": "05_matplotlib.html#accumulate",
    "title": "Matplotlib",
    "section": "Accumulate",
    "text": "Accumulate\n\nWe can just create some NumPy array and add to it over time.\n\nSince we are combining arrays we use\n\n\n\nnum_es = np.array([]) # The first zero elements\nfor e in es:\n    num_es = np.append(num_es, np.arange(e))\nnum_es += 1",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#what",
    "href": "05_matplotlib.html#what",
    "title": "Matplotlib",
    "section": "What?",
    "text": "What?\n\nHard to tell what is going on here.\n\n\nnum_es\n\narray([ 1.,  2.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,\n        9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,\n       17., 18.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.,\n       12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24.,\n       25., 26., 27., 28., 29., 30., 31., 32.,  1.,  2.,  3.,  4.,  5.,\n        6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,\n       19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n       32.])",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#histogram-1",
    "href": "05_matplotlib.html#histogram-1",
    "title": "Matplotlib",
    "section": "Histogram",
    "text": "Histogram\n\nplt.hist(num_es)\n\n(array([26., 18., 14., 12., 12., 10.,  6.,  6.,  6.,  8.]),\n array([ 1. ,  4.1,  7.2, 10.3, 13.4, 16.5, 19.6, 22.7, 25.8, 28.9, 32. ]),\n &lt;BarContainer object of 10 artists&gt;)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#nicety",
    "href": "05_matplotlib.html#nicety",
    "title": "Matplotlib",
    "section": "Nicety",
    "text": "Nicety\n\nI don’t really like seeing all that text about arrays and boxes and so on.\nI start plotting lines-of-code with _ =\n\n_ is a variable which, convention (just a social construction) means “ignore this”\nThis is a good way to say “I don’t care what this code returns but I do care what it prints, makes, saves, etc.”",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#histogram-2",
    "href": "05_matplotlib.html#histogram-2",
    "title": "Matplotlib",
    "section": "Histogram",
    "text": "Histogram\n\n_ = plt.hist(num_es)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#box",
    "href": "05_matplotlib.html#box",
    "title": "Matplotlib",
    "section": "Box",
    "text": "Box\n\n_ = plt.boxplot(num_es)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#pie",
    "href": "05_matplotlib.html#pie",
    "title": "Matplotlib",
    "section": "Pie",
    "text": "Pie\n\n_ = plt.pie(es) # NOT num_es\n\n\n\n\n\n\n\n\n\nThis appears to be one color per “row” but we didn’t label the rows so it’s hard to say.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#ecdf",
    "href": "05_matplotlib.html#ecdf",
    "title": "Matplotlib",
    "section": "ECDF",
    "text": "ECDF\n\n_ = plt.ecdf(num_es) # empirical cumulative distribution function\n\n\n\n\n\n\n\n\n\nGiven \\(n\\) electrons, what % have that many or fewer outermost electrons.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#many-more",
    "href": "05_matplotlib.html#many-more",
    "title": "Matplotlib",
    "section": "Many more!",
    "text": "Many more!\n\nThere are many more plot types that require having both two-dimensional data, the most famous being the scatter plot.\nRead more\nFor now, it is tough to use other charts well, but soon we will learn to read data files and plot them, with pandas.",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#credit",
    "href": "05_matplotlib.html#credit",
    "title": "Matplotlib",
    "section": "Credit",
    "text": "Credit\n\nThis exercise, with great appreciation, is adapted from\n\nAn Introduction to Python for Chemistry\n\nI reviewed the chemistry at play in:\n\n3.3 Atmoic Orbitals",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#orbitals",
    "href": "05_matplotlib.html#orbitals",
    "title": "Matplotlib",
    "section": "Orbitals",
    "text": "Orbitals\n\nThose outermost electrons in an atom have to be somewhere.\nUsing the aforementioned plotly, it is possible to plot these orbitals interactively in 3D",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-8",
    "href": "05_matplotlib.html#section-8",
    "title": "Matplotlib",
    "section": "",
    "text": "Code\nimport plotly.graph_objects as go\n\n# --- Constants and Orbital Parameters ---\n# Atomic number (Z) for the hydrogenic atom.\n# Z=1 for Hydrogen. You can change this to visualize for other single-electron ions.\nZ = 1\n\n# Principal quantum number (n) for the 3d orbital.\nn = 3\n\n# --- Radial Wavefunction R_3d(r, Z) ---\n# This function calculates the radial part of the 3d orbital wavefunction.\n# It is based on the formula provided by the user:\n# R3d = (1/9√30) × ρ^2 × Z^(3/2) × e^(-ρ/2)\n# where ρ (rho) is defined as 2 * Z * r / n for hydrogenic atoms.\ndef R_3d(r, Z_val):\n    \"\"\"\n    Calculates the radial part of the 3d orbital wavefunction.\n\n    Args:\n        r (numpy.ndarray): Radial distance from the nucleus.\n        Z_val (int): Atomic number.\n\n    Returns:\n        numpy.ndarray: The value of the radial wavefunction at distance r.\n    \"\"\"\n    # Calculate rho based on the principal quantum number (n=3 for 3d)\n    rho = 2 * Z_val * r / n\n    \n    # The constant factor from the user's formula\n    constant_factor = 1 / (9 * np.sqrt(30))\n    \n    # Calculate the radial part according to the user's formula\n    # Handles potential division by zero or NaN values if r is zero,\n    # as rho will be zero, leading to rho**2 = 0 and exp(-0) = 1.\n    radial_part = constant_factor * (rho**2) * (Z_val**(3/2)) * np.exp(-rho / 2)\n    \n    return radial_part\n\n# --- Angular Wavefunction Y_3dz2(theta) ---\n# This function calculates the angular part of the 3d_z^2 orbital wavefunction.\n# It is based on the formula provided by the user:\n# Y3dz2 = √(5/4) × (3z^2 – r^2)/r^2 × (1/4π)^1/2\n# This simplifies to √(5/16π) * (3cos^2(theta) - 1), where theta is the polar angle.\ndef Y_3dz2(theta):\n    \"\"\"\n    Calculates the angular part of the 3d_z^2 orbital wavefunction.\n\n    Args:\n        theta (numpy.ndarray): Polar angle (angle from the positive z-axis).\n\n    Returns:\n        numpy.ndarray: The value of the angular wavefunction at angle theta.\n    \"\"\"\n    # The constant factor from the user's formula, simplified\n    constant_factor = np.sqrt(5 / (16 * np.pi))\n    \n    # Calculate the angular part\n    angular_part = constant_factor * (3 * np.cos(theta)**2 - 1)\n    \n    return angular_part\n\n# --- Create 3D Grid for Visualization ---\n# Define the resolution of the 3D grid. Higher values mean better detail but slower computation.\ngrid_points = 60 # Number of points along each axis (x, y, z)\nmax_range = 25   # Maximum extent of the plot in each direction (arbitrary units, e.g., Bohr radii)\n\n# Create 1D arrays for x, y, and z coordinates\nx_coords = np.linspace(-max_range, max_range, grid_points)\ny_coords = np.linspace(-max_range, max_range, grid_points)\nz_coords = np.linspace(-max_range, max_range, grid_points)\n\n# Create a 3D meshgrid from the 1D coordinate arrays\n# 'indexing='ij'' ensures that X, Y, Z_grid have shapes (grid_points, grid_points, grid_points)\n# Z_grid is renamed to avoid conflict with the atomic number Z.\nX, Y, Z_grid = np.meshgrid(x_coords, y_coords, z_coords, indexing='ij')\n\n# --- Convert Cartesian to Spherical Coordinates ---\n# Calculate radial distance (r)\nr = np.sqrt(X**2 + Y**2 + Z_grid**2)\n\n# Calculate polar angle (theta)\n# Using arctan2(sqrt(x^2+y^2), z) is more numerically stable than arccos(z/r)\n# as it handles cases where r is zero or very small more gracefully.\nr_xy_plane = np.sqrt(X**2 + Y**2)\ntheta = np.arctan2(r_xy_plane, Z_grid)\n\n# --- Calculate the Full Wavefunction (psi) ---\n# The full wavefunction is the product of the radial and angular parts.\n# Handle potential runtime warnings for very small r values if they lead to issues.\n# np.where is used to prevent division by zero for r=0 in R_3d, although the current R_3d\n# implementation handles it gracefully. It's a good practice for general cases.\npsi = np.where(r == 0, 0, R_3d(r, Z) * Y_3dz2(theta))\n\n# --- Determine Isosurface Thresholds ---\n# To visualize the shape of the orbital, we plot isosurfaces of the wavefunction (psi).\n# The 3d_z^2 orbital has positive lobes along the z-axis and a negative toroidal (donut) lobe\n# in the xy-plane. We will plot two isosurfaces: one for a positive psi value and one for a\n# negative psi value to represent these lobes.\n#\n# We find the maximum absolute value of psi to set a reasonable threshold.\n# The threshold determines the 'size' or 'extent' of the visualized orbital lobes.\nmax_abs_psi = np.max(np.abs(psi))\n# Adjust this factor (e.g., 0.05 to 0.2) to change the size of the rendered orbital.\n# A smaller factor will show a larger, more diffuse orbital.\nthreshold = max_abs_psi * 0.08 \n\n# --- Create Plotly Figure ---\nfig = go.Figure(data=[\n    # Isosurface for the positive lobe (e.g., blue color)\n    go.Isosurface(\n        x=X.flatten(),\n        y=Y.flatten(),\n        z=Z_grid.flatten(),\n        value=psi.flatten(),\n        isomin=threshold,  # Only show values at or above this positive threshold\n        isomax=threshold,  # Create a single surface at this threshold\n        surface_count=1,   # Draw only one surface for this data trace\n        caps=dict(x_show=False, y_show=False, z_show=False), # Hide caps for a cleaner look\n        colorscale=[[0, 'blue'], [1, 'blue']], # Solid blue color for positive lobe\n        showscale=False,   # Hide the color scale bar\n        opacity=0.6,       # Transparency of the surface\n        name='Positive Lobe (ψ &gt; 0)', # Name for legend\n        showlegend=True    # Show this trace in the legend\n    ),\n    # Isosurface for the negative lobe (e.g., red color)\n    go.Isosurface(\n        x=X.flatten(),\n        y=Y.flatten(),\n        z=Z_grid.flatten(),\n        value=psi.flatten(),\n        isomin=-threshold, # Only show values at or below this negative threshold\n        isomax=-threshold, # Create a single surface at this threshold\n        surface_count=1,\n        caps=dict(x_show=False, y_show=False, z_show=False),\n        colorscale=[[0, 'red'], [1, 'red']], # Solid red color for negative lobe\n        showscale=False,\n        opacity=0.6,\n        name='Negative Lobe (ψ &lt; 0)', # Name for legend\n        showlegend=True\n    )\n])\n\n# --- Update Layout and Scene Settings ---\nfig.update_layout(\n    title=f'Interactive 3d_z² Orbital Visualization (Z={Z})', # Title of the plot\n    # --- Add or modify these lines for a dark theme ---\n    paper_bgcolor='rgba(0,0,0,0)',  # Dark background for the entire figure\n    plot_bgcolor='rgba(0,0,0,0)',   # Dark background for the plotting area\n    font=dict(color='white'),         # White font color for better contrast\n    scene=dict(\n        xaxis_title='X', # X-axis label\n        yaxis_title='Y', # Y-axis label\n        zaxis_title='Z', # Z-axis label\n        aspectmode='cube', # Ensures equal scaling for all axes for correct shape representation\n        # Optionally set camera position for initial view\n        xaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\", # Transparent background for axis planes\n            gridcolor=\"gray\",                # Gray grid lines\n            zerolinecolor=\"white\"            # White zero line\n        ),\n        yaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\",\n            gridcolor=\"gray\",\n            zerolinecolor=\"white\"\n        ),\n        zaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\",\n            gridcolor=\"gray\",\n            zerolinecolor=\"white\"\n        ),\n        camera=dict(\n            eye=dict(x=1.5, y=1.5, z=1.5) # Adjust camera angle for better initial view\n        )\n    ),\n    margin=dict(l=0, r=0, b=0, t=40), # Adjust margins\n    height=700, # Height of the plot\n    width=700,  # Width of the plot\n    hovermode=False, # Disable hover to improve performance on large datasets\n    legend=dict(\n        x=0.01,\n        y=0.99,\n        bgcolor='rgba(255,255,255,0.7)',\n        bordercolor='Black',\n        borderwidth=1\n    )\n)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#orbitals-1",
    "href": "05_matplotlib.html#orbitals-1",
    "title": "Matplotlib",
    "section": "Orbitals",
    "text": "Orbitals\n\nI believe these are called orbitals, specifically in this case the \\(3d_z^2\\) orbital (which I selected because I thought it looked cool).\nIt is defined by the following equations: \\[R_{3d} = \\frac{1}{9\\sqrt{30}} \\times \\rho^2 \\times Z^{3/2} \\times e^{-\\rho/2}\\] \\[Y_{3d_{z^2}} = \\sqrt{\\frac{5}{4}} \\times \\frac{3z^2 - r^2}{r^2} \\times \\left(\\frac{1}{4\\pi}\\right)^{1/2}\\]",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#constants",
    "href": "05_matplotlib.html#constants",
    "title": "Matplotlib",
    "section": "Constants",
    "text": "Constants\n\nI also need to know what \\(\\rho\\) (rho) is, which is apparently:\n\n\n\\(\\frac{2Zr}{n}\\) where \\(n\\) is the principal quantum number (3 for the \\(3d\\) orbitals)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#onward",
    "href": "05_matplotlib.html#onward",
    "title": "Matplotlib",
    "section": "Onward",
    "text": "Onward\n\nNow let’s go to our exercise.\n\n\nSay we want to compare the probability distribution of three atomic orbitals on the same graph… The radial wavefunctions, \\(R\\), for the hydrogenic \\(3s\\), \\(3p\\) and \\(3d\\) orbitals respectively are…",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#equations",
    "href": "05_matplotlib.html#equations",
    "title": "Matplotlib",
    "section": "Equations",
    "text": "Equations\n\\[\nR_{3s} = \\frac{2}{3\\sqrt{3}} \\left(1 - \\frac{2r}{3} + \\frac{2}{27}r^2\\right) e^{-r/3}\n\\]\n\\[\nR_{3p} = \\frac{2\\sqrt{2}}{9\\sqrt{3}} \\left(\\frac{2r}{3}\\right) \\left(1 - \\frac{1}{6}r\\right) e^{-r/3}\n\\]\n\\[\nR_{3d} = \\frac{1}{9\\sqrt{30}} \\left(\\frac{2r}{3}\\right)^2 e^{-r/3}\n\\]",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#numpy",
    "href": "05_matplotlib.html#numpy",
    "title": "Matplotlib",
    "section": "NumPy",
    "text": "NumPy\n\nNumPy provides \\(e^x\\) as np.exp(x) and \\(\\sqrt(x)\\) as np.sqrt(x)\n\n\\[\nR_{3s} = \\frac{2}{3\\sqrt{3}} \\left(1 - \\frac{2r}{3} + \\frac{2}{27}r^2\\right) e^{-r/3}\n\\]\n\ndef r3s(r):\n    return 2/(3*np.sqrt(3)) * (1 - 2*r/3 + 2/27*r**2) * np.exp(-r/3)\n\n# and the others:\ndef r3p(r):\n    return (2*np.sqrt(2))/(9*np.sqrt(3)) * ((2*r)/3) * (1 - 1/6*r) * np.exp(-r/3)\n\ndef r3d(r):\n    return 1 /(9*np.sqrt(30)) * ( (2*r/3)**2 ) * np.exp(-r/3)",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#vectors",
    "href": "05_matplotlib.html#vectors",
    "title": "Matplotlib",
    "section": "Vectors",
    "text": "Vectors\n\nVs. single_tax, which contained if and else, everything in r3s is vectorizable already\n\nPython arithmetic, like *, -, + - We also introduced ** for “power”\n\n\n\n2 ** np.arange(4)\n\narray([1, 2, 4, 8])\n\n\n\nNumPy operations, which are designed to work on arrays!",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#matplotlib",
    "href": "05_matplotlib.html#matplotlib",
    "title": "Matplotlib",
    "section": "Matplotlib",
    "text": "Matplotlib\n\nvals = np.arange(30) # 30 is the highest number I saw, so try it\nplt.plot(r3s(vals), label=\"r3s\")\nplt.plot(r3p(vals), label=\"r3p\")\nplt.plot(r3d(vals), label=\"r3d\")\nplt.legend()",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#section-9",
    "href": "05_matplotlib.html#section-9",
    "title": "Matplotlib",
    "section": "",
    "text": "vals = np.arange(30) # 30 is the highest number I saw, so try it\nplt.plot(r3s(vals), label=\"r3s\")\nplt.plot(r3p(vals), label=\"r3p\")\nplt.plot(r3d(vals), label=\"r3d\")\nplt.legend()\n# These were just provided by the textbook\nplt.xlabel('r / Bohr radii' )       # label x-axis\nplt.ylabel('R')                     # label y-axis\nplt.title('Radial wavefunctions of $3s$, $3p$ and $3d$ orbitals') # $ gives \"math font\"\n\nText(0.5, 1.0, 'Radial wavefunctions of $3s$, $3p$ and $3d$ orbitals')",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#exercise-1",
    "href": "05_matplotlib.html#exercise-1",
    "title": "Matplotlib",
    "section": "Exercise",
    "text": "Exercise\n\nPlot \\(R_{1s}, R_{2s},\\) and \\(R_{3s}\\) on the same plot, with labels, and save a “.svg” file.\n\\(R_{3s}\\) is a provided above. \\[\nR_{1s} = 2e^{-r}\n\\]\n\n\\[\nR_{2s} = \\frac{1}{2\\sqrt{2}} (2 - r)e^{-r/2}\n\\]",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.html#solution",
    "href": "05_matplotlib.html#solution",
    "title": "Matplotlib",
    "section": "Solution",
    "text": "Solution\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef r1s(r):\n    return 2 * np.exp(-r)\n\ndef r2s(r):\n    return (1 / (2 * np.sqrt(2))) * (2 - r) * np.exp(-r/2)\n\ndef r3s(r):\n    return 2/(3*np.sqrt(3)) * (1 - 2*r/3 + 2/27*r**2) * np.exp(-r/3)\n\nvals = np.arange(30)\n\nplt.plot(r1s(vals), label=\"r1s\")\nplt.plot(r2s(vals), label=\"r2s\")\nplt.plot(r3s(vals), label=\"r3s\")\nplt.legend()\nplt.xlabel('r / Bohr radii' )       # label x-axis\nplt.ylabel('R')                     # label y-axis\nplt.title('Radial wavefunctions of $1s$, $2s$ and $3s$ orbitals')\nplt.savefig(\"s_orbitals.svg\")",
    "crumbs": [
      "Matplotlib"
    ]
  },
  {
    "objectID": "05_matplotlib.rjs.html#why-matplotlib",
    "href": "05_matplotlib.rjs.html#why-matplotlib",
    "title": "Matplotlib",
    "section": "Why Matplotlib",
    "text": "Why Matplotlib\n\nVersus its closest competitors (Altair, Seaborn, ggplot2, Plotly):\n\nAllows dramatically more control over created plots.\nExtremely good NumPy and pandas (our next library) integration.\nWealth of resources\nEntirely free and open-source"
  },
  {
    "objectID": "05_matplotlib.rjs.html#why-not-matplotlib",
    "href": "05_matplotlib.rjs.html#why-not-matplotlib",
    "title": "Matplotlib",
    "section": "Why not Matplotlib",
    "text": "Why not Matplotlib\n\nAltair and Plotly have far better web integration and interaction.\nSeaborn has beautiful defaults.\nStatisticians like ggplot2, which is from another language (R)\nMany modern data visualizations go on websites, which is not to Matplotlib’s strengths."
  },
  {
    "objectID": "05_matplotlib.rjs.html#relevance",
    "href": "05_matplotlib.rjs.html#relevance",
    "title": "Matplotlib",
    "section": "Relevance",
    "text": "Relevance\n\nWe have been working with a piecewise function for sometime!\nCan we finally v: hideisualize it?"
  },
  {
    "objectID": "05_matplotlib.rjs.html#pip-like-numpy",
    "href": "05_matplotlib.rjs.html#pip-like-numpy",
    "title": "Matplotlib",
    "section": "pip like NumPy",
    "text": "pip like NumPy\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install matplotlib \n\nThat might take a moment, when it does we can check it worked!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#verify",
    "href": "05_matplotlib.rjs.html#verify",
    "title": "Matplotlib",
    "section": "Verify",
    "text": "Verify\n\nWe can quickly verify installation and introduce some conventions.\nOpen up Python and import the libraries:\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "05_matplotlib.rjs.html#plotting",
    "href": "05_matplotlib.rjs.html#plotting",
    "title": "Matplotlib",
    "section": "Plotting",
    "text": "Plotting\n\nLet’s plot something\n\n\nA period is a horizontal row of the periodic table. There are seven periods in the periodic table, with each one beginning at the far left. A new period begins when a new principal energylevel begins filling with electrons."
  },
  {
    "objectID": "05_matplotlib.rjs.html#the-table",
    "href": "05_matplotlib.rjs.html#the-table",
    "title": "Matplotlib",
    "section": "The Table",
    "text": "The Table"
  },
  {
    "objectID": "05_matplotlib.rjs.html#rows",
    "href": "05_matplotlib.rjs.html#rows",
    "title": "Matplotlib",
    "section": "Rows",
    "text": "Rows\n\nPeriod 1 has only two elements (hydrogen and helium), while periods 2 and 3 have 8 elements. Periods 4 and 5 have 18 elements. Periods 6 and 7 have 32 elements, because the two bottom rows that are separate from the rest of the table belong to those periods.\n\nThis also happens to be the maximum number of electrons in the outermost “shell” of an atom.\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#plots",
    "href": "05_matplotlib.rjs.html#plots",
    "title": "Matplotlib",
    "section": "Plots",
    "text": "Plots\n\nCreating a naive (that is, specifying no options) plot is very easy.\n\n\nplt.plot(es)\n\n\n\n\n\n\n\n\n\nWait a minute - we’re at the command line… where does the image go?"
  },
  {
    "objectID": "05_matplotlib.rjs.html#command-line",
    "href": "05_matplotlib.rjs.html#command-line",
    "title": "Matplotlib",
    "section": "Command Line",
    "text": "Command Line\n\nWhen I do this at the command line, I usually see the following:\n\n&gt;&gt;&gt; plt.plot(a)\n[&lt;matplotlib.lines.Line2D object at 0x7f34f7094cd0&gt;]\n\nThat is… not a chart.\nNo worries!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#making-charts",
    "href": "05_matplotlib.rjs.html#making-charts",
    "title": "Matplotlib",
    "section": "Making Charts",
    "text": "Making Charts\n\nMy preferred way to work with charts is by saving them as an image file.\n\nCan include them as attachments in emails.\nCan incorporate them into scientific writing.\nCan post interesting findings on social media.\n\nWe simply save the file.\n\nI always save a “.svg” file - “scalable vector graphic”\nThese don’t get fuzzy when you zoom in."
  },
  {
    "objectID": "05_matplotlib.rjs.html#saving-charts",
    "href": "05_matplotlib.rjs.html#saving-charts",
    "title": "Matplotlib",
    "section": "Saving Charts",
    "text": "Saving Charts\n\nI use the following to save my chart as a “.svg” image file.\n\nplt.savefig(\"my_chart.svg\")"
  },
  {
    "objectID": "05_matplotlib.rjs.html#viewing-charts",
    "href": "05_matplotlib.rjs.html#viewing-charts",
    "title": "Matplotlib",
    "section": "Viewing Charts",
    "text": "Viewing Charts\n\nI usually exit Python to view charts, or wrote scripts that generate charts and run them at the command line.\n\n\n\nchart_maker.py\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])\nplt.plot(es)\nplt.savefig(\"my_chart.svg\")"
  },
  {
    "objectID": "05_matplotlib.rjs.html#open-image",
    "href": "05_matplotlib.rjs.html#open-image",
    "title": "Matplotlib",
    "section": "Open Image",
    "text": "Open Image\n\nOn Windows, view image from terminal:\n\nnvim chart_maker.py # code from last slide\npython chart_maker.py\nstart my_chart.svg\n\nOn MacOS, view image from terminal:\n\nnvim chart_maker.py # code from last slide\npython3 chart_maker.py \nopen my_chart.svg\n\nShould open in your default image viewer."
  },
  {
    "objectID": "05_matplotlib.rjs.html#reference",
    "href": "05_matplotlib.rjs.html#reference",
    "title": "Matplotlib",
    "section": "Reference",
    "text": "Reference\n\nRecall: We should see this:\n\n\nplt.plot(es) # how this was made"
  },
  {
    "objectID": "05_matplotlib.rjs.html#the-os-package",
    "href": "05_matplotlib.rjs.html#the-os-package",
    "title": "Matplotlib",
    "section": "The OS package",
    "text": "The OS package\n\nI often use one other import when working with images.\nOften times, I end up with a NumPy array where I’m trying various ways of plotting, and don’t want to close Python.\nI could open another terminal tab, but there’s another option:\n\n\nimport os # stands for \"operating system\""
  },
  {
    "objectID": "05_matplotlib.rjs.html#using-os",
    "href": "05_matplotlib.rjs.html#using-os",
    "title": "Matplotlib",
    "section": "Using OS",
    "text": "Using OS\n\nOS let’s us do a lot of the things we do in the shell without leaving Python.\nThe most useful technique is os.system() which allows us to run a shell command from within Python.\nFor example, the following would open “my_chart.svg” on MacOS\n\n\nos.system(\"open my_chart.svg\")\n\n1"
  },
  {
    "objectID": "05_matplotlib.rjs.html#on-os",
    "href": "05_matplotlib.rjs.html#on-os",
    "title": "Matplotlib",
    "section": "On OS",
    "text": "On OS\n\nHistorically, an operating system was considered synonmous with its command line.\nThis is reflected within how we use the os module with the requirement to use start on Windows and open on MacOS.\nIn both cases, the same file is opened in a photo viewer, but\nThe command differs due to the different operating system (OS)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#use-of-os",
    "href": "05_matplotlib.rjs.html#use-of-os",
    "title": "Matplotlib",
    "section": "Use of OS",
    "text": "Use of OS\n\nThe os module has largely fallen out of favor versus subprocess, which more robust but harder to use.\nAs with Matplotlib vs. e.g. Altair or Seaborn, I teach the older, easier, less-snazzy version.\nIn general, os is no longer recommended for use outside of scientific computing."
  },
  {
    "objectID": "05_matplotlib.rjs.html#another-example",
    "href": "05_matplotlib.rjs.html#another-example",
    "title": "Matplotlib",
    "section": "Another example",
    "text": "Another example\n\nBy the way, you now know how to:\n\nOpen nvim, write a file, and save it\nimport that file\nRun the contents of that file to create an image and\nView the image\n\nAll without leaving Python!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#piecewise",
    "href": "05_matplotlib.rjs.html#piecewise",
    "title": "Matplotlib",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe return now to the income tax example to show some ways of plotting.\nLet’s recall the taxes array quickly.\n\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#naive-plotting",
    "href": "05_matplotlib.rjs.html#naive-plotting",
    "title": "Matplotlib",
    "section": "Naive Plotting",
    "text": "Naive Plotting\n\nThis is probably not what we intended!\n\n\nplt.plot(taxes)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#x-and-y",
    "href": "05_matplotlib.rjs.html#x-and-y",
    "title": "Matplotlib",
    "section": "x and y",
    "text": "x and y\n\nPlot “cutoff vs rate” by providing both.\n\n\nx = taxes[:,0]\ny = taxes[:,1]\nplt.plot(x,y)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#plotting-functions",
    "href": "05_matplotlib.rjs.html#plotting-functions",
    "title": "Matplotlib",
    "section": "Plotting Functions",
    "text": "Plotting Functions\n\nReally though, we want to:\n\nCreate an array of possible incomes.\nCalculate tax at that income.\nPlot that tax.\n\nThis is plotting a function!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#the-function",
    "href": "05_matplotlib.rjs.html#the-function",
    "title": "Matplotlib",
    "section": "The function",
    "text": "The function\n\nSpoilers for earlier exercises.\n\n\n\nCode\ntaxes = [\n    [9275, 0.1, 0.0],\n    [37650, 0.15, -463.75],\n    [91150, 0.25, -4228.75],\n    [190150, 0.28, -6963.25],\n    [413350, 0.33, -16470.75],\n    [415051, 0.35, -24737.75],\n]\n\ndef single_tax(income):\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    return income * .396 + -43830.05"
  },
  {
    "objectID": "05_matplotlib.rjs.html#creating-arrays",
    "href": "05_matplotlib.rjs.html#creating-arrays",
    "title": "Matplotlib",
    "section": "Creating Arrays",
    "text": "Creating Arrays\n\nLet’s consider some possible incomes.\nWe can use np.arange() to create a range of values using the same idea as slices\n\nStart\nStop\nStep\n\n\n\nincomes = np.arange(10000,400000,100000)\nincomes\n\narray([ 10000, 110000, 210000, 310000])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#linspace",
    "href": "05_matplotlib.rjs.html#linspace",
    "title": "Matplotlib",
    "section": "linspace",
    "text": "linspace\n\nnp.linspace() is a bit more common and may be easier.\nGive a start, stop, and a number of values…\n\n\nincomes = np.linspace(10000,400000,5)\nincomes\n\narray([ 10000., 107500., 205000., 302500., 400000.])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#aside-0s-and-1s",
    "href": "05_matplotlib.rjs.html#aside-0s-and-1s",
    "title": "Matplotlib",
    "section": "Aside: 0s and 1s",
    "text": "Aside: 0s and 1s\n\nMore generally, we can create arrays with np.ones() or np.zeros()\nJust provide a length.\n\n\n\n\nnp.ones(3)\n\narray([1., 1., 1.])\n\n\n\n\nnp.zeros(2)\n\narray([0., 0.])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#aside-dtype",
    "href": "05_matplotlib.rjs.html#aside-dtype",
    "title": "Matplotlib",
    "section": "Aside: dtype",
    "text": "Aside: dtype\n\nBy default, these are floating point values.\n\n\nnp.ones(3) / np.arange(2,5,1)\n\narray([0.5       , 0.33333333, 0.25      ])\n\n\n\nYou can get integers by specifying a NumPy dtype (for data type)\n\n\nnp.ones(3, dtype=int) // np.arange(2,5,1)\n\narray([0, 0, 0])\n\n\n\nAlways think about whether you want round numbers or not."
  },
  {
    "objectID": "05_matplotlib.rjs.html#plotting-taxation",
    "href": "05_matplotlib.rjs.html#plotting-taxation",
    "title": "Matplotlib",
    "section": "Plotting Taxation",
    "text": "Plotting Taxation\n\nLet’s make a linspace from, say, 0 to 500000.\n\n\nincomes = np.linspace(0,500000,100)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#vectorizing",
    "href": "05_matplotlib.rjs.html#vectorizing",
    "title": "Matplotlib",
    "section": "Vectorizing",
    "text": "Vectorizing\n\nUnlike, say + and -, single_tax is not a built-in, vectorized operation in NumPy.\nNot to worry, we just ask NumPy to np.vectorize it!\n\n\nvector_tax = np.vectorize(single_tax)\ncosts = vector_tax(incomes)\ncosts[::20] # Just look at 5 examples\n\narray([     0.        ,  21319.57828283,  50195.91666667,  83529.25      ,\n       116862.58333333])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#plot-vector-functions",
    "href": "05_matplotlib.rjs.html#plot-vector-functions",
    "title": "Matplotlib",
    "section": "Plot Vector Functions",
    "text": "Plot Vector Functions\n\nLet’s take a look!\n\n\nplt.plot(incomes,costs)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#more-fun",
    "href": "05_matplotlib.rjs.html#more-fun",
    "title": "Matplotlib",
    "section": "More fun",
    "text": "More fun\n\nWe can also plot tax rate\n\n\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1186195173.py:1: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#or-both",
    "href": "05_matplotlib.rjs.html#or-both",
    "title": "Matplotlib",
    "section": "Or Both",
    "text": "Or Both\n\nplt.plot(incomes, costs)\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1999314129.py:2: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\n\n\n\n\n\n\n\n\nProbably should put them on different scales!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#well-formed-charts",
    "href": "05_matplotlib.rjs.html#well-formed-charts",
    "title": "Matplotlib",
    "section": "Well-formed Charts",
    "text": "Well-formed Charts\n\nI learned charts should have:\n\nLabels on the vertical and horizontal axes\nA title\nA legend\n\nLet’s add these."
  },
  {
    "objectID": "05_matplotlib.rjs.html#section",
    "href": "05_matplotlib.rjs.html#section",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.title\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2974586296.py:2: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-1",
    "href": "05_matplotlib.rjs.html#section-1",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.xlabel and plt.ylabel\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1619337187.py:4: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-2",
    "href": "05_matplotlib.rjs.html#section-2",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.legend\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes)\nplt.legend() # We didn't label any of our plots!\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1652991527.py:4: RuntimeWarning:\n\ninvalid value encountered in divide\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\1652991527.py:5: UserWarning:\n\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument."
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-3",
    "href": "05_matplotlib.rjs.html#section-3",
    "title": "Matplotlib",
    "section": "",
    "text": "label=\n\n\nplt.title(\"Income Tax % by Income (USD)\")\nplt.xlabel(\"Income in USD\")\nplt.ylabel(\"Percent Tax Rate\")\nplt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nplt.legend() # This shows the labels \n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\3285922608.py:4: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#annotation",
    "href": "05_matplotlib.rjs.html#annotation",
    "title": "Matplotlib",
    "section": "Annotation",
    "text": "Annotation\n\nWe’ll add a note where median income (about 40k) is.\n\n\nmed_inc = 40000\nmed_tax = single_tax(40000)\nmed_pct = med_tax / med_inc * 100\nxy = [med_inc, med_pct]\nxy\n\n[40000, 14.428125]\n\n\n\nWe’ll use plt.annotate"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-4",
    "href": "05_matplotlib.rjs.html#section-4",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.annotate()\n\n\nplt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nplt.annotate(\"Median Income\", xy)\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2069779692.py:1: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\nText(40000, 14.428125, 'Median Income')"
  },
  {
    "objectID": "05_matplotlib.rjs.html#using-functions",
    "href": "05_matplotlib.rjs.html#using-functions",
    "title": "Matplotlib",
    "section": "Using functions",
    "text": "Using functions\n\nWe can use functions to add anotations.\n\n\ndef add_note(inc, note):\n    tax = single_tax(inc)\n    pct = tax / inc * 100\n    xy = [inc, pct]\n    plt.annotate(note, xy)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-5",
    "href": "05_matplotlib.rjs.html#section-5",
    "title": "Matplotlib",
    "section": "",
    "text": "plt.plot(incomes, costs / incomes * 100, label = \"Tax/Income\")\nadd_note(115000, \"CS Mid Career\")\nadd_note(80000, \"CS New Grads\")\nadd_note(70000, \"Physics New Grads\")\nadd_note(55000, \"All New Grads\")\nadd_note(40000, \"Median Income\")\nplt.title(\"Labor Market Outcomes of College Graduates by Major\")\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2832080454.py:1: RuntimeWarning:\n\ninvalid value encountered in divide\n\n\n\nText(0.5, 1.0, 'Labor Market Outcomes of College Graduates by Major')"
  },
  {
    "objectID": "05_matplotlib.rjs.html#multiple-functions",
    "href": "05_matplotlib.rjs.html#multiple-functions",
    "title": "Matplotlib",
    "section": "Multiple Functions",
    "text": "Multiple Functions\n\nI think it would be helpful to see actual tax percentage versus marginal tax percentage.\nNo one actually pays the highest 39.6%!\nWe recall our array:\n\n\ntaxes\n\n[[9275, 0.1, 0.0],\n [37650, 0.15, -463.75],\n [91150, 0.25, -4228.75],\n [190150, 0.28, -6963.25],\n [413350, 0.33, -16470.75],\n [415051, 0.35, -24737.75]]"
  },
  {
    "objectID": "05_matplotlib.rjs.html#bracket",
    "href": "05_matplotlib.rjs.html#bracket",
    "title": "Matplotlib",
    "section": "Bracket %",
    "text": "Bracket %\n\n\n\ntaxes\n\n[[9275, 0.1, 0.0],\n [37650, 0.15, -463.75],\n [91150, 0.25, -4228.75],\n [190150, 0.28, -6963.25],\n [413350, 0.33, -16470.75],\n [415051, 0.35, -24737.75]]\n\n\n\n\ndef bracket_pct(income):\n    for bracket in taxes:\n        if income &lt; bracket[0]:\n            return bracket[1]\n    return .396\n\nbracket_vector = np.vectorize(bracket_pct)\nbrackets = bracket_vector(incomes) * 100\nbrackets[::20]\n\narray([10., 28., 33., 33., 33.])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-6",
    "href": "05_matplotlib.rjs.html#section-6",
    "title": "Matplotlib",
    "section": "",
    "text": "color=\n\n\nplt.plot(incomes, costs / incomes * 100, label = \"Tax Rate\", color=\"blue\")\nplt.plot(incomes, brackets, label=\"Marginal Rate\", color=\"red\")\nplt.legend()\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\3364552391.py:1: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-7",
    "href": "05_matplotlib.rjs.html#section-7",
    "title": "Matplotlib",
    "section": "",
    "text": "color=\n\n\nrates = costs / incomes * 100\nplt.plot(incomes, rates, label = \"Tax Rate\", color=\"blue\")\nplt.plot(incomes, brackets, label=\"Marginal Rate\", color=\"red\")\nplt.plot(incomes, brackets - rates, label=\"Discount Rate\", color=\"green\")\nplt.legend()\n\nC:\\Users\\cd-desk\\AppData\\Local\\Temp\\ipykernel_16272\\2916591473.py:1: RuntimeWarning:\n\ninvalid value encountered in divide"
  },
  {
    "objectID": "05_matplotlib.rjs.html#more-than-lines",
    "href": "05_matplotlib.rjs.html#more-than-lines",
    "title": "Matplotlib",
    "section": "More than lines",
    "text": "More than lines\n\nWe are not restricted to line plots (of course)\nHistograms, boxplots, and scatterplots are all popular as well.\nWe’ll show a histogram quickly.\n\n\nes # number of electrons to fill outermost shell\n\narray([ 2,  8,  8, 18, 18, 32, 32])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#electron-shells",
    "href": "05_matplotlib.rjs.html#electron-shells",
    "title": "Matplotlib",
    "section": "Electron Shells",
    "text": "Electron Shells\n\nThat first 2 means:\n\nThere are two elements with a single electron shell\nOne has 1 of 2 electrons (Hydrogen)\nOne has 2 of 2 electrons (Helium)\n\nSo those elements have this many outermost electrons each:\n\n\nnp.arange(2) + 1\n\narray([1, 2])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#ordering-shells",
    "href": "05_matplotlib.rjs.html#ordering-shells",
    "title": "Matplotlib",
    "section": "Ordering Shells",
    "text": "Ordering Shells\n\nLet’s take a look at the distribution of how many electrons are present in the outermost shell.\nBasically, we need to take an np.arange() or each element of the es\n\n\nfor e in es:\n    np.arange(e) + 1"
  },
  {
    "objectID": "05_matplotlib.rjs.html#accumulate",
    "href": "05_matplotlib.rjs.html#accumulate",
    "title": "Matplotlib",
    "section": "Accumulate",
    "text": "Accumulate\n\nWe can just create some NumPy array and add to it over time.\n\nSince we are combining arrays we use\n\n\n\nnum_es = np.array([]) # The first zero elements\nfor e in es:\n    num_es = np.append(num_es, np.arange(e))\nnum_es += 1"
  },
  {
    "objectID": "05_matplotlib.rjs.html#what",
    "href": "05_matplotlib.rjs.html#what",
    "title": "Matplotlib",
    "section": "What?",
    "text": "What?\n\nHard to tell what is going on here.\n\n\nnum_es\n\narray([ 1.,  2.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,\n        9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,\n       17., 18.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.,\n       12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24.,\n       25., 26., 27., 28., 29., 30., 31., 32.,  1.,  2.,  3.,  4.,  5.,\n        6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,\n       19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n       32.])"
  },
  {
    "objectID": "05_matplotlib.rjs.html#histogram-1",
    "href": "05_matplotlib.rjs.html#histogram-1",
    "title": "Matplotlib",
    "section": "Histogram",
    "text": "Histogram\n\nplt.hist(num_es)\n\n(array([26., 18., 14., 12., 12., 10.,  6.,  6.,  6.,  8.]),\n array([ 1. ,  4.1,  7.2, 10.3, 13.4, 16.5, 19.6, 22.7, 25.8, 28.9, 32. ]),\n &lt;BarContainer object of 10 artists&gt;)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#nicety",
    "href": "05_matplotlib.rjs.html#nicety",
    "title": "Matplotlib",
    "section": "Nicety",
    "text": "Nicety\n\nI don’t really like seeing all that text about arrays and boxes and so on.\nI start plotting lines-of-code with _ =\n\n_ is a variable which, convention (just a social construction) means “ignore this”\nThis is a good way to say “I don’t care what this code returns but I do care what it prints, makes, saves, etc.”"
  },
  {
    "objectID": "05_matplotlib.rjs.html#histogram-2",
    "href": "05_matplotlib.rjs.html#histogram-2",
    "title": "Matplotlib",
    "section": "Histogram",
    "text": "Histogram\n\n_ = plt.hist(num_es)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#box",
    "href": "05_matplotlib.rjs.html#box",
    "title": "Matplotlib",
    "section": "Box",
    "text": "Box\n\n_ = plt.boxplot(num_es)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#pie",
    "href": "05_matplotlib.rjs.html#pie",
    "title": "Matplotlib",
    "section": "Pie",
    "text": "Pie\n\n_ = plt.pie(es) # NOT num_es\n\n\n\n\n\n\n\n\n\nThis appears to be one color per “row” but we didn’t label the rows so it’s hard to say."
  },
  {
    "objectID": "05_matplotlib.rjs.html#ecdf",
    "href": "05_matplotlib.rjs.html#ecdf",
    "title": "Matplotlib",
    "section": "ECDF",
    "text": "ECDF\n\n_ = plt.ecdf(num_es) # empirical cumulative distribution function\n\n\n\n\n\n\n\n\n\nGiven \\(n\\) electrons, what % have that many or fewer outermost electrons."
  },
  {
    "objectID": "05_matplotlib.rjs.html#many-more",
    "href": "05_matplotlib.rjs.html#many-more",
    "title": "Matplotlib",
    "section": "Many more!",
    "text": "Many more!\n\nThere are many more plot types that require having both two-dimensional data, the most famous being the scatter plot.\nRead more\nFor now, it is tough to use other charts well, but soon we will learn to read data files and plot them, with pandas."
  },
  {
    "objectID": "05_matplotlib.rjs.html#credit",
    "href": "05_matplotlib.rjs.html#credit",
    "title": "Matplotlib",
    "section": "Credit",
    "text": "Credit\n\nThis exercise, with great appreciation, is adapted from\n\nAn Introduction to Python for Chemistry\n\nI reviewed the chemistry at play in:\n\n3.3 Atmoic Orbitals"
  },
  {
    "objectID": "05_matplotlib.rjs.html#orbitals",
    "href": "05_matplotlib.rjs.html#orbitals",
    "title": "Matplotlib",
    "section": "Orbitals",
    "text": "Orbitals\n\nThose outermost electrons in an atom have to be somewhere.\nUsing the aforementioned plotly, it is possible to plot these orbitals interactively in 3D"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-8",
    "href": "05_matplotlib.rjs.html#section-8",
    "title": "Matplotlib",
    "section": "",
    "text": "Code\nimport plotly.graph_objects as go\n\n# --- Constants and Orbital Parameters ---\n# Atomic number (Z) for the hydrogenic atom.\n# Z=1 for Hydrogen. You can change this to visualize for other single-electron ions.\nZ = 1\n\n# Principal quantum number (n) for the 3d orbital.\nn = 3\n\n# --- Radial Wavefunction R_3d(r, Z) ---\n# This function calculates the radial part of the 3d orbital wavefunction.\n# It is based on the formula provided by the user:\n# R3d = (1/9√30) × ρ^2 × Z^(3/2) × e^(-ρ/2)\n# where ρ (rho) is defined as 2 * Z * r / n for hydrogenic atoms.\ndef R_3d(r, Z_val):\n    \"\"\"\n    Calculates the radial part of the 3d orbital wavefunction.\n\n    Args:\n        r (numpy.ndarray): Radial distance from the nucleus.\n        Z_val (int): Atomic number.\n\n    Returns:\n        numpy.ndarray: The value of the radial wavefunction at distance r.\n    \"\"\"\n    # Calculate rho based on the principal quantum number (n=3 for 3d)\n    rho = 2 * Z_val * r / n\n    \n    # The constant factor from the user's formula\n    constant_factor = 1 / (9 * np.sqrt(30))\n    \n    # Calculate the radial part according to the user's formula\n    # Handles potential division by zero or NaN values if r is zero,\n    # as rho will be zero, leading to rho**2 = 0 and exp(-0) = 1.\n    radial_part = constant_factor * (rho**2) * (Z_val**(3/2)) * np.exp(-rho / 2)\n    \n    return radial_part\n\n# --- Angular Wavefunction Y_3dz2(theta) ---\n# This function calculates the angular part of the 3d_z^2 orbital wavefunction.\n# It is based on the formula provided by the user:\n# Y3dz2 = √(5/4) × (3z^2 – r^2)/r^2 × (1/4π)^1/2\n# This simplifies to √(5/16π) * (3cos^2(theta) - 1), where theta is the polar angle.\ndef Y_3dz2(theta):\n    \"\"\"\n    Calculates the angular part of the 3d_z^2 orbital wavefunction.\n\n    Args:\n        theta (numpy.ndarray): Polar angle (angle from the positive z-axis).\n\n    Returns:\n        numpy.ndarray: The value of the angular wavefunction at angle theta.\n    \"\"\"\n    # The constant factor from the user's formula, simplified\n    constant_factor = np.sqrt(5 / (16 * np.pi))\n    \n    # Calculate the angular part\n    angular_part = constant_factor * (3 * np.cos(theta)**2 - 1)\n    \n    return angular_part\n\n# --- Create 3D Grid for Visualization ---\n# Define the resolution of the 3D grid. Higher values mean better detail but slower computation.\ngrid_points = 60 # Number of points along each axis (x, y, z)\nmax_range = 25   # Maximum extent of the plot in each direction (arbitrary units, e.g., Bohr radii)\n\n# Create 1D arrays for x, y, and z coordinates\nx_coords = np.linspace(-max_range, max_range, grid_points)\ny_coords = np.linspace(-max_range, max_range, grid_points)\nz_coords = np.linspace(-max_range, max_range, grid_points)\n\n# Create a 3D meshgrid from the 1D coordinate arrays\n# 'indexing='ij'' ensures that X, Y, Z_grid have shapes (grid_points, grid_points, grid_points)\n# Z_grid is renamed to avoid conflict with the atomic number Z.\nX, Y, Z_grid = np.meshgrid(x_coords, y_coords, z_coords, indexing='ij')\n\n# --- Convert Cartesian to Spherical Coordinates ---\n# Calculate radial distance (r)\nr = np.sqrt(X**2 + Y**2 + Z_grid**2)\n\n# Calculate polar angle (theta)\n# Using arctan2(sqrt(x^2+y^2), z) is more numerically stable than arccos(z/r)\n# as it handles cases where r is zero or very small more gracefully.\nr_xy_plane = np.sqrt(X**2 + Y**2)\ntheta = np.arctan2(r_xy_plane, Z_grid)\n\n# --- Calculate the Full Wavefunction (psi) ---\n# The full wavefunction is the product of the radial and angular parts.\n# Handle potential runtime warnings for very small r values if they lead to issues.\n# np.where is used to prevent division by zero for r=0 in R_3d, although the current R_3d\n# implementation handles it gracefully. It's a good practice for general cases.\npsi = np.where(r == 0, 0, R_3d(r, Z) * Y_3dz2(theta))\n\n# --- Determine Isosurface Thresholds ---\n# To visualize the shape of the orbital, we plot isosurfaces of the wavefunction (psi).\n# The 3d_z^2 orbital has positive lobes along the z-axis and a negative toroidal (donut) lobe\n# in the xy-plane. We will plot two isosurfaces: one for a positive psi value and one for a\n# negative psi value to represent these lobes.\n#\n# We find the maximum absolute value of psi to set a reasonable threshold.\n# The threshold determines the 'size' or 'extent' of the visualized orbital lobes.\nmax_abs_psi = np.max(np.abs(psi))\n# Adjust this factor (e.g., 0.05 to 0.2) to change the size of the rendered orbital.\n# A smaller factor will show a larger, more diffuse orbital.\nthreshold = max_abs_psi * 0.08 \n\n# --- Create Plotly Figure ---\nfig = go.Figure(data=[\n    # Isosurface for the positive lobe (e.g., blue color)\n    go.Isosurface(\n        x=X.flatten(),\n        y=Y.flatten(),\n        z=Z_grid.flatten(),\n        value=psi.flatten(),\n        isomin=threshold,  # Only show values at or above this positive threshold\n        isomax=threshold,  # Create a single surface at this threshold\n        surface_count=1,   # Draw only one surface for this data trace\n        caps=dict(x_show=False, y_show=False, z_show=False), # Hide caps for a cleaner look\n        colorscale=[[0, 'blue'], [1, 'blue']], # Solid blue color for positive lobe\n        showscale=False,   # Hide the color scale bar\n        opacity=0.6,       # Transparency of the surface\n        name='Positive Lobe (ψ &gt; 0)', # Name for legend\n        showlegend=True    # Show this trace in the legend\n    ),\n    # Isosurface for the negative lobe (e.g., red color)\n    go.Isosurface(\n        x=X.flatten(),\n        y=Y.flatten(),\n        z=Z_grid.flatten(),\n        value=psi.flatten(),\n        isomin=-threshold, # Only show values at or below this negative threshold\n        isomax=-threshold, # Create a single surface at this threshold\n        surface_count=1,\n        caps=dict(x_show=False, y_show=False, z_show=False),\n        colorscale=[[0, 'red'], [1, 'red']], # Solid red color for negative lobe\n        showscale=False,\n        opacity=0.6,\n        name='Negative Lobe (ψ &lt; 0)', # Name for legend\n        showlegend=True\n    )\n])\n\n# --- Update Layout and Scene Settings ---\nfig.update_layout(\n    title=f'Interactive 3d_z² Orbital Visualization (Z={Z})', # Title of the plot\n    # --- Add or modify these lines for a dark theme ---\n    paper_bgcolor='rgba(0,0,0,0)',  # Dark background for the entire figure\n    plot_bgcolor='rgba(0,0,0,0)',   # Dark background for the plotting area\n    font=dict(color='white'),         # White font color for better contrast\n    scene=dict(\n        xaxis_title='X', # X-axis label\n        yaxis_title='Y', # Y-axis label\n        zaxis_title='Z', # Z-axis label\n        aspectmode='cube', # Ensures equal scaling for all axes for correct shape representation\n        # Optionally set camera position for initial view\n        xaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\", # Transparent background for axis planes\n            gridcolor=\"gray\",                # Gray grid lines\n            zerolinecolor=\"white\"            # White zero line\n        ),\n        yaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\",\n            gridcolor=\"gray\",\n            zerolinecolor=\"white\"\n        ),\n        zaxis=dict(\n            backgroundcolor=\"rgba(0,0,0,0)\",\n            gridcolor=\"gray\",\n            zerolinecolor=\"white\"\n        ),\n        camera=dict(\n            eye=dict(x=1.5, y=1.5, z=1.5) # Adjust camera angle for better initial view\n        )\n    ),\n    margin=dict(l=0, r=0, b=0, t=40), # Adjust margins\n    height=700, # Height of the plot\n    width=700,  # Width of the plot\n    hovermode=False, # Disable hover to improve performance on large datasets\n    legend=dict(\n        x=0.01,\n        y=0.99,\n        bgcolor='rgba(255,255,255,0.7)',\n        bordercolor='Black',\n        borderwidth=1\n    )\n)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#orbitals-1",
    "href": "05_matplotlib.rjs.html#orbitals-1",
    "title": "Matplotlib",
    "section": "Orbitals",
    "text": "Orbitals\n\nI believe these are called orbitals, specifically in this case the \\(3d_z^2\\) orbital (which I selected because I thought it looked cool).\nIt is defined by the following equations: \\[R_{3d} = \\frac{1}{9\\sqrt{30}} \\times \\rho^2 \\times Z^{3/2} \\times e^{-\\rho/2}\\] \\[Y_{3d_{z^2}} = \\sqrt{\\frac{5}{4}} \\times \\frac{3z^2 - r^2}{r^2} \\times \\left(\\frac{1}{4\\pi}\\right)^{1/2}\\]"
  },
  {
    "objectID": "05_matplotlib.rjs.html#constants",
    "href": "05_matplotlib.rjs.html#constants",
    "title": "Matplotlib",
    "section": "Constants",
    "text": "Constants\n\nI also need to know what \\(\\rho\\) (rho) is, which is apparently:\n\n\n\\(\\frac{2Zr}{n}\\) where \\(n\\) is the principal quantum number (3 for the \\(3d\\) orbitals)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#onward",
    "href": "05_matplotlib.rjs.html#onward",
    "title": "Matplotlib",
    "section": "Onward",
    "text": "Onward\n\nNow let’s go to our exercise.\n\n\nSay we want to compare the probability distribution of three atomic orbitals on the same graph… The radial wavefunctions, \\(R\\), for the hydrogenic \\(3s\\), \\(3p\\) and \\(3d\\) orbitals respectively are…"
  },
  {
    "objectID": "05_matplotlib.rjs.html#equations",
    "href": "05_matplotlib.rjs.html#equations",
    "title": "Matplotlib",
    "section": "Equations",
    "text": "Equations\n\\[\nR_{3s} = \\frac{2}{3\\sqrt{3}} \\left(1 - \\frac{2r}{3} + \\frac{2}{27}r^2\\right) e^{-r/3}\n\\]\n\\[\nR_{3p} = \\frac{2\\sqrt{2}}{9\\sqrt{3}} \\left(\\frac{2r}{3}\\right) \\left(1 - \\frac{1}{6}r\\right) e^{-r/3}\n\\]\n\\[\nR_{3d} = \\frac{1}{9\\sqrt{30}} \\left(\\frac{2r}{3}\\right)^2 e^{-r/3}\n\\]"
  },
  {
    "objectID": "05_matplotlib.rjs.html#numpy",
    "href": "05_matplotlib.rjs.html#numpy",
    "title": "Matplotlib",
    "section": "NumPy",
    "text": "NumPy\n\nNumPy provides \\(e^x\\) as np.exp(x) and \\(\\sqrt(x)\\) as np.sqrt(x)\n\n\\[\nR_{3s} = \\frac{2}{3\\sqrt{3}} \\left(1 - \\frac{2r}{3} + \\frac{2}{27}r^2\\right) e^{-r/3}\n\\]\n\ndef r3s(r):\n    return 2/(3*np.sqrt(3)) * (1 - 2*r/3 + 2/27*r**2) * np.exp(-r/3)\n\n# and the others:\ndef r3p(r):\n    return (2*np.sqrt(2))/(9*np.sqrt(3)) * ((2*r)/3) * (1 - 1/6*r) * np.exp(-r/3)\n\ndef r3d(r):\n    return 1 /(9*np.sqrt(30)) * ( (2*r/3)**2 ) * np.exp(-r/3)"
  },
  {
    "objectID": "05_matplotlib.rjs.html#vectors",
    "href": "05_matplotlib.rjs.html#vectors",
    "title": "Matplotlib",
    "section": "Vectors",
    "text": "Vectors\n\nVs. single_tax, which contained if and else, everything in r3s is vectorizable already\n\nPython arithmetic, like *, -, + - We also introduced ** for “power”\n\n\n\n2 ** np.arange(4)\n\narray([1, 2, 4, 8])\n\n\n\nNumPy operations, which are designed to work on arrays!"
  },
  {
    "objectID": "05_matplotlib.rjs.html#matplotlib",
    "href": "05_matplotlib.rjs.html#matplotlib",
    "title": "Matplotlib",
    "section": "Matplotlib",
    "text": "Matplotlib\n\nvals = np.arange(30) # 30 is the highest number I saw, so try it\nplt.plot(r3s(vals), label=\"r3s\")\nplt.plot(r3p(vals), label=\"r3p\")\nplt.plot(r3d(vals), label=\"r3d\")\nplt.legend()"
  },
  {
    "objectID": "05_matplotlib.rjs.html#section-9",
    "href": "05_matplotlib.rjs.html#section-9",
    "title": "Matplotlib",
    "section": "",
    "text": "vals = np.arange(30) # 30 is the highest number I saw, so try it\nplt.plot(r3s(vals), label=\"r3s\")\nplt.plot(r3p(vals), label=\"r3p\")\nplt.plot(r3d(vals), label=\"r3d\")\nplt.legend()\n# These were just provided by the textbook\nplt.xlabel('r / Bohr radii' )       # label x-axis\nplt.ylabel('R')                     # label y-axis\nplt.title('Radial wavefunctions of $3s$, $3p$ and $3d$ orbitals') # $ gives \"math font\"\n\nText(0.5, 1.0, 'Radial wavefunctions of $3s$, $3p$ and $3d$ orbitals')"
  },
  {
    "objectID": "05_matplotlib.rjs.html#exercise-1",
    "href": "05_matplotlib.rjs.html#exercise-1",
    "title": "Matplotlib",
    "section": "Exercise",
    "text": "Exercise\n\nPlot \\(R_{1s}, R_{2s},\\) and \\(R_{3s}\\) on the same plot, with labels, and save a “.svg” file.\n\\(R_{3s}\\) is a provided above. \\[\nR_{1s} = 2e^{-r}\n\\]\n\n\\[\nR_{2s} = \\frac{1}{2\\sqrt{2}} (2 - r)e^{-r/2}\n\\]"
  },
  {
    "objectID": "05_matplotlib.rjs.html#solution",
    "href": "05_matplotlib.rjs.html#solution",
    "title": "Matplotlib",
    "section": "Solution",
    "text": "Solution\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef r1s(r):\n    return 2 * np.exp(-r)\n\ndef r2s(r):\n    return (1 / (2 * np.sqrt(2))) * (2 - r) * np.exp(-r/2)\n\ndef r3s(r):\n    return 2/(3*np.sqrt(3)) * (1 - 2*r/3 + 2/27*r**2) * np.exp(-r/3)\n\nvals = np.arange(30)\n\nplt.plot(r1s(vals), label=\"r1s\")\nplt.plot(r2s(vals), label=\"r2s\")\nplt.plot(r3s(vals), label=\"r3s\")\nplt.legend()\nplt.xlabel('r / Bohr radii' )       # label x-axis\nplt.ylabel('R')                     # label y-axis\nplt.title('Radial wavefunctions of $1s$, $2s$ and $3s$ orbitals')\nplt.savefig(\"s_orbitals.svg\")"
  },
  {
    "objectID": "03_shell.html",
    "href": "03_shell.html",
    "title": "Shell",
    "section": "",
    "text": "For lack of a better word, the command line shell.\nWe’ve called it the terminal.\nThus far, we’ve used the shell to run python and nvim\nWe’ve also briefly used a single shell command - ls\n\nRecall we used it to see we’d written a file with nvim\n\n\n\n\n\n\nSo far we’ve used the shell as follows:\n\n\n\n\n\n\n\n\nshell\n\n\nTerminal\n\nTerminal\n\n\n\nTerminal-&gt;Terminal\n\n\nls\n\n\n\nPython\n\nPython\n\n\n\nTerminal-&gt;Python\n\n\npython3\n\n\n\nNeovim\n\nNeovim\n\n\n\nTerminal-&gt;Neovim\n\n\nnvim\n\n\n\nPython-&gt;Terminal\n\n\nexit()\n\n\n\nNeovim-&gt;Terminal\n\n\n:x\n\n\n\n\n\n\n\n\n\n\n\n\nShell scripting is used to control compute clusters\n\nThese clusters do complex computations like climate modelling, protein folding.\nSometimes called “HPC” - high performance computing.\n\nWe can practice using the same techniques on our own computers!\n\n\n\n\n\nShell scripting is durable\n\nUnlike Google Drive or Dropbox, shell scripts from the 70s and 80s (more or less) work today\nSimilar arguments for Neovim vs. Microsoft Office Word or Google Docs\n\nShell scripting is portable\n\nPeople all around the world use the exact same commands.\n\n\n\n\n\n\nShell scripting can be automated\n\nSometimes we just want a computer to do something without us thinking about it.\nSay you want to collate data every Sunday at 2 PM PT.\n\nWrite a .py script that collates\nSchedule it to run automatically with the shell cron command\n\n\n\n\n\n\n\nNon-graphical - When first learning, students are used to see pictures and clicking them\nOS-based - Windows and MacOS have different shell scripts\nSteep-learning curve - Like Neovim, students generally find it difficult to get started, though it is widely preferred by experienced users",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#what-is-the-shell",
    "href": "03_shell.html#what-is-the-shell",
    "title": "Shell",
    "section": "",
    "text": "For lack of a better word, the command line shell.\nWe’ve called it the terminal.\nThus far, we’ve used the shell to run python and nvim\nWe’ve also briefly used a single shell command - ls\n\nRecall we used it to see we’d written a file with nvim",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#conceptualizing",
    "href": "03_shell.html#conceptualizing",
    "title": "Shell",
    "section": "",
    "text": "So far we’ve used the shell as follows:\n\n\n\n\n\n\n\n\nshell\n\n\nTerminal\n\nTerminal\n\n\n\nTerminal-&gt;Terminal\n\n\nls\n\n\n\nPython\n\nPython\n\n\n\nTerminal-&gt;Python\n\n\npython3\n\n\n\nNeovim\n\nNeovim\n\n\n\nTerminal-&gt;Neovim\n\n\nnvim\n\n\n\nPython-&gt;Terminal\n\n\nexit()\n\n\n\nNeovim-&gt;Terminal\n\n\n:x",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#on-the-shell",
    "href": "03_shell.html#on-the-shell",
    "title": "Shell",
    "section": "",
    "text": "Shell scripting is used to control compute clusters\n\nThese clusters do complex computations like climate modelling, protein folding.\nSometimes called “HPC” - high performance computing.\n\nWe can practice using the same techniques on our own computers!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#more-on-the-shell",
    "href": "03_shell.html#more-on-the-shell",
    "title": "Shell",
    "section": "",
    "text": "Shell scripting is durable\n\nUnlike Google Drive or Dropbox, shell scripts from the 70s and 80s (more or less) work today\nSimilar arguments for Neovim vs. Microsoft Office Word or Google Docs\n\nShell scripting is portable\n\nPeople all around the world use the exact same commands.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#automation",
    "href": "03_shell.html#automation",
    "title": "Shell",
    "section": "",
    "text": "Shell scripting can be automated\n\nSometimes we just want a computer to do something without us thinking about it.\nSay you want to collate data every Sunday at 2 PM PT.\n\nWrite a .py script that collates\nSchedule it to run automatically with the shell cron command",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#why-not-the-shell",
    "href": "03_shell.html#why-not-the-shell",
    "title": "Shell",
    "section": "",
    "text": "Non-graphical - When first learning, students are used to see pictures and clicking them\nOS-based - Windows and MacOS have different shell scripts\nSteep-learning curve - Like Neovim, students generally find it difficult to get started, though it is widely preferred by experienced users",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#setup",
    "href": "03_shell.html#setup",
    "title": "Shell",
    "section": "Setup",
    "text": "Setup\n\nWe need to do a bit more setup to:\n\nMake the course run smoothly\nLearn the general, transferrable skills we want.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#bash",
    "href": "03_shell.html#bash",
    "title": "Shell",
    "section": "Bash",
    "text": "Bash\n\nThe standard for shell scripting is “bash”\n\n\nIn computing, Bash (short for “Bourne Again SHell,”) is an interactive command interpreter and command programming language developed for UNIX-like operating systems.\n\n\n(It’s free)",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#windows",
    "href": "03_shell.html#windows",
    "title": "Shell",
    "section": "Windows",
    "text": "Windows\n\nBy default, Windows has two shells:\n\ncmd.bat - From the 90s\nPowerShell - Newer standard\n\nNeither used in scientific computing.\nInstead use:\n\nGit Bash\n\nLike Python, there is a very important box to check!\nI provide an Appendix",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#macos",
    "href": "03_shell.html#macos",
    "title": "Shell",
    "section": "MacOS",
    "text": "MacOS\n\nMacOS uses zsh\nIt is close enough to bash to use in this course.\nYou will still need to install git, however, a critical shell command.\n\nInstall Git for macOS\nIt installs through command line!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#why-standardize",
    "href": "03_shell.html#why-standardize",
    "title": "Shell",
    "section": "Why standardize?",
    "text": "Why standardize?\n\nIt is bad enough to have to say “type python or python3”\nBut even just using ls we see perhaps frustrating differences.\n\nls on bash lists only file names\nls on PowerShell lists file names, dates, and more\nls on cmd.bat is an error.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#diving-in",
    "href": "03_shell.html#diving-in",
    "title": "Shell",
    "section": "Diving In",
    "text": "Diving In\n\nToday we will use shell scripting in the terminal to…\n\nDelete old files\nOrganize files within folders\nSave the output of scripts as files",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#starting-point",
    "href": "03_shell.html#starting-point",
    "title": "Shell",
    "section": "Starting Point",
    "text": "Starting Point\n\nLet’s see what .py files you have.\nWe’ll issue an ls command.\nWe’ll provide an argument to the command.\nWe’ll use the .py file extension in the command\nAnd importantly, we’ll use the “wildcard” *\n\nls *.py",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#wildcard",
    "href": "03_shell.html#wildcard",
    "title": "Shell",
    "section": "Wildcard",
    "text": "Wildcard\n\nThe * will “match” any name.\nSo .py will “match” and Python file!\nI don’t know what you’ve saved, I see this!\n\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n\nWhat about ls *? ls *w.py?",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#file-management",
    "href": "03_shell.html#file-management",
    "title": "Shell",
    "section": "File Management",
    "text": "File Management\n\nI tend to like to:\n\nDelete old files\nOrganize files within folders\nSave the output of scripts as files\n\nLet’s do that.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#rm",
    "href": "03_shell.html#rm",
    "title": "Shell",
    "section": "rm",
    "text": "rm\n\n\n\n\n\n\nWarning\n\n\n\nThis command is dangerous.\n\n\n\nThe rm command removes files by name.\nFor example, I don’t use reply.py anymore.\nI can remove it like so:\n\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n$ rm reply.py\n$ ls *.py\nargs.py  hi.py  pw.py  tax.py",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#removerecycle",
    "href": "03_shell.html#removerecycle",
    "title": "Shell",
    "section": "Remove/Recycle",
    "text": "Remove/Recycle\n\nYou may be used to being able to restore deleted files from a recycling bin on your device.\nRestoring from rm is sometimes possible, but never easy.\nBe conscientious!\n\nLearning to think about file deletion is an important part of the scientific computing process!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#alternative",
    "href": "03_shell.html#alternative",
    "title": "Shell",
    "section": "Alternative",
    "text": "Alternative\n\nSometimes I don’t want to look at a file, but I don’t want to delete it either.\nI often keep a folder around called “old”\nIt’s stuff that’s old!\nI can make a folder with mkdir and the folder name, so\n\n$ ls\nargs.py  hi.py  pw.py  tax.py\n$ mkdir old\n$ ls\nargs.py  hi.py  old  pw.py  tax.py",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#moving-files",
    "href": "03_shell.html#moving-files",
    "title": "Shell",
    "section": "Moving Files",
    "text": "Moving Files\n\nYou may be used to “drag and drop” movement of files between folders.\nIn bash, we can do this using the mv command.\nIt takes two arguments.\n\nThe file to move, and\nA folder to move it to.\n\n\n$ ls\nargs.py  hi.py  old  pw.py  tax.py\n$ mv hi.py old\nargs.py  old  pw.py  tax.py\n\nWhere is hi.py?",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#moving-in-terminal",
    "href": "03_shell.html#moving-in-terminal",
    "title": "Shell",
    "section": "Moving in Terminal",
    "text": "Moving in Terminal\n\nWhen we are using the terminal, we have a notion of some location\nIt is the same kind of location a file can have, that is, within some folder.\nThese locations are called “paths” and are defined by how we get to them.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#locating-ourselves",
    "href": "03_shell.html#locating-ourselves",
    "title": "Shell",
    "section": "Locating ourselves",
    "text": "Locating ourselves\n\nYou can see where you are at in the terminal at any time with pwd\nStands for “print working directory”\nIf you just opened Terminal on Windows you would see:\n\n$ pwd\n/c/Users/cd-desk\n\nOn MacOS, I believe\n\n$ pwd\n/home/user",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#moving-ourselves",
    "href": "03_shell.html#moving-ourselves",
    "title": "Shell",
    "section": "Moving ourselves",
    "text": "Moving ourselves\n\nTo change which folder (or directory) the terminal is currently working within\n\nThe “working directory”\n\nWe use the “change directory” command cd\n\n$ ls\nargs.py  old  pw.py  tax.py  \n$ pwd\n/home/user\n$ cd old\n$ ls\nhi.py\n$ pwd\n/home/user/old",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#movement-1",
    "href": "03_shell.html#movement-1",
    "title": "Shell",
    "section": "Movement",
    "text": "Movement\n\nWe can move a file, like hi.py, to a folder, like old\n\n$ mv hi.py old\n\nWe can move the terminal’s current location to folder, like old\n\n$ cd old",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#exiting-a-folder",
    "href": "03_shell.html#exiting-a-folder",
    "title": "Shell",
    "section": "Exiting a Folder",
    "text": "Exiting a Folder\n\nTo leave a folder after cding into it, we use a special destination\n\n$ cd ..\nuser@DESKTOP-THMS2PJ:~$ pwd\n/home/user\n\n.. is the name of the folder that contains the folder you are currently in.\nSo you can use cd to change to the containing folder, often called the “parent”",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#graphically",
    "href": "03_shell.html#graphically",
    "title": "Shell",
    "section": "Graphically",
    "text": "Graphically\n\n\n\n\n\n\n\n\n\nshell\n\n\nhome\n\nhome\n\n\n\nold\n\nold\n\n\n\nhome-&gt;old\n\n\ncd old\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshell\n\n\nhome\n\nhome\n\n\n\nold\n\nold\n\n\n\nhome-&gt;old\n\n\n\n\n\nold-&gt;home\n\n\ncd ..",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#removing-directories",
    "href": "03_shell.html#removing-directories",
    "title": "Shell",
    "section": "Removing Directories",
    "text": "Removing Directories\n\nLike files, which we can remove with rm, we can also remove folders (or directories).\nWe do so with rmdir\nLet’s try on old\n\n$ rmdir old\nrmdir: failed to remove 'old': Directory not empty\n\nYou can only remove folders this way if they are empty.\nThis helps you not delete things by accident!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#reading",
    "href": "03_shell.html#reading",
    "title": "Shell",
    "section": "Reading",
    "text": "Reading\n\nThe names of files are helpful, but not always all we want to know.\nWhen files only contain text - like .py files, we can use cat to see what text they contain.\n\n$ cat args.py\nimport sys\n\nprint(sys.argv[0])i",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#writing",
    "href": "03_shell.html#writing",
    "title": "Shell",
    "section": "Writing",
    "text": "Writing\n\nReally, the best way to write a file from the command line is with Neovim.\nBut there are other ways, and sometimes you just want to make a file to test something.\nYou can make an empty file (with noting in it) via touch\n\n$ touch somefile.txt\n$ ls *.txt\nsomefile.txt",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#echoing",
    "href": "03_shell.html#echoing",
    "title": "Shell",
    "section": "Echoing",
    "text": "Echoing\n\nTo put anything in a file, we often use an echo command.\necho is also used for shell “Hello, world!”\n\n$ echo \"Hello, shell!\"\nHello, shell!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#redirecting",
    "href": "03_shell.html#redirecting",
    "title": "Shell",
    "section": "Redirecting",
    "text": "Redirecting\n\nFor any shell command - including echo - we can “redirect” what is printed to some file.\nWe do so using the special shell &gt; operator\n\nIt’s just a special thing, like *\n\n\n$ echo \"Hello, redirect!\" &gt; hi.txt\n$ cat hi.txt\nHello, redirect!\n\nThis is very helpful to save the results of Python computations.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#example",
    "href": "03_shell.html#example",
    "title": "Shell",
    "section": "Example",
    "text": "Example\n\nHere’s an example how it should work!\n\n$ python3 tax.py 40000 &gt; tax_burden.txt\n$ cat tax_burden.txt\n115529.25",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#references",
    "href": "03_shell.html#references",
    "title": "Shell",
    "section": "References",
    "text": "References\n\nYou can see the commands used here in a table reference in an Appendix\nI’ll include them here as well!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#section",
    "href": "03_shell.html#section",
    "title": "Shell",
    "section": "",
    "text": "Command\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#taking-notes",
    "href": "03_shell.html#taking-notes",
    "title": "Shell",
    "section": "Taking notes",
    "text": "Taking notes\n\nI claim it is hard to tell what this code is for.\n\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nWe may know, from taking this class, but in a few weeks, if I find and cat it, I am unlikely to know",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#documentation",
    "href": "03_shell.html#documentation",
    "title": "Shell",
    "section": "Documentation",
    "text": "Documentation\n\nGood code tends to come with good documentation - written descriptions of what the code does.\nIn Python, we can include “comments” - text that is not evaluated as code - by starting lines with #\n\n\n# This is a comment.\nprint(\"This is code.\")\n# This is another comment.\n\nThis is code.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#update-pw.py",
    "href": "03_shell.html#update-pw.py",
    "title": "Shell",
    "section": "Update pw.py",
    "text": "Update pw.py\n\nHere is how I documented pw.py:\n\n\n# Example of a piecewise function, from a student.\n# f(x) = 9x^2 + 5 | x &lt; 4\n#        9        | 4 &lt;= x &lt;= 8\n#        2 - x    | x &gt; 8\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nThis is functionally indentical, but easier on me!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#updating-tax.py",
    "href": "03_shell.html#updating-tax.py",
    "title": "Shell",
    "section": "Updating tax.py",
    "text": "Updating tax.py\n\nWith the benefit of comments, I’d like to look at income tax again.\nComments can make it much nicer to work with.\nHow?\n\n\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n\n\nUh… what does that mean?",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#command-mode",
    "href": "03_shell.html#command-mode",
    "title": "Shell",
    "section": "Command Mode",
    "text": "Command Mode\n\nThe beauty of Neovim is how powerful command mode, vim motions, and vim operators can be.\nWe’ll just introduce a few.\nThe goal is to give a sense of what is possible, and give you things to start practicing.\nIf you ever want to do something in Neovim, chances are you can!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#solution",
    "href": "03_shell.html#solution",
    "title": "Shell",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n\n\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\ndef single_tax(pay):\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#insert-is-easy",
    "href": "03_shell.html#insert-is-easy",
    "title": "Shell",
    "section": "Insert is easy",
    "text": "Insert is easy\n\nAfter opening the file, just press i and start typing…\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#is-end-of-line",
    "href": "03_shell.html#is-end-of-line",
    "title": "Shell",
    "section": "$ is end-of-line",
    "text": "$ is end-of-line\n\nESC to exit i mode\n“hjkl” are left-up-down-right\n\nSo j down to the 415050 line\n\n$ jumps to the end of the line\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#is-start-of-line",
    "href": "03_shell.html#is-start-of-line",
    "title": "Shell",
    "section": "0 is start-of-line",
    "text": "0 is start-of-line\n\nWe’ll now copy that comment rather than re-typing the whole thing\nESC into command mode\n0 brings to beginning of line.\n/ let’s us search, so /# searches for the start of the comment\n\nWindows I had to “ENTER” after.\n\n\nPractice this a few times!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-mouse",
    "href": "03_shell.html#aside-mouse",
    "title": "Shell",
    "section": "Aside: Mouse",
    "text": "Aside: Mouse\n\n\n\n\n\n\nTip\n\n\n\nI know you can do this with the mouse.\n\n\n\nI type a lot.\nI promise this is faster once you practice.\n\nTook me around 2 weeks.\nLike 15% of a semester.\n\nIt is way faster than laptop trackpads.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#yank-paste",
    "href": "03_shell.html#yank-paste",
    "title": "Shell",
    "section": "Yank & Paste",
    "text": "Yank & Paste\n\nVim predates copy paste!\nType y to yank and then $ to yank until the end of the line.\n\nWe can combine motions ($) and operators (y)\n\nUse j to go down to the next line.\nUse p to paste the comment.\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .396 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#update-it",
    "href": "03_shell.html#update-it",
    "title": "Shell",
    "section": "Update it",
    "text": "Update it\n\nI used\n\n/9 - first character to change\nr - replace mode\nType “5”.\nl to move right (onto “6”) then dl to delete the next character.\n\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#add-the-range",
    "href": "03_shell.html#add-the-range",
    "title": "Shell",
    "section": "Add the range",
    "text": "Add the range\n\nI used\n\n/over - first character to change\nde - We introduce the new e motion for “end of word” and combine with delete.\nType “between 413350 and”\nI escaped (ESC) and saved (:w)\n\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar between 413350 and 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#writing-as-thinking",
    "href": "03_shell.html#writing-as-thinking",
    "title": "Shell",
    "section": "Writing as Thinking",
    "text": "Writing as Thinking\n\nI consider writing part of the scientific process.\nYou may realize while working through this that…\nEach tax braket is a simple linear relation!\n\nThe rate is the slope\nThe intercept is how much they don’t have to pay due to marginal rates.\n\nBy writing and explain our computations, we can uncover insights",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#naive-notes",
    "href": "03_shell.html#naive-notes",
    "title": "Shell",
    "section": "Naive notes",
    "text": "Naive notes\n\nHere’s some naive notes I took.\nThey can be made better!\n\n\n# Tax on first bracket, up to 9725 at .1\nfirst = 9725 * .1\n# Second - to 37650 at .25\nsecond = first + (37650 - 9725) * .15",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#compute-intercept",
    "href": "03_shell.html#compute-intercept",
    "title": "Shell",
    "section": "Compute Intercept",
    "text": "Compute Intercept\n\nWe know e.g. the tax cost at 500000\n\n\nx = single_tax(500000)\nx\n\n154169.95\n\n\n\nCompare to a non-marginal 39.6%\n\n\ny = 500000 * .396\ny\n\n198000.0\n\n\n\nWe can find the difference.\n\n\nb = x - y \nb\n\n-43830.04999999999",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#a-linear-equation",
    "href": "03_shell.html#a-linear-equation",
    "title": "Shell",
    "section": "A Linear Equation",
    "text": "A Linear Equation\n\nTry 450000\n\n\nincome = 450000\n[single_tax(income), income * .396 + b]\n\n[134369.95, 134369.95]\n\n\n\nTry 650000\n\n\nincome = 650000\n[single_tax(income), income * .396 + b]\n\n[213569.95, 213569.95]\n\n\n\nWe can precompute these and make much simpler functions",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-slope-intercept",
    "href": "03_shell.html#aside-slope-intercept",
    "title": "Shell",
    "section": "Aside: Slope-Intercept",
    "text": "Aside: Slope-Intercept\n\nI think of this as \\[\ny = mx + b\n\\]\nThe slope-intercept form of a line, or linear equation.\nWe calculated it from the point-slope form of a line.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-scientific-application",
    "href": "03_shell.html#aside-scientific-application",
    "title": "Shell",
    "section": "Aside: Scientific Application",
    "text": "Aside: Scientific Application\n\nThinking in slopes and intercepts is a powerful scientific skill!\n\n\ndef in_degrees_f(degrees_c):\n    return (9/5) * degrees_c + 32\n\n\nRecognize this?\n\n\n[in_degrees_f(0), in_degrees_f(100)]\n\n[32.0, 212.0]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#intercept-computation",
    "href": "03_shell.html#intercept-computation",
    "title": "Shell",
    "section": "Intercept Computation",
    "text": "Intercept Computation\n\nOne of my favorite ways to use Python, Neovim, and the shell is to:\n\nCompute some numerical values - Intercept values for linear equations of tax.\nRun the script and output the results to the shell.\nUse &gt; to direct the output to file.\nUse nvim to edit that file into a new Python script that uses the numerical values I found.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#first",
    "href": "03_shell.html#first",
    "title": "Shell",
    "section": "First",
    "text": "First\n\nWrite a python script, points.py, that computes the tax cost at the end of each bracket.\nHere it is for “Married Filing Jointly”\nYou can do this with a loop using the tax_policy list-of-lists!\n\n\nb = 18550 * .1\nprint(b)\nb += (75300 - 18550) * .15\nprint(b)\nb += (151900 - 75300) * .25\nprint(b)\nb += (231450 - 151900) * .28\nprint(b)\n\n1855.0\n10367.5\n29517.5\n51791.5",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-loop-version",
    "href": "03_shell.html#aside-loop-version",
    "title": "Shell",
    "section": "Aside: Loop Version",
    "text": "Aside: Loop Version\n\n\nCode\n\n\ntaxes = [\n    [18550, .10],\n    [75300, .15],\n    [151900, .25],\n    [231450, .28],\n    [413350, .33],\n    [466951, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print(cost)\n    start = tax[0]\n\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#second",
    "href": "03_shell.html#second",
    "title": "Shell",
    "section": "Second",
    "text": "Second\n\nRun the Python script and direct the output to some file, like tax.py\n\n$ python points.py &gt; tax.py\n$ nvim tax.py\n\nFrom here, you can convert to a Python list of your choosing with a variety of means.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-visual-block",
    "href": "03_shell.html#aside-visual-block",
    "title": "Shell",
    "section": "Aside: Visual Block",
    "text": "Aside: Visual Block\n\n\n\n\n\n\nWarning\n\n\n\nThis is an advanced topic.\n\n\n\nWe introduce visual block mode\nA way to modifying multiple lines all at once.\n\nThere is also a regular “visual mode” v which I use less often.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#example-1",
    "href": "03_shell.html#example-1",
    "title": "Shell",
    "section": "Example",
    "text": "Example\n\n\n\nnvim tax.py\nctrl+q or ctrl+v to enter “visual block”\n5j to move down 5 lines\nI (shift + “i”) to enter “insert block”\nType “[” to begin a list\nESC to exit “insert block”\n“[” will appear at the start of every line.\n\n\n\nBefore:\n\n\n\ntax.py\n\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85\n\n\nAfter:\n\n\n\ntax.py\n\n[1855.0\n[10367.5\n[29517.5\n[51791.5\n[111818.5\n[130578.85\n\n\nPress u to undo to practice.",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#aside-printing-python",
    "href": "03_shell.html#aside-printing-python",
    "title": "Shell",
    "section": "Aside: Printing Python",
    "text": "Aside: Printing Python\n\nAlternatively, you can use print() to directly print things usable as Python.\n\n\n\nCode\n\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print([cost, start, tax[1]])\n    start = tax[0]\n\n[1855.0, 0, 0.1]\n[10367.5, 18550, 0.15]\n[29517.5, 75300, 0.25]\n[51791.5, 151900, 0.28]\n[111818.5, 231450, 0.33]\n[130578.85, 413350, 0.35]",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#third",
    "href": "03_shell.html#third",
    "title": "Shell",
    "section": "Third",
    "text": "Third\n\nUse points to determine intercepts\nConsider:\n\n\n# For taxpayers making more than 151900\n# They pay 51791.50, plus\n# .28 for every dollar over 151900\nbracket = [51791.5, 151900, 0.28]\n# What is the linear equation?\n\n\nWe can calculate it as follows:\n\n\nb = 51791.5 - (151900 * .28)\nb\n\n9259.499999999993",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#fourth",
    "href": "03_shell.html#fourth",
    "title": "Shell",
    "section": "Fourth",
    "text": "Fourth\n\nGiven the calculated slopes and intercepts, construct a piecewise function capturing income tax.\nSomething like this:\n\n\ndef married_tax(income):\n    if (151900 &lt;= income &lt; 231450):\n        return income * .28 - 9259.5\n    # There will be more brackets of course!",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#exercise-1",
    "href": "03_shell.html#exercise-1",
    "title": "Shell",
    "section": "Exercise",
    "text": "Exercise\n\nCreate two Python files:\n\nOne which calculates intercepts - Perhaps intercepts.py\nOne which uses intercepts to compute tax cost linearly. - Perhaps tax_line.py",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#solution-pt.-1",
    "href": "03_shell.html#solution-pt.-1",
    "title": "Shell",
    "section": "Solution pt. 1",
    "text": "Solution pt. 1\n\n\nCode\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]\n    print(tax)",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.html#solution-pt.-2",
    "href": "03_shell.html#solution-pt.-2",
    "title": "Shell",
    "section": "Solution pt. 2",
    "text": "Solution pt. 2\n\n\nCode\n# Generate with `intercepts` then modify with visual block mode\ntaxes = [\n    [9275, 0.1, 0.0],\n    [37650, 0.15, -463.75],\n    [91150, 0.25, -4228.75],\n    [190150, 0.28, -6963.25],\n    [413350, 0.33, -16470.75],\n    [415051, 0.35, -24737.75],\n]\n\ndef single_tax(income):\n    # Check all brackets\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    # We calculated the top bracket earlier\n    return income * .396 + -43830.05",
    "crumbs": [
      "Shell"
    ]
  },
  {
    "objectID": "03_shell.rjs.html#what-is-the-shell",
    "href": "03_shell.rjs.html#what-is-the-shell",
    "title": "Shell",
    "section": "What is the “shell”?",
    "text": "What is the “shell”?\n\nFor lack of a better word, the command line shell.\nWe’ve called it the terminal.\nThus far, we’ve used the shell to run python and nvim\nWe’ve also briefly used a single shell command - ls\n\nRecall we used it to see we’d written a file with nvim"
  },
  {
    "objectID": "03_shell.rjs.html#conceptualizing",
    "href": "03_shell.rjs.html#conceptualizing",
    "title": "Shell",
    "section": "Conceptualizing",
    "text": "Conceptualizing\n\nSo far we’ve used the shell as follows:\n\n\n\n\n\n\n\n\nshell\n\n\nTerminal\n\nTerminal\n\n\n\nTerminal-&gt;Terminal\n\n\nls\n\n\n\nPython\n\nPython\n\n\n\nTerminal-&gt;Python\n\n\npython3\n\n\n\nNeovim\n\nNeovim\n\n\n\nTerminal-&gt;Neovim\n\n\nnvim\n\n\n\nPython-&gt;Terminal\n\n\nexit()\n\n\n\nNeovim-&gt;Terminal\n\n\n:x"
  },
  {
    "objectID": "03_shell.rjs.html#on-the-shell",
    "href": "03_shell.rjs.html#on-the-shell",
    "title": "Shell",
    "section": "On the Shell",
    "text": "On the Shell\n\nShell scripting is used to control compute clusters\n\nThese clusters do complex computations like climate modelling, protein folding.\nSometimes called “HPC” - high performance computing.\n\nWe can practice using the same techniques on our own computers!"
  },
  {
    "objectID": "03_shell.rjs.html#more-on-the-shell",
    "href": "03_shell.rjs.html#more-on-the-shell",
    "title": "Shell",
    "section": "More on the Shell",
    "text": "More on the Shell\n\nShell scripting is durable\n\nUnlike Google Drive or Dropbox, shell scripts from the 70s and 80s (more or less) work today\nSimilar arguments for Neovim vs. Microsoft Office Word or Google Docs\n\nShell scripting is portable\n\nPeople all around the world use the exact same commands."
  },
  {
    "objectID": "03_shell.rjs.html#automation",
    "href": "03_shell.rjs.html#automation",
    "title": "Shell",
    "section": "Automation",
    "text": "Automation\n\nShell scripting can be automated\n\nSometimes we just want a computer to do something without us thinking about it.\nSay you want to collate data every Sunday at 2 PM PT.\n\nWrite a .py script that collates\nSchedule it to run automatically with the shell cron command"
  },
  {
    "objectID": "03_shell.rjs.html#why-not-the-shell",
    "href": "03_shell.rjs.html#why-not-the-shell",
    "title": "Shell",
    "section": "Why not the shell?",
    "text": "Why not the shell?\n\nNon-graphical - When first learning, students are used to see pictures and clicking them\nOS-based - Windows and MacOS have different shell scripts\nSteep-learning curve - Like Neovim, students generally find it difficult to get started, though it is widely preferred by experienced users"
  },
  {
    "objectID": "03_shell.rjs.html#setup",
    "href": "03_shell.rjs.html#setup",
    "title": "Shell",
    "section": "Setup",
    "text": "Setup\n\nWe need to do a bit more setup to:\n\nMake the course run smoothly\nLearn the general, transferrable skills we want."
  },
  {
    "objectID": "03_shell.rjs.html#bash",
    "href": "03_shell.rjs.html#bash",
    "title": "Shell",
    "section": "Bash",
    "text": "Bash\n\nThe standard for shell scripting is “bash”\n\n\nIn computing, Bash (short for “Bourne Again SHell,”) is an interactive command interpreter and command programming language developed for UNIX-like operating systems.\n\n\n(It’s free)"
  },
  {
    "objectID": "03_shell.rjs.html#windows",
    "href": "03_shell.rjs.html#windows",
    "title": "Shell",
    "section": "Windows",
    "text": "Windows\n\nBy default, Windows has two shells:\n\ncmd.bat - From the 90s\nPowerShell - Newer standard\n\nNeither used in scientific computing.\nInstead use:\n\nGit Bash\n\nLike Python, there is a very important box to check!\nI provide an Appendix"
  },
  {
    "objectID": "03_shell.rjs.html#macos",
    "href": "03_shell.rjs.html#macos",
    "title": "Shell",
    "section": "MacOS",
    "text": "MacOS\n\nMacOS uses zsh\nIt is close enough to bash to use in this course.\nYou will still need to install git, however, a critical shell command.\n\nInstall Git for macOS\nIt installs through command line!"
  },
  {
    "objectID": "03_shell.rjs.html#why-standardize",
    "href": "03_shell.rjs.html#why-standardize",
    "title": "Shell",
    "section": "Why standardize?",
    "text": "Why standardize?\n\nIt is bad enough to have to say “type python or python3”\nBut even just using ls we see perhaps frustrating differences.\n\nls on bash lists only file names\nls on PowerShell lists file names, dates, and more\nls on cmd.bat is an error."
  },
  {
    "objectID": "03_shell.rjs.html#diving-in",
    "href": "03_shell.rjs.html#diving-in",
    "title": "Shell",
    "section": "Diving In",
    "text": "Diving In\n\nToday we will use shell scripting in the terminal to…\n\nDelete old files\nOrganize files within folders\nSave the output of scripts as files"
  },
  {
    "objectID": "03_shell.rjs.html#starting-point",
    "href": "03_shell.rjs.html#starting-point",
    "title": "Shell",
    "section": "Starting Point",
    "text": "Starting Point\n\nLet’s see what .py files you have.\nWe’ll issue an ls command.\nWe’ll provide an argument to the command.\nWe’ll use the .py file extension in the command\nAnd importantly, we’ll use the “wildcard” *\n\nls *.py"
  },
  {
    "objectID": "03_shell.rjs.html#wildcard",
    "href": "03_shell.rjs.html#wildcard",
    "title": "Shell",
    "section": "Wildcard",
    "text": "Wildcard\n\nThe * will “match” any name.\nSo .py will “match” and Python file!\nI don’t know what you’ve saved, I see this!\n\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n\nWhat about ls *? ls *w.py?"
  },
  {
    "objectID": "03_shell.rjs.html#file-management",
    "href": "03_shell.rjs.html#file-management",
    "title": "Shell",
    "section": "File Management",
    "text": "File Management\n\nI tend to like to:\n\nDelete old files\nOrganize files within folders\nSave the output of scripts as files\n\nLet’s do that."
  },
  {
    "objectID": "03_shell.rjs.html#rm",
    "href": "03_shell.rjs.html#rm",
    "title": "Shell",
    "section": "rm",
    "text": "rm\n\n\n\n\n\n\nWarning\n\n\nThis command is dangerous.\n\n\n\n\nThe rm command removes files by name.\nFor example, I don’t use reply.py anymore.\nI can remove it like so:\n\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n$ rm reply.py\n$ ls *.py\nargs.py  hi.py  pw.py  tax.py"
  },
  {
    "objectID": "03_shell.rjs.html#removerecycle",
    "href": "03_shell.rjs.html#removerecycle",
    "title": "Shell",
    "section": "Remove/Recycle",
    "text": "Remove/Recycle\n\nYou may be used to being able to restore deleted files from a recycling bin on your device.\nRestoring from rm is sometimes possible, but never easy.\nBe conscientious!\n\nLearning to think about file deletion is an important part of the scientific computing process!"
  },
  {
    "objectID": "03_shell.rjs.html#alternative",
    "href": "03_shell.rjs.html#alternative",
    "title": "Shell",
    "section": "Alternative",
    "text": "Alternative\n\nSometimes I don’t want to look at a file, but I don’t want to delete it either.\nI often keep a folder around called “old”\nIt’s stuff that’s old!\nI can make a folder with mkdir and the folder name, so\n\n$ ls\nargs.py  hi.py  pw.py  tax.py\n$ mkdir old\n$ ls\nargs.py  hi.py  old  pw.py  tax.py"
  },
  {
    "objectID": "03_shell.rjs.html#moving-files",
    "href": "03_shell.rjs.html#moving-files",
    "title": "Shell",
    "section": "Moving Files",
    "text": "Moving Files\n\nYou may be used to “drag and drop” movement of files between folders.\nIn bash, we can do this using the mv command.\nIt takes two arguments.\n\nThe file to move, and\nA folder to move it to.\n\n\n$ ls\nargs.py  hi.py  old  pw.py  tax.py\n$ mv hi.py old\nargs.py  old  pw.py  tax.py\n\nWhere is hi.py?"
  },
  {
    "objectID": "03_shell.rjs.html#moving-in-terminal",
    "href": "03_shell.rjs.html#moving-in-terminal",
    "title": "Shell",
    "section": "Moving in Terminal",
    "text": "Moving in Terminal\n\nWhen we are using the terminal, we have a notion of some location\nIt is the same kind of location a file can have, that is, within some folder.\nThese locations are called “paths” and are defined by how we get to them."
  },
  {
    "objectID": "03_shell.rjs.html#locating-ourselves",
    "href": "03_shell.rjs.html#locating-ourselves",
    "title": "Shell",
    "section": "Locating ourselves",
    "text": "Locating ourselves\n\nYou can see where you are at in the terminal at any time with pwd\nStands for “print working directory”\nIf you just opened Terminal on Windows you would see:\n\n$ pwd\n/c/Users/cd-desk\n\nOn MacOS, I believe\n\n$ pwd\n/home/user"
  },
  {
    "objectID": "03_shell.rjs.html#moving-ourselves",
    "href": "03_shell.rjs.html#moving-ourselves",
    "title": "Shell",
    "section": "Moving ourselves",
    "text": "Moving ourselves\n\nTo change which folder (or directory) the terminal is currently working within\n\nThe “working directory”\n\nWe use the “change directory” command cd\n\n$ ls\nargs.py  old  pw.py  tax.py  \n$ pwd\n/home/user\n$ cd old\n$ ls\nhi.py\n$ pwd\n/home/user/old"
  },
  {
    "objectID": "03_shell.rjs.html#movement-1",
    "href": "03_shell.rjs.html#movement-1",
    "title": "Shell",
    "section": "Movement",
    "text": "Movement\n\nWe can move a file, like hi.py, to a folder, like old\n\n$ mv hi.py old\n\nWe can move the terminal’s current location to folder, like old\n\n$ cd old"
  },
  {
    "objectID": "03_shell.rjs.html#exiting-a-folder",
    "href": "03_shell.rjs.html#exiting-a-folder",
    "title": "Shell",
    "section": "Exiting a Folder",
    "text": "Exiting a Folder\n\nTo leave a folder after cding into it, we use a special destination\n\n$ cd ..\nuser@DESKTOP-THMS2PJ:~$ pwd\n/home/user\n\n.. is the name of the folder that contains the folder you are currently in.\nSo you can use cd to change to the containing folder, often called the “parent”"
  },
  {
    "objectID": "03_shell.rjs.html#graphically",
    "href": "03_shell.rjs.html#graphically",
    "title": "Shell",
    "section": "Graphically",
    "text": "Graphically\n\n\n\n\n\n\n\n\n\nshell\n\n\nhome\n\nhome\n\n\n\nold\n\nold\n\n\n\nhome-&gt;old\n\n\ncd old\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nshell\n\n\nhome\n\nhome\n\n\n\nold\n\nold\n\n\n\nhome-&gt;old\n\n\n\n\n\nold-&gt;home\n\n\ncd .."
  },
  {
    "objectID": "03_shell.rjs.html#removing-directories",
    "href": "03_shell.rjs.html#removing-directories",
    "title": "Shell",
    "section": "Removing Directories",
    "text": "Removing Directories\n\nLike files, which we can remove with rm, we can also remove folders (or directories).\nWe do so with rmdir\nLet’s try on old\n\n$ rmdir old\nrmdir: failed to remove 'old': Directory not empty\n\nYou can only remove folders this way if they are empty.\nThis helps you not delete things by accident!"
  },
  {
    "objectID": "03_shell.rjs.html#reading",
    "href": "03_shell.rjs.html#reading",
    "title": "Shell",
    "section": "Reading",
    "text": "Reading\n\nThe names of files are helpful, but not always all we want to know.\nWhen files only contain text - like .py files, we can use cat to see what text they contain.\n\n$ cat args.py\nimport sys\n\nprint(sys.argv[0])i"
  },
  {
    "objectID": "03_shell.rjs.html#writing",
    "href": "03_shell.rjs.html#writing",
    "title": "Shell",
    "section": "Writing",
    "text": "Writing\n\nReally, the best way to write a file from the command line is with Neovim.\nBut there are other ways, and sometimes you just want to make a file to test something.\nYou can make an empty file (with noting in it) via touch\n\n$ touch somefile.txt\n$ ls *.txt\nsomefile.txt"
  },
  {
    "objectID": "03_shell.rjs.html#echoing",
    "href": "03_shell.rjs.html#echoing",
    "title": "Shell",
    "section": "Echoing",
    "text": "Echoing\n\nTo put anything in a file, we often use an echo command.\necho is also used for shell “Hello, world!”\n\n$ echo \"Hello, shell!\"\nHello, shell!"
  },
  {
    "objectID": "03_shell.rjs.html#redirecting",
    "href": "03_shell.rjs.html#redirecting",
    "title": "Shell",
    "section": "Redirecting",
    "text": "Redirecting\n\nFor any shell command - including echo - we can “redirect” what is printed to some file.\nWe do so using the special shell &gt; operator\n\nIt’s just a special thing, like *\n\n\n$ echo \"Hello, redirect!\" &gt; hi.txt\n$ cat hi.txt\nHello, redirect!\n\nThis is very helpful to save the results of Python computations."
  },
  {
    "objectID": "03_shell.rjs.html#example",
    "href": "03_shell.rjs.html#example",
    "title": "Shell",
    "section": "Example",
    "text": "Example\n\nHere’s an example how it should work!\n\n$ python3 tax.py 40000 &gt; tax_burden.txt\n$ cat tax_burden.txt\n115529.25"
  },
  {
    "objectID": "03_shell.rjs.html#references",
    "href": "03_shell.rjs.html#references",
    "title": "Shell",
    "section": "References",
    "text": "References\n\nYou can see the commands used here in a table reference in an Appendix\nI’ll include them here as well!"
  },
  {
    "objectID": "03_shell.rjs.html#section",
    "href": "03_shell.rjs.html#section",
    "title": "Shell",
    "section": "",
    "text": "Command\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt"
  },
  {
    "objectID": "03_shell.rjs.html#taking-notes",
    "href": "03_shell.rjs.html#taking-notes",
    "title": "Shell",
    "section": "Taking notes",
    "text": "Taking notes\n\nI claim it is hard to tell what this code is for.\n\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nWe may know, from taking this class, but in a few weeks, if I find and cat it, I am unlikely to know"
  },
  {
    "objectID": "03_shell.rjs.html#documentation",
    "href": "03_shell.rjs.html#documentation",
    "title": "Shell",
    "section": "Documentation",
    "text": "Documentation\n\nGood code tends to come with good documentation - written descriptions of what the code does.\nIn Python, we can include “comments” - text that is not evaluated as code - by starting lines with #\n\n\n# This is a comment.\nprint(\"This is code.\")\n# This is another comment.\n\nThis is code."
  },
  {
    "objectID": "03_shell.rjs.html#update-pw.py",
    "href": "03_shell.rjs.html#update-pw.py",
    "title": "Shell",
    "section": "Update pw.py",
    "text": "Update pw.py\n\nHere is how I documented pw.py:\n\n\n# Example of a piecewise function, from a student.\n# f(x) = 9x^2 + 5 | x &lt; 4\n#        9        | 4 &lt;= x &lt;= 8\n#        2 - x    | x &gt; 8\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nThis is functionally indentical, but easier on me!"
  },
  {
    "objectID": "03_shell.rjs.html#updating-tax.py",
    "href": "03_shell.rjs.html#updating-tax.py",
    "title": "Shell",
    "section": "Updating tax.py",
    "text": "Updating tax.py\n\nWith the benefit of comments, I’d like to look at income tax again.\nComments can make it much nicer to work with.\nHow?\n\n\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n\n\nUh… what does that mean?"
  },
  {
    "objectID": "03_shell.rjs.html#command-mode",
    "href": "03_shell.rjs.html#command-mode",
    "title": "Shell",
    "section": "Command Mode",
    "text": "Command Mode\n\nThe beauty of Neovim is how powerful command mode, vim motions, and vim operators can be.\nWe’ll just introduce a few.\nThe goal is to give a sense of what is possible, and give you things to start practicing.\nIf you ever want to do something in Neovim, chances are you can!"
  },
  {
    "objectID": "03_shell.rjs.html#solution",
    "href": "03_shell.rjs.html#solution",
    "title": "Shell",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n\n\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\ndef single_tax(pay):\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1"
  },
  {
    "objectID": "03_shell.rjs.html#insert-is-easy",
    "href": "03_shell.rjs.html#insert-is-easy",
    "title": "Shell",
    "section": "Insert is easy",
    "text": "Insert is easy\n\nAfter opening the file, just press i and start typing…\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]"
  },
  {
    "objectID": "03_shell.rjs.html#is-end-of-line",
    "href": "03_shell.rjs.html#is-end-of-line",
    "title": "Shell",
    "section": "$ is end-of-line",
    "text": "$ is end-of-line\n\nESC to exit i mode\n“hjkl” are left-up-down-right\n\nSo j down to the 415050 line\n\n$ jumps to the end of the line\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]"
  },
  {
    "objectID": "03_shell.rjs.html#is-start-of-line",
    "href": "03_shell.rjs.html#is-start-of-line",
    "title": "Shell",
    "section": "0 is start-of-line",
    "text": "0 is start-of-line\n\nWe’ll now copy that comment rather than re-typing the whole thing\nESC into command mode\n0 brings to beginning of line.\n/ let’s us search, so /# searches for the start of the comment\n\nWindows I had to “ENTER” after.\n\n\nPractice this a few times!"
  },
  {
    "objectID": "03_shell.rjs.html#aside-mouse",
    "href": "03_shell.rjs.html#aside-mouse",
    "title": "Shell",
    "section": "Aside: Mouse",
    "text": "Aside: Mouse\n\n\n\n\n\n\nTip\n\n\nI know you can do this with the mouse.\n\n\n\n\nI type a lot.\nI promise this is faster once you practice.\n\nTook me around 2 weeks.\nLike 15% of a semester.\n\nIt is way faster than laptop trackpads."
  },
  {
    "objectID": "03_shell.rjs.html#yank-paste",
    "href": "03_shell.rjs.html#yank-paste",
    "title": "Shell",
    "section": "Yank & Paste",
    "text": "Yank & Paste\n\nVim predates copy paste!\nType y to yank and then $ to yank until the end of the line.\n\nWe can combine motions ($) and operators (y)\n\nUse j to go down to the next line.\nUse p to paste the comment.\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .396 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]"
  },
  {
    "objectID": "03_shell.rjs.html#update-it",
    "href": "03_shell.rjs.html#update-it",
    "title": "Shell",
    "section": "Update it",
    "text": "Update it\n\nI used\n\n/9 - first character to change\nr - replace mode\nType “5”.\nl to move right (onto “6”) then dl to delete the next character.\n\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]"
  },
  {
    "objectID": "03_shell.rjs.html#add-the-range",
    "href": "03_shell.rjs.html#add-the-range",
    "title": "Shell",
    "section": "Add the range",
    "text": "Add the range\n\nI used\n\n/over - first character to change\nde - We introduce the new e motion for “end of word” and combine with delete.\nType “between 413350 and”\nI escaped (ESC) and saved (:w)\n\n\n\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar between 413350 and 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]"
  },
  {
    "objectID": "03_shell.rjs.html#writing-as-thinking",
    "href": "03_shell.rjs.html#writing-as-thinking",
    "title": "Shell",
    "section": "Writing as Thinking",
    "text": "Writing as Thinking\n\nI consider writing part of the scientific process.\nYou may realize while working through this that…\nEach tax braket is a simple linear relation!\n\nThe rate is the slope\nThe intercept is how much they don’t have to pay due to marginal rates.\n\nBy writing and explain our computations, we can uncover insights"
  },
  {
    "objectID": "03_shell.rjs.html#naive-notes",
    "href": "03_shell.rjs.html#naive-notes",
    "title": "Shell",
    "section": "Naive notes",
    "text": "Naive notes\n\nHere’s some naive notes I took.\nThey can be made better!\n\n\n# Tax on first bracket, up to 9725 at .1\nfirst = 9725 * .1\n# Second - to 37650 at .25\nsecond = first + (37650 - 9725) * .15"
  },
  {
    "objectID": "03_shell.rjs.html#compute-intercept",
    "href": "03_shell.rjs.html#compute-intercept",
    "title": "Shell",
    "section": "Compute Intercept",
    "text": "Compute Intercept\n\nWe know e.g. the tax cost at 500000\n\n\nx = single_tax(500000)\nx\n\n154169.95\n\n\n\nCompare to a non-marginal 39.6%\n\n\ny = 500000 * .396\ny\n\n198000.0\n\n\n\nWe can find the difference.\n\n\nb = x - y \nb\n\n-43830.04999999999"
  },
  {
    "objectID": "03_shell.rjs.html#a-linear-equation",
    "href": "03_shell.rjs.html#a-linear-equation",
    "title": "Shell",
    "section": "A Linear Equation",
    "text": "A Linear Equation\n\nTry 450000\n\n\nincome = 450000\n[single_tax(income), income * .396 + b]\n\n[134369.95, 134369.95]\n\n\n\nTry 650000\n\n\nincome = 650000\n[single_tax(income), income * .396 + b]\n\n[213569.95, 213569.95]\n\n\n\nWe can precompute these and make much simpler functions"
  },
  {
    "objectID": "03_shell.rjs.html#aside-slope-intercept",
    "href": "03_shell.rjs.html#aside-slope-intercept",
    "title": "Shell",
    "section": "Aside: Slope-Intercept",
    "text": "Aside: Slope-Intercept\n\nI think of this as \\[\ny = mx + b\n\\]\nThe slope-intercept form of a line, or linear equation.\nWe calculated it from the point-slope form of a line."
  },
  {
    "objectID": "03_shell.rjs.html#aside-scientific-application",
    "href": "03_shell.rjs.html#aside-scientific-application",
    "title": "Shell",
    "section": "Aside: Scientific Application",
    "text": "Aside: Scientific Application\n\nThinking in slopes and intercepts is a powerful scientific skill!\n\n\ndef in_degrees_f(degrees_c):\n    return (9/5) * degrees_c + 32\n\n\nRecognize this?\n\n\n[in_degrees_f(0), in_degrees_f(100)]\n\n[32.0, 212.0]"
  },
  {
    "objectID": "03_shell.rjs.html#intercept-computation",
    "href": "03_shell.rjs.html#intercept-computation",
    "title": "Shell",
    "section": "Intercept Computation",
    "text": "Intercept Computation\n\nOne of my favorite ways to use Python, Neovim, and the shell is to:\n\nCompute some numerical values - Intercept values for linear equations of tax.\nRun the script and output the results to the shell.\nUse &gt; to direct the output to file.\nUse nvim to edit that file into a new Python script that uses the numerical values I found."
  },
  {
    "objectID": "03_shell.rjs.html#first",
    "href": "03_shell.rjs.html#first",
    "title": "Shell",
    "section": "First",
    "text": "First\n\nWrite a python script, points.py, that computes the tax cost at the end of each bracket.\nHere it is for “Married Filing Jointly”\nYou can do this with a loop using the tax_policy list-of-lists!\n\n\nb = 18550 * .1\nprint(b)\nb += (75300 - 18550) * .15\nprint(b)\nb += (151900 - 75300) * .25\nprint(b)\nb += (231450 - 151900) * .28\nprint(b)\n\n1855.0\n10367.5\n29517.5\n51791.5"
  },
  {
    "objectID": "03_shell.rjs.html#aside-loop-version",
    "href": "03_shell.rjs.html#aside-loop-version",
    "title": "Shell",
    "section": "Aside: Loop Version",
    "text": "Aside: Loop Version\n\n\nCode\n\n\n\ntaxes = [\n    [18550, .10],\n    [75300, .15],\n    [151900, .25],\n    [231450, .28],\n    [413350, .33],\n    [466951, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print(cost)\n    start = tax[0]\n\n\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85"
  },
  {
    "objectID": "03_shell.rjs.html#second",
    "href": "03_shell.rjs.html#second",
    "title": "Shell",
    "section": "Second",
    "text": "Second\n\nRun the Python script and direct the output to some file, like tax.py\n\n$ python points.py &gt; tax.py\n$ nvim tax.py\n\nFrom here, you can convert to a Python list of your choosing with a variety of means."
  },
  {
    "objectID": "03_shell.rjs.html#aside-visual-block",
    "href": "03_shell.rjs.html#aside-visual-block",
    "title": "Shell",
    "section": "Aside: Visual Block",
    "text": "Aside: Visual Block\n\n\n\n\n\n\nWarning\n\n\nThis is an advanced topic.\n\n\n\n\nWe introduce visual block mode\nA way to modifying multiple lines all at once.\n\nThere is also a regular “visual mode” v which I use less often."
  },
  {
    "objectID": "03_shell.rjs.html#example-1",
    "href": "03_shell.rjs.html#example-1",
    "title": "Shell",
    "section": "Example",
    "text": "Example\n\n\n\nnvim tax.py\nctrl+q or ctrl+v to enter “visual block”\n5j to move down 5 lines\nI (shift + “i”) to enter “insert block”\nType “[” to begin a list\nESC to exit “insert block”\n“[” will appear at the start of every line.\n\n\n\nBefore:\n\n\n\ntax.py\n\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85\n\n\nAfter:\n\n\n\ntax.py\n\n[1855.0\n[10367.5\n[29517.5\n[51791.5\n[111818.5\n[130578.85\n\n\nPress u to undo to practice."
  },
  {
    "objectID": "03_shell.rjs.html#aside-printing-python",
    "href": "03_shell.rjs.html#aside-printing-python",
    "title": "Shell",
    "section": "Aside: Printing Python",
    "text": "Aside: Printing Python\n\nAlternatively, you can use print() to directly print things usable as Python.\n\n\n\nCode\n\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print([cost, start, tax[1]])\n    start = tax[0]\n\n[1855.0, 0, 0.1]\n[10367.5, 18550, 0.15]\n[29517.5, 75300, 0.25]\n[51791.5, 151900, 0.28]\n[111818.5, 231450, 0.33]\n[130578.85, 413350, 0.35]"
  },
  {
    "objectID": "03_shell.rjs.html#third",
    "href": "03_shell.rjs.html#third",
    "title": "Shell",
    "section": "Third",
    "text": "Third\n\nUse points to determine intercepts\nConsider:\n\n\n# For taxpayers making more than 151900\n# They pay 51791.50, plus\n# .28 for every dollar over 151900\nbracket = [51791.5, 151900, 0.28]\n# What is the linear equation?\n\n\nWe can calculate it as follows:\n\n\nb = 51791.5 - (151900 * .28)\nb\n\n9259.499999999993"
  },
  {
    "objectID": "03_shell.rjs.html#fourth",
    "href": "03_shell.rjs.html#fourth",
    "title": "Shell",
    "section": "Fourth",
    "text": "Fourth\n\nGiven the calculated slopes and intercepts, construct a piecewise function capturing income tax.\nSomething like this:\n\n\ndef married_tax(income):\n    if (151900 &lt;= income &lt; 231450):\n        return income * .28 - 9259.5\n    # There will be more brackets of course!"
  },
  {
    "objectID": "03_shell.rjs.html#exercise-1",
    "href": "03_shell.rjs.html#exercise-1",
    "title": "Shell",
    "section": "Exercise",
    "text": "Exercise\n\nCreate two Python files:\n\nOne which calculates intercepts - Perhaps intercepts.py\nOne which uses intercepts to compute tax cost linearly. - Perhaps tax_line.py"
  },
  {
    "objectID": "03_shell.rjs.html#solution-pt.-1",
    "href": "03_shell.rjs.html#solution-pt.-1",
    "title": "Shell",
    "section": "Solution pt. 1",
    "text": "Solution pt. 1\n\n\nCode\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]\n    print(tax)"
  },
  {
    "objectID": "03_shell.rjs.html#solution-pt.-2",
    "href": "03_shell.rjs.html#solution-pt.-2",
    "title": "Shell",
    "section": "Solution pt. 2",
    "text": "Solution pt. 2\n\n\nCode\n# Generate with `intercepts` then modify with visual block mode\ntaxes = [\n    [9275, 0.1, 0.0],\n    [37650, 0.15, -463.75],\n    [91150, 0.25, -4228.75],\n    [190150, 0.28, -6963.25],\n    [413350, 0.33, -16470.75],\n    [415051, 0.35, -24737.75],\n]\n\ndef single_tax(income):\n    # Check all brackets\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    # We calculated the top bracket earlier\n    return income * .396 + -43830.05"
  },
  {
    "objectID": "01_python.html",
    "href": "01_python.html",
    "title": "Python",
    "section": "",
    "text": "Python is free,\nPython is very widely used,\nPython is flexible,\nPython is relatively easy to learn,\nand Python is quite powerful.\n\n\n\n\n\nPython is a general purpose language used for Scientific Computing.\nNot to build apps, build software, manage databases, or develop user interfaces.\nSolve scientific and mathematical problems.\n\n\n\n\nScientists often use the following:\n\nPython,\nnumpy (numerical Python),\nmatplotlib (a suite of plotting tools),\nscipy (scientific Python), and\nsympy (symbolic Python).\n\nWe’ll get to these.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#on-python",
    "href": "01_python.html#on-python",
    "title": "Python",
    "section": "",
    "text": "Python is free,\nPython is very widely used,\nPython is flexible,\nPython is relatively easy to learn,\nand Python is quite powerful.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#why-not-python",
    "href": "01_python.html#why-not-python",
    "title": "Python",
    "section": "",
    "text": "Python is a general purpose language used for Scientific Computing.\nNot to build apps, build software, manage databases, or develop user interfaces.\nSolve scientific and mathematical problems.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#python-libraries",
    "href": "01_python.html#python-libraries",
    "title": "Python",
    "section": "",
    "text": "Scientists often use the following:\n\nPython,\nnumpy (numerical Python),\nmatplotlib (a suite of plotting tools),\nscipy (scientific Python), and\nsympy (symbolic Python).\n\nWe’ll get to these.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#diving-in",
    "href": "01_python.html#diving-in",
    "title": "Python",
    "section": "Diving In",
    "text": "Diving In\n\nTaking Python as a given, we’ll:\n\nUse an example of something I helped a student with recently\nShow step-by-step how to use Python\nIntroduce a number of Python features to solve the problem more easily.\n\nThis was from an introductory physics class I believe; I don’t know the context.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#motivating-example",
    "href": "01_python.html#motivating-example",
    "title": "Python",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nRecently, I helped a student stuck on this:\n\n\\[\nf(x) =\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\]\n\nFind \\(f(x)\\) for each of the following \\(x\\) values: \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#is-this-real",
    "href": "01_python.html#is-this-real",
    "title": "Python",
    "section": "Is this “real”?",
    "text": "Is this “real”?\n\nModels income tax brackets, one of the most important drivers of human behavior in the largest economies in the world.\nWe use a simpler contrived example for now…\n\n\n\nMarginal Tax Rate\n\n\nSingle Taxable Income\n\n\nMarried Filing Jointly or Qualified Widow(er) Taxable Income\n\n\nMarried Filing Separately Taxable Income\n\n\nHead of Household Taxable Income\n\n\n\n\n10%\n\n\n$0 – $9,275\n\n\n$0 – $18,550\n\n\n$0 – $9,275\n\n\n$0 – $13,250\n\n\n\n\n15%\n\n\n$9,276 – $37,650\n\n\n$18,551 – $75,300\n\n\n$9,276 – $37,650\n\n\n$13,251 – $50,400\n\n\n\n\n25%\n\n\n$37,651 – $91,150\n\n\n$75,301 – $151,900\n\n\n$37,651 – $75,950\n\n\n$50,401 – $130,150\n\n\n\n\n28%\n\n\n$91,151 – $190,150\n\n\n$151,901 – $231,450\n\n\n$75,951 – $115,725\n\n\n$130,151 – $210,800\n\n\n\n\n33%\n\n\n$190,151 – $413,350\n\n\n$231,451 – $413,350\n\n\n$115,726 – $206,675\n\n\n$210,801 – $413,350\n\n\n\n\n35%\n\n\n$413,351 – $415,050\n\n\n$413,351 – $466,950\n\n\n$206,676 – $233,475\n\n\n$413,351 – $441,000\n\n\n\n\n39.6%\n\n\n$415,051+\n\n\n$466,951+\n\n\n$233,476+\n\n\n$441,001+",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#how-to-solve",
    "href": "01_python.html#how-to-solve",
    "title": "Python",
    "section": "How to solve?",
    "text": "How to solve?\n\nThink about how you would solve such a problem.\nWhat steps would you take?\nWhat would making solving it hard?\n\nKeep track of details?\nPerforming the arithmetic?\nAnything else?\n\nPython, in my view, is a way to solve these problems.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#python-in-action",
    "href": "01_python.html#python-in-action",
    "title": "Python",
    "section": "Python in action",
    "text": "Python in action\n\nMy preferred way to do calculation as an experienced Python user is writing code:\n\n\n\n\nMathematical expression \\[\n\\begin{cases}\n9x^2 + 5 & x &lt; 4 \\\\\n9 & 4 \\leq x \\leq 8 \\\\\n2 - x & x &gt; 8\n\\end{cases}\n\\]\n\n\n\nPython expression (code)\n\n\n9 * -1 * -1 + 5\n\n14\n\n\n\n\n\nI write x * x for \\(x^2\\) because it’s non-obvious how to write “squared” yet.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#arithmetic-operations",
    "href": "01_python.html#arithmetic-operations",
    "title": "Python",
    "section": "Arithmetic Operations",
    "text": "Arithmetic Operations\n\nIn Python, we can write many of the same arithmetic operations we use in our math and science classes.\n\n\n6 + 3\n\n9\n\n\n\n6 - 3\n\n3\n\n\n\n6 * 3\n\n18\n\n\n\n6 / 3\n\n2.0",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#wait",
    "href": "01_python.html#wait",
    "title": "Python",
    "section": "Wait?",
    "text": "Wait?\n\nUse Python? How?\nTo use Python to make this calculation, first we must install Python.\n\nIt is a program, like Firefox, MS Word or Fortnite",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#warning",
    "href": "01_python.html#warning",
    "title": "Python",
    "section": "Warning!",
    "text": "Warning!\n\nThere is a very important box to check while installing!\n\nBe careful working ahead!\nWe’ll teach how to fix not checking this box but not for a while",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#installation",
    "href": "01_python.html#installation",
    "title": "Python",
    "section": "Installation",
    "text": "Installation\n\nWe go to the offial webpage to get an installer for our computer:\n\nhttps://www.python.org/downloads/\n\nBe careful about starting it!\n\nYou can open it and check the next slide.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#add-python-to-path",
    "href": "01_python.html#add-python-to-path",
    "title": "Python",
    "section": "Add Python to PATH",
    "text": "Add Python to PATH",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#why",
    "href": "01_python.html#why",
    "title": "Python",
    "section": "Why?",
    "text": "Why?\n\nThe benefit of adding Python to path is that we can use it at\n&lt;dramatic music&gt;\nThe Command Line\n\nA text-based interface to computing resources, including its ability to do e.g. arithmetic and save notes.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#terminal",
    "href": "01_python.html#terminal",
    "title": "Python",
    "section": "Terminal",
    "text": "Terminal\n\nOn MS Windows\n\nI press Windows key, type “terminal” then press enter.\n\nOn MacOS\n\nI open Launchpad, type “terminal” then press enter.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#macos",
    "href": "01_python.html#macos",
    "title": "Python",
    "section": "MacOS",
    "text": "MacOS",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#windows",
    "href": "01_python.html#windows",
    "title": "Python",
    "section": "Windows",
    "text": "Windows",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#expression-evaluation",
    "href": "01_python.html#expression-evaluation",
    "title": "Python",
    "section": "Expression evaluation",
    "text": "Expression evaluation\n\nReturning to the terminal, we can type at the “prompt”.\nOn MacOS, perhaps a line that begins with $ and a flashing cursor\nOn Window, perhaps PS C:\\Users\\calvin&gt;\n\nPS stands for “powershell” - more latter.\nC:\\Users\\calvin is the name of a folder - more latter\n&gt; is the prompt, with a flashing cursor.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#run-python",
    "href": "01_python.html#run-python",
    "title": "Python",
    "section": "“Run” Python",
    "text": "“Run” Python\nIn the following examples, I remove line numbers to denote they are not Python code snippets.\n\nOn Windows, type python\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; python\n\n\nOn MacOS, type python3\n\n\n\nMacOS\n\n$ python3\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#see-python",
    "href": "01_python.html#see-python",
    "title": "Python",
    "section": "See Python",
    "text": "See Python\n\nYou’ll see something like this:\n\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\nTake note of the prompt!\n&gt;&gt;&gt;\nThose three are how you know it is Python, and not the Terminal, that you are working in.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#example",
    "href": "01_python.html#example",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nIf I type python at the command line\nThen 9 * -1 * -1 + 5 within Python\nIt will look like this:\n\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 9 * -1 * -1 + 5\n14\n&gt;&gt;&gt;\n\nThis is how Python shows that 9 * -1 * -1 + 5 is 14",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#recall",
    "href": "01_python.html#recall",
    "title": "Python",
    "section": "Recall",
    "text": "Recall\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n&gt;&gt;&gt; 9 * -1 * -1 + 5\n14\n&gt;&gt;&gt; 9\n9\n&gt;&gt;&gt; 9\n9\n&gt;&gt;&gt; 2 - 8\n-6\n&gt;&gt;&gt; 2 - 11\n-9\n\n\n\nThis is still quite tedious and annoying!",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#inequality-testing",
    "href": "01_python.html#inequality-testing",
    "title": "Python",
    "section": "(In)equality testing",
    "text": "(In)equality testing\n\nLike + or - which we use to calculate numbers…\nWe can use &lt; or &gt; to calculate inequalities.\nSpecifically, we see whether an inequality is True or False\n\n\n-1 &lt; 4\n\nTrue\n\n\n\n4 &lt; 4\n\nFalse",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#accomodating-keyboards",
    "href": "01_python.html#accomodating-keyboards",
    "title": "Python",
    "section": "Accomodating Keyboards",
    "text": "Accomodating Keyboards\n\nSome things aren’t super easy to type.\nI don’t have a “\\(\\leq\\)” key on my keyboard.\nCombine with = as &lt;= for “less than or equal” or “\\(\\leq\\)”\n\n\n4 &lt;= 4\n\nTrue\n\n\n\nWe can “chain” inequalities as well - one after another.\n\n\n4 &lt;= 4 &lt;= 8\n\nTrue",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#a-note",
    "href": "01_python.html#a-note",
    "title": "Python",
    "section": "A note",
    "text": "A note\n\nWe always put the equal sign = second.\n\n\n4 &lt;= 5\n\nTrue\n\n\n\n5 &gt;= 4\n\nTrue\n\n\n\nA (somewhat confusing) error if we try =&gt;\n\n&gt;&gt;&gt; 4 =&gt; 5\n  File \"&lt;stdin&gt;\", line 1\n    4 =&gt; 5\n    ^\nSyntaxError: cannot assign to literal",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#new-topics",
    "href": "01_python.html#new-topics",
    "title": "Python",
    "section": "New Topics",
    "text": "New Topics\n\nWe have now touch on two new topics:\n\nTrue and False\n\nExpressions which don’t evaluate to a number\nCalled “booleans”\n\n“Assignment”\n\nAssociated with the = sign\nDifferent from inequality testing!\n\n\nWe’ll explore both!",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#booleans",
    "href": "01_python.html#booleans",
    "title": "Python",
    "section": "Booleans",
    "text": "Booleans\n\nSometimes, a Python expression is a numerical value.\n\n\n2 + 2\n\n4\n\n\n\n7\n\n7\n\n\n\nBut it doesn’t have to be!\n\n\n2 &lt; 2\n\nFalse",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#if",
    "href": "01_python.html#if",
    "title": "Python",
    "section": "If",
    "text": "If\n\nBooleans are mostly useful for writing if statements.\n\nThese are multiline expressions in Python.\n\nTo see the result of multi-line expression, we have to print the result…\n\n\nif (1 &lt;= 1):\n    print(2 + 2)\n\n4\n\n\n\nif (1 &lt; 1):\n    print(2 + 2)",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#piecewise",
    "href": "01_python.html#piecewise",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can see the immediate use of this in a piecewise function!\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\nif (-1 &lt; 4):\n    print(9 * -1 * -1 + 5)\n\n14\n\n\n\nOr least part of one…\n\n\nif (4 &lt; 4):\n    print(9 * 4 * 4 + 5)\n\n\nUh oh!",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#else",
    "href": "01_python.html#else",
    "title": "Python",
    "section": "Else",
    "text": "Else\n\nOftentimes, we use if with else\n\n\nif (1 &lt; 1):\n    print(\"1 is less than 1\")\nelse:\n    print(\"1 is not less than 1\")\n\n1 is not less than 1",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#elif",
    "href": "01_python.html#elif",
    "title": "Python",
    "section": "Elif",
    "text": "Elif\n\nIf we have more than two options, we can place a special elif in the middle.\n\n\n\n\nif (1 &lt; 1):\n    print(\"1 is less than 1\")\nelif (1 &gt; 1):\n    print(\"1 is greater than 1\")\nelse:\n    print(\"1 is equal to 1\")\n\n1 is equal to 1\n\n\n\n\nif (2 &lt; 1):\n    print(\"2 is less than 1\")\nelif (2 &gt; 1):\n    print(\"2 is greater than 1\")\nelse:\n    print(\"2 is equal to 1\")\n\n2 is greater than 1\n\n\n\n\n\nBy the way, it is extremely obnoxious to manually type 2 in 5 different places",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#assignment",
    "href": "01_python.html#assignment",
    "title": "Python",
    "section": "Assignment",
    "text": "Assignment\n\nWe can also assign variables!\n\nI call this single-equals assignment\nUse a single equals sign = and some variable name, like x\n\n\n\n\n\nx = 1\nif (x &lt; 1):\n    print(\"x is less than 1\")\nelif (x &gt; 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n\nx is equal to 1\n\n\n\n\nx = 2\nif (x &lt; 1):\n    print(\"x is less than 1\")\nelif (x &gt; 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n\nx is greater than 1",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#double-equals-equality",
    "href": "01_python.html#double-equals-equality",
    "title": "Python",
    "section": "Double equals equality",
    "text": "Double equals equality\n\nI call it single-equals assignment because sometimes we check if a variable is precisely equal to some value.\nThat is somewhat confusingly done with == double equals equality test.\n\n\n\n\nx = 1\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n\nx is equal to 1\n\n\n\n\nx = 2\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n\nx is not equal to 1",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#double-exponentation",
    "href": "01_python.html#double-exponentation",
    "title": "Python",
    "section": "Double ** Exponentation",
    "text": "Double ** Exponentation\n\nDoubling is used in a few other cases.\nDouble asterisk ** is exponentiation.\n\n\n5 ** 2\n\n25",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#piecewise-1",
    "href": "01_python.html#piecewise-1",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can finally write the piecewise expression!\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\nx = 11\nif (x &lt; 4):\n    print(9 * x ** 2 + 5)\nelif (4 &lt;= x &lt;= 8):\n    print(9)\nelif (x &gt; 8):\n    print(2 - x)\n\n-9",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#recycle",
    "href": "01_python.html#recycle",
    "title": "Python",
    "section": "Recycle",
    "text": "Recycle\n\nIt is still extremely tedious to either:\n\nCopy-paste, or\nType more than once.\n\nAlso very annoying/difficult to write them many lines without error!\nWe introduce the def keyword to define functions\nA way to reuse code we have already written.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#def",
    "href": "01_python.html#def",
    "title": "Python",
    "section": "def",
    "text": "def\n\ndef double(x):\n    print(x + x)\n\n\ndef + some function name + ( + some variable name + ):\n\n\ndouble(7)\n\n14\n\n\n\n“Call” functions the same way we call print - with parens.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#return",
    "href": "01_python.html#return",
    "title": "Python",
    "section": "return",
    "text": "return\n\nIt is more common to use return than print in a function.\nWhen we call a function, we can think of it as expression with some value.\nThat value is defined by the value that is return.\n\n\n\n\ndef six_gt_five_return():\n    print(True)\n\n\nif (six_gt_five_return()):\n    print(\"it is\")\n\nTrue\n\n\n\n\ndef six_gt_five_print():\n    return True\n\n\nif (six_gt_five_print()):\n    print(\"it is\")\n\nit is",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#example-1",
    "href": "01_python.html#example-1",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nSuppose an interest rate doubles our savings every ~7 years.\nHow much savings in 14 years?\n\n\nsavings = 10\nsavings = double(savings)\nsavings\n\n20",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#use-return",
    "href": "01_python.html#use-return",
    "title": "Python",
    "section": "Use return",
    "text": "Use return\n\ndef double(x):\n    return x + x\n\n\nNow, double(savings) becomes equal to x + x\n\n\nsavings = 10\nsavings = double(savings)\nsavings\n\n20\n\n\n\ndouble(savings)\n\n40\n\n\n\nOr even\n\n\ndouble(double(10))\n\n40",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#piecewise-2",
    "href": "01_python.html#piecewise-2",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can finally write the piecewise function (was: expression)!\n\nFunction: use many times in many expressions\nExpression: evaluate once and get one answer\n\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\npiecewise(4)\n\n9",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#tedium",
    "href": "01_python.html#tedium",
    "title": "Python",
    "section": "Tedium",
    "text": "Tedium\n\nThis is still quite tedious.\n\n\npiecewise(-1)\n\n14\n\n\n\npiecewise(4)\n\n9\n\n\n\npiecewise(5)\n\n9\n\n\n\npiecewise(8)\n\n9\n\n\n\npiecewise(11)\n\n-9",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#sets",
    "href": "01_python.html#sets",
    "title": "Python",
    "section": "Sets",
    "text": "Sets\n\nThis is a set:\n\n\\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\nA set is an unordered collection of elements.\n\nIn this case, elements are integers - whole numbers.\n\nPython can also recognize sets!\n\n\n{-1, 4, 5, 8, 11}\n\n{-1, 4, 5, 8, 11}",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#type",
    "href": "01_python.html#type",
    "title": "Python",
    "section": "Type",
    "text": "Type\n\nTo be sure that is, in fact, a set, we use the helpful built-in type() to ask Python.\n\n\ns = {-1, 4, 5, 8, 11}\ntype(s)\n\nset\n\n\n\nWe have also worked with integers.\n\n\ntype(1)\n\nint\n\n\n\nAnd booleans - True and False values.\n\n\ntype(1 == 1)\n\nbool",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#loops",
    "href": "01_python.html#loops",
    "title": "Python",
    "section": "Loops",
    "text": "Loops\n\nWith a set, do something to each element\nIn Python, use a for loop:\n\nThe for keyword\nThe name to refer to an element, like e or x\nThe in keyword\nThe set/collection (or its variable name)\nThe : colon special character\nAn indented new line of code",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#example-2",
    "href": "01_python.html#example-2",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nfor element in collection\n\ndo thing\n\n\n\nfor e in {-1, 4, 5, 8, 11}:\n    print(piecewise(e))\n\n9\n9\n9\n-9\n14\n\n\n\nWhat do you see?",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#example-3",
    "href": "01_python.html#example-3",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nWhat if we just try to print the elements?\n\nEasier to think about!\n\n\n\nfor e in {-1, 4, 5, 8, 11}:\n    print(e)\n\n4\n5\n8\n11\n-1\n\n\n\nWhat do you see?",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#ordering",
    "href": "01_python.html#ordering",
    "title": "Python",
    "section": "Ordering",
    "text": "Ordering\n\nRecall: “A set is an unordered collection of elements”.\nWe need to put things in order!\nThe most common way to do this in Python is with a list.\nAlmost the same as sets, just use “boxy brackets” []\n\n\ntype([1,2,3])\n\nlist",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#example-4",
    "href": "01_python.html#example-4",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nfor element in collection\n\ndo thing\n\n\n\nfor e in [-1, 4, 5, 8, 11]:\n    print(piecewise(e))\n\n14\n9\n9\n9\n-9\n\n\n\nWhat do you see?",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#seeing-lists",
    "href": "01_python.html#seeing-lists",
    "title": "Python",
    "section": "Seeing lists",
    "text": "Seeing lists\n\nWe can also use lists to print multiple values!\n\nVery helpful for keeping track of things!\n\n\n\nfor e in [-1, 4, 5, 8, 11]:\n    print([e, piecewise(e)])\n\n[-1, 14]\n[4, 9]\n[5, 9]\n[8, 9]\n[11, -9]",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#updating-lists",
    "href": "01_python.html#updating-lists",
    "title": "Python",
    "section": "Updating lists",
    "text": "Updating lists\n\nEach element is a lot like a variable.\n\nThey just have a name and number, use []\nThe initial element is number 0 (not 1)\n\n\n\nxs = [-1, 4, 5, 8, 11]\nxs[0]\n\n-1\n\n\n\nAnd like variables, we can assign a value with =\n\n\nxs[0] = -2\nxs\n\n[-2, 4, 5, 8, 11]",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#adding-lists",
    "href": "01_python.html#adding-lists",
    "title": "Python",
    "section": "Adding lists",
    "text": "Adding lists\n\nLists also helpfully support addition with +\n\n\n[-1] + [4, 5, 8, 11]\n\n[-1, 4, 5, 8, 11]\n\n\n\nWe often use this to make new lists.\n\n\nresult = []\nfor e in [-1, 4, 5, 8, 11]:\n    result = result + [piecewise(e)]\nresult\n\n[14, 9, 9, 9, -9]\n\n\n\nThis pattern also works with numbers!\n\n\nx = 0 \nx = x + 1\nx\n\n1",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#income-tax",
    "href": "01_python.html#income-tax",
    "title": "Python",
    "section": "Income tax",
    "text": "Income tax\n\nRecall the example of a piecewise function:\n\n\n\nMarginal Tax Rate\n\n\nSingle Taxable Income\n\n\nMarried Filing Jointly or Qualified Widow(er) Taxable Income\n\n\nMarried Filing Separately Taxable Income\n\n\nHead of Household Taxable Income\n\n\n\n\n10%\n\n\n$0 – $9,275\n\n\n$0 – $18,550\n\n\n$0 – $9,275\n\n\n$0 – $13,250\n\n\n\n\n15%\n\n\n$9,276 – $37,650\n\n\n$18,551 – $75,300\n\n\n$9,276 – $37,650\n\n\n$13,251 – $50,400\n\n\n\n\n25%\n\n\n$37,651 – $91,150\n\n\n$75,301 – $151,900\n\n\n$37,651 – $75,950\n\n\n$50,401 – $130,150\n\n\n\n\n28%\n\n\n$91,151 – $190,150\n\n\n$151,901 – $231,450\n\n\n$75,951 – $115,725\n\n\n$130,151 – $210,800\n\n\n\n\n33%\n\n\n$190,151 – $413,350\n\n\n$231,451 – $413,350\n\n\n$115,726 – $206,675\n\n\n$210,801 – $413,350\n\n\n\n\n35%\n\n\n$413,351 – $415,050\n\n\n$413,351 – $466,950\n\n\n$206,676 – $233,475\n\n\n$413,351 – $441,000\n\n\n\n\n39.6%\n\n\n$415,051+\n\n\n$466,951+\n\n\n$233,476+\n\n\n$441,001+",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#singles-only",
    "href": "01_python.html#singles-only",
    "title": "Python",
    "section": "Singles only…",
    "text": "Singles only…\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#motivating-example-1",
    "href": "01_python.html#motivating-example-1",
    "title": "Python",
    "section": "Motivating example",
    "text": "Motivating example\n\nHow much would a single making 400k pay?\n\n\n\n\n10% on 9275\n15% on 37650 - 9275\n25% on 91150 - 37650\n28% on 190150 - 91150\n33% on 400000 - 190150\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#sum-it-up",
    "href": "01_python.html#sum-it-up",
    "title": "Python",
    "section": "Sum it up!",
    "text": "Sum it up!\n\nWatch out for order-of-operations!\n\n\n\n\n10% on 9275\n15% on 37650 - 9275\n25% on 91150 - 37650\n28% on 190150 - 91150\n33% on 400000 - 190150\n\n\n\nx = .10 * 9275\ny = .15 * (37650 - 9275)\nz = .25 * (91150 - 37650)\nr = .28 * (190150 - 91150)\ns = .33 * (400000 - 190150)\nx + y + z + r + s\n\n115529.25",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#add-as-you-go",
    "href": "01_python.html#add-as-you-go",
    "title": "Python",
    "section": "Add as you go",
    "text": "Add as you go\n\nWe may set a variable to an expression over that variable\n\nI think of this as an “old” version of the variable on the right side of the equal sign.\n\n\n\n\n\nx = .10 * 9275\nx = x + .15 * (37650 - 9275)\nx = x + .25 * (91150 - 37650)\nx = x + .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25\n\n\n\n\nx = .10 * 9275\ny = .15 * (37650 - 9275)\nz = .25 * (91150 - 37650)\nr = .28 * (190150 - 91150)\ns = .33 * (400000 - 190150)\nx + y + z + r + s\n\n115529.25",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#assign-update",
    "href": "01_python.html#assign-update",
    "title": "Python",
    "section": "Assign-update",
    "text": "Assign-update\n\nWe may use an “assignment operator” +=\n\nReassign a variable based on the result of an arithmetic operation.\n\n\n\n\n\nx = .10 * 9275\nx = x + .15 * (37650 - 9275)\nx = x + .25 * (91150 - 37650)\nx = x + .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25\n\n\n\n\nx = .10 * 9275\nx += .15 * (37650 - 9275)\nx += .25 * (91150 - 37650)\nx += .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#exercise-1",
    "href": "01_python.html#exercise-1",
    "title": "Python",
    "section": "Exercise",
    "text": "Exercise\n\n\n\nWrite function\ndef single_tax(pay):\nReturn tax cost.\n\nReturn not print!\n\nBonus: Also write single_tax_rate which returns the percent tax rate at some income level.\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#solution",
    "href": "01_python.html#solution",
    "title": "Python",
    "section": "Solution",
    "text": "Solution\n\n\n\nSpoiler alert!\n\n\n\nCode\ndef single_tax(pay):\n    tax = 0\n    if pay &gt; 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay &gt; 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay &gt; 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay &gt; 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay &gt; 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay &gt; 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n\n\n\n\nThe solution gives the following results!\n\n\n[\n    single_tax(100000),\n    single_tax(100000),\n    single_tax(200000),\n    single_tax(300000),\n    single_tax(400000),\n]\n\n[21036.75, 21036.75, 49529.25, 82529.25, 115529.25]\n\n\n\n115529.25 matches our calculations.",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#challenge-problem",
    "href": "01_python.html#challenge-problem",
    "title": "Python",
    "section": "Challenge Problem",
    "text": "Challenge Problem\n\nCalculate at what income does the tax rate reach the second highest marginal tax rate of 35%?\n\nThat is, at what pay does tax == pay * .35\n\n\n\n\nCode\nm = .396\nb = 0\nb += (415050 - 413350) * .35\nb += (413350 - 190150) * .33\nb += (190150 - 91150) * .28\nb += (91150 - 37650) * .25\nb += (37650 - 9275) * .15\nb += 9275 * .1\n(m * -415050 + b)/(.35 - m)\n\n\n952827.173913043",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.html#bonus-solution",
    "href": "01_python.html#bonus-solution",
    "title": "Python",
    "section": "Bonus Solution",
    "text": "Bonus Solution\n\nsingle_tax with loops\n\n\n\nCode\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1",
    "crumbs": [
      "Python"
    ]
  },
  {
    "objectID": "01_python.rjs.html#on-python",
    "href": "01_python.rjs.html#on-python",
    "title": "Python",
    "section": "On Python",
    "text": "On Python\n\nPython is free,\nPython is very widely used,\nPython is flexible,\nPython is relatively easy to learn,\nand Python is quite powerful."
  },
  {
    "objectID": "01_python.rjs.html#why-not-python",
    "href": "01_python.rjs.html#why-not-python",
    "title": "Python",
    "section": "Why not Python?",
    "text": "Why not Python?\n\nPython is a general purpose language used for Scientific Computing.\nNot to build apps, build software, manage databases, or develop user interfaces.\nSolve scientific and mathematical problems."
  },
  {
    "objectID": "01_python.rjs.html#python-libraries",
    "href": "01_python.rjs.html#python-libraries",
    "title": "Python",
    "section": "Python libraries",
    "text": "Python libraries\nScientists often use the following:\n\nPython,\nnumpy (numerical Python),\nmatplotlib (a suite of plotting tools),\nscipy (scientific Python), and\nsympy (symbolic Python).\n\nWe’ll get to these."
  },
  {
    "objectID": "01_python.rjs.html#diving-in",
    "href": "01_python.rjs.html#diving-in",
    "title": "Python",
    "section": "Diving In",
    "text": "Diving In\n\nTaking Python as a given, we’ll:\n\nUse an example of something I helped a student with recently\nShow step-by-step how to use Python\nIntroduce a number of Python features to solve the problem more easily.\n\nThis was from an introductory physics class I believe; I don’t know the context."
  },
  {
    "objectID": "01_python.rjs.html#motivating-example",
    "href": "01_python.rjs.html#motivating-example",
    "title": "Python",
    "section": "Motivating Example",
    "text": "Motivating Example\n\nRecently, I helped a student stuck on this:\n\n\\[\nf(x) =\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\]\n\nFind \\(f(x)\\) for each of the following \\(x\\) values: \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]"
  },
  {
    "objectID": "01_python.rjs.html#is-this-real",
    "href": "01_python.rjs.html#is-this-real",
    "title": "Python",
    "section": "Is this “real”?",
    "text": "Is this “real”?\n\nModels income tax brackets, one of the most important drivers of human behavior in the largest economies in the world.\nWe use a simpler contrived example for now…\n\n\n\nMarginal Tax Rate\n\n\nSingle Taxable Income\n\n\nMarried Filing Jointly or Qualified Widow(er) Taxable Income\n\n\nMarried Filing Separately Taxable Income\n\n\nHead of Household Taxable Income\n\n\n\n\n10%\n\n\n$0 – $9,275\n\n\n$0 – $18,550\n\n\n$0 – $9,275\n\n\n$0 – $13,250\n\n\n\n\n15%\n\n\n$9,276 – $37,650\n\n\n$18,551 – $75,300\n\n\n$9,276 – $37,650\n\n\n$13,251 – $50,400\n\n\n\n\n25%\n\n\n$37,651 – $91,150\n\n\n$75,301 – $151,900\n\n\n$37,651 – $75,950\n\n\n$50,401 – $130,150\n\n\n\n\n28%\n\n\n$91,151 – $190,150\n\n\n$151,901 – $231,450\n\n\n$75,951 – $115,725\n\n\n$130,151 – $210,800\n\n\n\n\n33%\n\n\n$190,151 – $413,350\n\n\n$231,451 – $413,350\n\n\n$115,726 – $206,675\n\n\n$210,801 – $413,350\n\n\n\n\n35%\n\n\n$413,351 – $415,050\n\n\n$413,351 – $466,950\n\n\n$206,676 – $233,475\n\n\n$413,351 – $441,000\n\n\n\n\n39.6%\n\n\n$415,051+\n\n\n$466,951+\n\n\n$233,476+\n\n\n$441,001+"
  },
  {
    "objectID": "01_python.rjs.html#how-to-solve",
    "href": "01_python.rjs.html#how-to-solve",
    "title": "Python",
    "section": "How to solve?",
    "text": "How to solve?\n\nThink about how you would solve such a problem.\nWhat steps would you take?\nWhat would making solving it hard?\n\nKeep track of details?\nPerforming the arithmetic?\nAnything else?\n\nPython, in my view, is a way to solve these problems."
  },
  {
    "objectID": "01_python.rjs.html#python-in-action",
    "href": "01_python.rjs.html#python-in-action",
    "title": "Python",
    "section": "Python in action",
    "text": "Python in action\n\nMy preferred way to do calculation as an experienced Python user is writing code:\n\n\n\n\nMathematical expression \\[\n\\begin{cases}\n9x^2 + 5 & x &lt; 4 \\\\\n9 & 4 \\leq x \\leq 8 \\\\\n2 - x & x &gt; 8\n\\end{cases}\n\\]\n\n\n\nPython expression (code)\n\n\n9 * -1 * -1 + 5\n\n14\n\n\n\n\nI write x * x for \\(x^2\\) because it’s non-obvious how to write “squared” yet."
  },
  {
    "objectID": "01_python.rjs.html#arithmetic-operations",
    "href": "01_python.rjs.html#arithmetic-operations",
    "title": "Python",
    "section": "Arithmetic Operations",
    "text": "Arithmetic Operations\n\nIn Python, we can write many of the same arithmetic operations we use in our math and science classes.\n\n\n6 + 3\n\n9\n\n\n\n6 - 3\n\n3\n\n\n\n6 * 3\n\n18\n\n\n\n6 / 3\n\n2.0"
  },
  {
    "objectID": "01_python.rjs.html#wait",
    "href": "01_python.rjs.html#wait",
    "title": "Python",
    "section": "Wait?",
    "text": "Wait?\n\nUse Python? How?\nTo use Python to make this calculation, first we must install Python.\n\nIt is a program, like Firefox, MS Word or Fortnite"
  },
  {
    "objectID": "01_python.rjs.html#warning",
    "href": "01_python.rjs.html#warning",
    "title": "Python",
    "section": "Warning!",
    "text": "Warning!\n\nThere is a very important box to check while installing!\n\nBe careful working ahead!\nWe’ll teach how to fix not checking this box but not for a while"
  },
  {
    "objectID": "01_python.rjs.html#installation",
    "href": "01_python.rjs.html#installation",
    "title": "Python",
    "section": "Installation",
    "text": "Installation\n\nWe go to the offial webpage to get an installer for our computer:\n\nhttps://www.python.org/downloads/\n\nBe careful about starting it!\n\nYou can open it and check the next slide."
  },
  {
    "objectID": "01_python.rjs.html#add-python-to-path",
    "href": "01_python.rjs.html#add-python-to-path",
    "title": "Python",
    "section": "Add Python to PATH",
    "text": "Add Python to PATH"
  },
  {
    "objectID": "01_python.rjs.html#why",
    "href": "01_python.rjs.html#why",
    "title": "Python",
    "section": "Why?",
    "text": "Why?\n\nThe benefit of adding Python to path is that we can use it at\n&lt;dramatic music&gt;\nThe Command Line\n\nA text-based interface to computing resources, including its ability to do e.g. arithmetic and save notes."
  },
  {
    "objectID": "01_python.rjs.html#terminal",
    "href": "01_python.rjs.html#terminal",
    "title": "Python",
    "section": "Terminal",
    "text": "Terminal\n\nOn MS Windows\n\nI press Windows key, type “terminal” then press enter.\n\nOn MacOS\n\nI open Launchpad, type “terminal” then press enter."
  },
  {
    "objectID": "01_python.rjs.html#macos",
    "href": "01_python.rjs.html#macos",
    "title": "Python",
    "section": "MacOS",
    "text": "MacOS"
  },
  {
    "objectID": "01_python.rjs.html#windows",
    "href": "01_python.rjs.html#windows",
    "title": "Python",
    "section": "Windows",
    "text": "Windows"
  },
  {
    "objectID": "01_python.rjs.html#expression-evaluation",
    "href": "01_python.rjs.html#expression-evaluation",
    "title": "Python",
    "section": "Expression evaluation",
    "text": "Expression evaluation\n\nReturning to the terminal, we can type at the “prompt”.\nOn MacOS, perhaps a line that begins with $ and a flashing cursor\nOn Window, perhaps PS C:\\Users\\calvin&gt;\n\nPS stands for “powershell” - more latter.\nC:\\Users\\calvin is the name of a folder - more latter\n&gt; is the prompt, with a flashing cursor."
  },
  {
    "objectID": "01_python.rjs.html#run-python",
    "href": "01_python.rjs.html#run-python",
    "title": "Python",
    "section": "“Run” Python",
    "text": "“Run” Python\nIn the following examples, I remove line numbers to denote they are not Python code snippets.\n\nOn Windows, type python\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; python\n\n\nOn MacOS, type python3\n\n\n\nMacOS\n\n$ python3\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key."
  },
  {
    "objectID": "01_python.rjs.html#see-python",
    "href": "01_python.rjs.html#see-python",
    "title": "Python",
    "section": "See Python",
    "text": "See Python\n\nYou’ll see something like this:\n\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\nTake note of the prompt!\n&gt;&gt;&gt;\nThose three are how you know it is Python, and not the Terminal, that you are working in."
  },
  {
    "objectID": "01_python.rjs.html#example",
    "href": "01_python.rjs.html#example",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nIf I type python at the command line\nThen 9 * -1 * -1 + 5 within Python\nIt will look like this:\n\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; 9 * -1 * -1 + 5\n14\n&gt;&gt;&gt;\n\nThis is how Python shows that 9 * -1 * -1 + 5 is 14"
  },
  {
    "objectID": "01_python.rjs.html#recall",
    "href": "01_python.rjs.html#recall",
    "title": "Python",
    "section": "Recall",
    "text": "Recall\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n&gt;&gt;&gt; 9 * -1 * -1 + 5\n14\n&gt;&gt;&gt; 9\n9\n&gt;&gt;&gt; 9\n9\n&gt;&gt;&gt; 2 - 8\n-6\n&gt;&gt;&gt; 2 - 11\n-9\n\n\nThis is still quite tedious and annoying!"
  },
  {
    "objectID": "01_python.rjs.html#inequality-testing",
    "href": "01_python.rjs.html#inequality-testing",
    "title": "Python",
    "section": "(In)equality testing",
    "text": "(In)equality testing\n\nLike + or - which we use to calculate numbers…\nWe can use &lt; or &gt; to calculate inequalities.\nSpecifically, we see whether an inequality is True or False\n\n\n-1 &lt; 4\n\nTrue\n\n\n\n4 &lt; 4\n\nFalse"
  },
  {
    "objectID": "01_python.rjs.html#accomodating-keyboards",
    "href": "01_python.rjs.html#accomodating-keyboards",
    "title": "Python",
    "section": "Accomodating Keyboards",
    "text": "Accomodating Keyboards\n\nSome things aren’t super easy to type.\nI don’t have a “\\(\\leq\\)” key on my keyboard.\nCombine with = as &lt;= for “less than or equal” or “\\(\\leq\\)”\n\n\n4 &lt;= 4\n\nTrue\n\n\n\nWe can “chain” inequalities as well - one after another.\n\n\n4 &lt;= 4 &lt;= 8\n\nTrue"
  },
  {
    "objectID": "01_python.rjs.html#a-note",
    "href": "01_python.rjs.html#a-note",
    "title": "Python",
    "section": "A note",
    "text": "A note\n\nWe always put the equal sign = second.\n\n\n4 &lt;= 5\n\nTrue\n\n\n\n5 &gt;= 4\n\nTrue\n\n\n\nA (somewhat confusing) error if we try =&gt;\n\n&gt;&gt;&gt; 4 =&gt; 5\n  File \"&lt;stdin&gt;\", line 1\n    4 =&gt; 5\n    ^\nSyntaxError: cannot assign to literal"
  },
  {
    "objectID": "01_python.rjs.html#new-topics",
    "href": "01_python.rjs.html#new-topics",
    "title": "Python",
    "section": "New Topics",
    "text": "New Topics\n\nWe have now touch on two new topics:\n\nTrue and False\n\nExpressions which don’t evaluate to a number\nCalled “booleans”\n\n“Assignment”\n\nAssociated with the = sign\nDifferent from inequality testing!\n\n\nWe’ll explore both!"
  },
  {
    "objectID": "01_python.rjs.html#booleans",
    "href": "01_python.rjs.html#booleans",
    "title": "Python",
    "section": "Booleans",
    "text": "Booleans\n\nSometimes, a Python expression is a numerical value.\n\n\n2 + 2\n\n4\n\n\n\n7\n\n7\n\n\n\nBut it doesn’t have to be!\n\n\n2 &lt; 2\n\nFalse"
  },
  {
    "objectID": "01_python.rjs.html#if",
    "href": "01_python.rjs.html#if",
    "title": "Python",
    "section": "If",
    "text": "If\n\nBooleans are mostly useful for writing if statements.\n\nThese are multiline expressions in Python.\n\nTo see the result of multi-line expression, we have to print the result…\n\n\nif (1 &lt;= 1):\n    print(2 + 2)\n\n4\n\n\n\nif (1 &lt; 1):\n    print(2 + 2)"
  },
  {
    "objectID": "01_python.rjs.html#piecewise",
    "href": "01_python.rjs.html#piecewise",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can see the immediate use of this in a piecewise function!\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\nif (-1 &lt; 4):\n    print(9 * -1 * -1 + 5)\n\n14\n\n\n\nOr least part of one…\n\n\nif (4 &lt; 4):\n    print(9 * 4 * 4 + 5)\n\n\nUh oh!"
  },
  {
    "objectID": "01_python.rjs.html#else",
    "href": "01_python.rjs.html#else",
    "title": "Python",
    "section": "Else",
    "text": "Else\n\nOftentimes, we use if with else\n\n\nif (1 &lt; 1):\n    print(\"1 is less than 1\")\nelse:\n    print(\"1 is not less than 1\")\n\n1 is not less than 1"
  },
  {
    "objectID": "01_python.rjs.html#elif",
    "href": "01_python.rjs.html#elif",
    "title": "Python",
    "section": "Elif",
    "text": "Elif\n\nIf we have more than two options, we can place a special elif in the middle.\n\n\n\n\nif (1 &lt; 1):\n    print(\"1 is less than 1\")\nelif (1 &gt; 1):\n    print(\"1 is greater than 1\")\nelse:\n    print(\"1 is equal to 1\")\n\n1 is equal to 1\n\n\n\n\nif (2 &lt; 1):\n    print(\"2 is less than 1\")\nelif (2 &gt; 1):\n    print(\"2 is greater than 1\")\nelse:\n    print(\"2 is equal to 1\")\n\n2 is greater than 1\n\n\n\n\nBy the way, it is extremely obnoxious to manually type 2 in 5 different places"
  },
  {
    "objectID": "01_python.rjs.html#assignment",
    "href": "01_python.rjs.html#assignment",
    "title": "Python",
    "section": "Assignment",
    "text": "Assignment\n\nWe can also assign variables!\n\nI call this single-equals assignment\nUse a single equals sign = and some variable name, like x\n\n\n\n\n\nx = 1\nif (x &lt; 1):\n    print(\"x is less than 1\")\nelif (x &gt; 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n\nx is equal to 1\n\n\n\n\nx = 2\nif (x &lt; 1):\n    print(\"x is less than 1\")\nelif (x &gt; 1):\n    print(\"x is greater than 1\")\nelse:\n    print(\"x is equal to 1\")\n\nx is greater than 1"
  },
  {
    "objectID": "01_python.rjs.html#double-equals-equality",
    "href": "01_python.rjs.html#double-equals-equality",
    "title": "Python",
    "section": "Double equals equality",
    "text": "Double equals equality\n\nI call it single-equals assignment because sometimes we check if a variable is precisely equal to some value.\nThat is somewhat confusingly done with == double equals equality test.\n\n\n\n\nx = 1\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n\nx is equal to 1\n\n\n\n\nx = 2\nif (x == 1):\n    print(\"x is equal to 1\")\nelse:\n    print(\"x is not equal to 1\")\n\nx is not equal to 1"
  },
  {
    "objectID": "01_python.rjs.html#double-exponentation",
    "href": "01_python.rjs.html#double-exponentation",
    "title": "Python",
    "section": "Double ** Exponentation",
    "text": "Double ** Exponentation\n\nDoubling is used in a few other cases.\nDouble asterisk ** is exponentiation.\n\n\n5 ** 2\n\n25"
  },
  {
    "objectID": "01_python.rjs.html#piecewise-1",
    "href": "01_python.rjs.html#piecewise-1",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can finally write the piecewise expression!\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\nx = 11\nif (x &lt; 4):\n    print(9 * x ** 2 + 5)\nelif (4 &lt;= x &lt;= 8):\n    print(9)\nelif (x &gt; 8):\n    print(2 - x)\n\n-9"
  },
  {
    "objectID": "01_python.rjs.html#recycle",
    "href": "01_python.rjs.html#recycle",
    "title": "Python",
    "section": "Recycle",
    "text": "Recycle\n\nIt is still extremely tedious to either:\n\nCopy-paste, or\nType more than once.\n\nAlso very annoying/difficult to write them many lines without error!\nWe introduce the def keyword to define functions\nA way to reuse code we have already written."
  },
  {
    "objectID": "01_python.rjs.html#def",
    "href": "01_python.rjs.html#def",
    "title": "Python",
    "section": "def",
    "text": "def\n\ndef double(x):\n    print(x + x)\n\n\ndef + some function name + ( + some variable name + ):\n\n\ndouble(7)\n\n14\n\n\n\n“Call” functions the same way we call print - with parens."
  },
  {
    "objectID": "01_python.rjs.html#return",
    "href": "01_python.rjs.html#return",
    "title": "Python",
    "section": "return",
    "text": "return\n\nIt is more common to use return than print in a function.\nWhen we call a function, we can think of it as expression with some value.\nThat value is defined by the value that is return.\n\n\n\n\ndef six_gt_five_return():\n    print(True)\n\n\nif (six_gt_five_return()):\n    print(\"it is\")\n\nTrue\n\n\n\n\ndef six_gt_five_print():\n    return True\n\n\nif (six_gt_five_print()):\n    print(\"it is\")\n\nit is"
  },
  {
    "objectID": "01_python.rjs.html#example-1",
    "href": "01_python.rjs.html#example-1",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nSuppose an interest rate doubles our savings every ~7 years.\nHow much savings in 14 years?\n\n\nsavings = 10\nsavings = double(savings)\nsavings\n\n20"
  },
  {
    "objectID": "01_python.rjs.html#use-return",
    "href": "01_python.rjs.html#use-return",
    "title": "Python",
    "section": "Use return",
    "text": "Use return\n\ndef double(x):\n    return x + x\n\n\nNow, double(savings) becomes equal to x + x\n\n\nsavings = 10\nsavings = double(savings)\nsavings\n\n20\n\n\n\ndouble(savings)\n\n40\n\n\n\nOr even\n\n\ndouble(double(10))\n\n40"
  },
  {
    "objectID": "01_python.rjs.html#piecewise-2",
    "href": "01_python.rjs.html#piecewise-2",
    "title": "Python",
    "section": "Piecewise",
    "text": "Piecewise\n\nWe can finally write the piecewise function (was: expression)!\n\nFunction: use many times in many expressions\nExpression: evaluate once and get one answer\n\n\n\n\n\\[\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\] \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\npiecewise(4)\n\n9"
  },
  {
    "objectID": "01_python.rjs.html#tedium",
    "href": "01_python.rjs.html#tedium",
    "title": "Python",
    "section": "Tedium",
    "text": "Tedium\n\nThis is still quite tedious.\n\n\npiecewise(-1)\n\n14\n\n\n\npiecewise(4)\n\n9\n\n\n\npiecewise(5)\n\n9\n\n\n\npiecewise(8)\n\n9\n\n\n\npiecewise(11)\n\n-9"
  },
  {
    "objectID": "01_python.rjs.html#sets",
    "href": "01_python.rjs.html#sets",
    "title": "Python",
    "section": "Sets",
    "text": "Sets\n\nThis is a set:\n\n\\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\nA set is an unordered collection of elements.\n\nIn this case, elements are integers - whole numbers.\n\nPython can also recognize sets!\n\n\n{-1, 4, 5, 8, 11}\n\n{-1, 4, 5, 8, 11}"
  },
  {
    "objectID": "01_python.rjs.html#type",
    "href": "01_python.rjs.html#type",
    "title": "Python",
    "section": "Type",
    "text": "Type\n\nTo be sure that is, in fact, a set, we use the helpful built-in type() to ask Python.\n\n\ns = {-1, 4, 5, 8, 11}\ntype(s)\n\nset\n\n\n\nWe have also worked with integers.\n\n\ntype(1)\n\nint\n\n\n\nAnd booleans - True and False values.\n\n\ntype(1 == 1)\n\nbool"
  },
  {
    "objectID": "01_python.rjs.html#loops",
    "href": "01_python.rjs.html#loops",
    "title": "Python",
    "section": "Loops",
    "text": "Loops\n\nWith a set, do something to each element\nIn Python, use a for loop:\n\nThe for keyword\nThe name to refer to an element, like e or x\nThe in keyword\nThe set/collection (or its variable name)\nThe : colon special character\nAn indented new line of code"
  },
  {
    "objectID": "01_python.rjs.html#example-2",
    "href": "01_python.rjs.html#example-2",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nfor element in collection\n\ndo thing\n\n\n\nfor e in {-1, 4, 5, 8, 11}:\n    print(piecewise(e))\n\n9\n9\n9\n-9\n14\n\n\n\nWhat do you see?"
  },
  {
    "objectID": "01_python.rjs.html#example-3",
    "href": "01_python.rjs.html#example-3",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nWhat if we just try to print the elements?\n\nEasier to think about!\n\n\n\nfor e in {-1, 4, 5, 8, 11}:\n    print(e)\n\n4\n5\n8\n11\n-1\n\n\n\nWhat do you see?"
  },
  {
    "objectID": "01_python.rjs.html#ordering",
    "href": "01_python.rjs.html#ordering",
    "title": "Python",
    "section": "Ordering",
    "text": "Ordering\n\nRecall: “A set is an unordered collection of elements”.\nWe need to put things in order!\nThe most common way to do this in Python is with a list.\nAlmost the same as sets, just use “boxy brackets” []\n\n\ntype([1,2,3])\n\nlist"
  },
  {
    "objectID": "01_python.rjs.html#example-4",
    "href": "01_python.rjs.html#example-4",
    "title": "Python",
    "section": "Example",
    "text": "Example\n\nfor element in collection\n\ndo thing\n\n\n\nfor e in [-1, 4, 5, 8, 11]:\n    print(piecewise(e))\n\n14\n9\n9\n9\n-9\n\n\n\nWhat do you see?"
  },
  {
    "objectID": "01_python.rjs.html#seeing-lists",
    "href": "01_python.rjs.html#seeing-lists",
    "title": "Python",
    "section": "Seeing lists",
    "text": "Seeing lists\n\nWe can also use lists to print multiple values!\n\nVery helpful for keeping track of things!\n\n\n\nfor e in [-1, 4, 5, 8, 11]:\n    print([e, piecewise(e)])\n\n[-1, 14]\n[4, 9]\n[5, 9]\n[8, 9]\n[11, -9]"
  },
  {
    "objectID": "01_python.rjs.html#updating-lists",
    "href": "01_python.rjs.html#updating-lists",
    "title": "Python",
    "section": "Updating lists",
    "text": "Updating lists\n\nEach element is a lot like a variable.\n\nThey just have a name and number, use []\nThe initial element is number 0 (not 1)\n\n\n\nxs = [-1, 4, 5, 8, 11]\nxs[0]\n\n-1\n\n\n\nAnd like variables, we can assign a value with =\n\n\nxs[0] = -2\nxs\n\n[-2, 4, 5, 8, 11]"
  },
  {
    "objectID": "01_python.rjs.html#adding-lists",
    "href": "01_python.rjs.html#adding-lists",
    "title": "Python",
    "section": "Adding lists",
    "text": "Adding lists\n\nLists also helpfully support addition with +\n\n\n[-1] + [4, 5, 8, 11]\n\n[-1, 4, 5, 8, 11]\n\n\n\nWe often use this to make new lists.\n\n\nresult = []\nfor e in [-1, 4, 5, 8, 11]:\n    result = result + [piecewise(e)]\nresult\n\n[14, 9, 9, 9, -9]\n\n\n\nThis pattern also works with numbers!\n\n\nx = 0 \nx = x + 1\nx\n\n1"
  },
  {
    "objectID": "01_python.rjs.html#income-tax",
    "href": "01_python.rjs.html#income-tax",
    "title": "Python",
    "section": "Income tax",
    "text": "Income tax\n\nRecall the example of a piecewise function:\n\n\n\nMarginal Tax Rate\n\n\nSingle Taxable Income\n\n\nMarried Filing Jointly or Qualified Widow(er) Taxable Income\n\n\nMarried Filing Separately Taxable Income\n\n\nHead of Household Taxable Income\n\n\n\n\n10%\n\n\n$0 – $9,275\n\n\n$0 – $18,550\n\n\n$0 – $9,275\n\n\n$0 – $13,250\n\n\n\n\n15%\n\n\n$9,276 – $37,650\n\n\n$18,551 – $75,300\n\n\n$9,276 – $37,650\n\n\n$13,251 – $50,400\n\n\n\n\n25%\n\n\n$37,651 – $91,150\n\n\n$75,301 – $151,900\n\n\n$37,651 – $75,950\n\n\n$50,401 – $130,150\n\n\n\n\n28%\n\n\n$91,151 – $190,150\n\n\n$151,901 – $231,450\n\n\n$75,951 – $115,725\n\n\n$130,151 – $210,800\n\n\n\n\n33%\n\n\n$190,151 – $413,350\n\n\n$231,451 – $413,350\n\n\n$115,726 – $206,675\n\n\n$210,801 – $413,350\n\n\n\n\n35%\n\n\n$413,351 – $415,050\n\n\n$413,351 – $466,950\n\n\n$206,676 – $233,475\n\n\n$413,351 – $441,000\n\n\n\n\n39.6%\n\n\n$415,051+\n\n\n$466,951+\n\n\n$233,476+\n\n\n$441,001+"
  },
  {
    "objectID": "01_python.rjs.html#singles-only",
    "href": "01_python.rjs.html#singles-only",
    "title": "Python",
    "section": "Singles only…",
    "text": "Singles only…\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050"
  },
  {
    "objectID": "01_python.rjs.html#motivating-example-1",
    "href": "01_python.rjs.html#motivating-example-1",
    "title": "Python",
    "section": "Motivating example",
    "text": "Motivating example\n\nHow much would a single making 400k pay?\n\n\n\n\n10% on 9275\n15% on 37650 - 9275\n25% on 91150 - 37650\n28% on 190150 - 91150\n33% on 400000 - 190150\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050"
  },
  {
    "objectID": "01_python.rjs.html#sum-it-up",
    "href": "01_python.rjs.html#sum-it-up",
    "title": "Python",
    "section": "Sum it up!",
    "text": "Sum it up!\n\nWatch out for order-of-operations!\n\n\n\n\n10% on 9275\n15% on 37650 - 9275\n25% on 91150 - 37650\n28% on 190150 - 91150\n33% on 400000 - 190150\n\n\n\nx = .10 * 9275\ny = .15 * (37650 - 9275)\nz = .25 * (91150 - 37650)\nr = .28 * (190150 - 91150)\ns = .33 * (400000 - 190150)\nx + y + z + r + s\n\n115529.25"
  },
  {
    "objectID": "01_python.rjs.html#add-as-you-go",
    "href": "01_python.rjs.html#add-as-you-go",
    "title": "Python",
    "section": "Add as you go",
    "text": "Add as you go\n\nWe may set a variable to an expression over that variable\n\nI think of this as an “old” version of the variable on the right side of the equal sign.\n\n\n\n\n\nx = .10 * 9275\nx = x + .15 * (37650 - 9275)\nx = x + .25 * (91150 - 37650)\nx = x + .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25\n\n\n\n\nx = .10 * 9275\ny = .15 * (37650 - 9275)\nz = .25 * (91150 - 37650)\nr = .28 * (190150 - 91150)\ns = .33 * (400000 - 190150)\nx + y + z + r + s\n\n115529.25"
  },
  {
    "objectID": "01_python.rjs.html#assign-update",
    "href": "01_python.rjs.html#assign-update",
    "title": "Python",
    "section": "Assign-update",
    "text": "Assign-update\n\nWe may use an “assignment operator” +=\n\nReassign a variable based on the result of an arithmetic operation.\n\n\n\n\n\nx = .10 * 9275\nx = x + .15 * (37650 - 9275)\nx = x + .25 * (91150 - 37650)\nx = x + .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25\n\n\n\n\nx = .10 * 9275\nx += .15 * (37650 - 9275)\nx += .25 * (91150 - 37650)\nx += .28 * (190150 - 91150)\nx + .33 * (400000 - 190150)\n\n115529.25"
  },
  {
    "objectID": "01_python.rjs.html#exercise-1",
    "href": "01_python.rjs.html#exercise-1",
    "title": "Python",
    "section": "Exercise",
    "text": "Exercise\n\n\n\nWrite function\ndef single_tax(pay):\nReturn tax cost.\n\nReturn not print!\n\nBonus: Also write single_tax_rate which returns the percent tax rate at some income level.\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050"
  },
  {
    "objectID": "01_python.rjs.html#solution",
    "href": "01_python.rjs.html#solution",
    "title": "Python",
    "section": "Solution",
    "text": "Solution\n\n\n\nSpoiler alert!\n\n\n\nCode\ndef single_tax(pay):\n    tax = 0\n    if pay &gt; 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay &gt; 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay &gt; 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay &gt; 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay &gt; 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay &gt; 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n\n\n\n\nThe solution gives the following results!\n\n\n[\n    single_tax(100000),\n    single_tax(100000),\n    single_tax(200000),\n    single_tax(300000),\n    single_tax(400000),\n]\n\n[21036.75, 21036.75, 49529.25, 82529.25, 115529.25]\n\n\n\n115529.25 matches our calculations."
  },
  {
    "objectID": "01_python.rjs.html#challenge-problem",
    "href": "01_python.rjs.html#challenge-problem",
    "title": "Python",
    "section": "Challenge Problem",
    "text": "Challenge Problem\n\nCalculate at what income does the tax rate reach the second highest marginal tax rate of 35%?\n\nThat is, at what pay does tax == pay * .35\n\n\n\n\nCode\nm = .396\nb = 0\nb += (415050 - 413350) * .35\nb += (413350 - 190150) * .33\nb += (190150 - 91150) * .28\nb += (91150 - 37650) * .25\nb += (37650 - 9275) * .15\nb += 9275 * .1\n(m * -415050 + b)/(.35 - m)\n\n\n952827.173913043"
  },
  {
    "objectID": "01_python.rjs.html#bonus-solution",
    "href": "01_python.rjs.html#bonus-solution",
    "title": "Python",
    "section": "Bonus Solution",
    "text": "Bonus Solution\n\nsingle_tax with loops\n\n\n\nCode\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1"
  },
  {
    "objectID": "02_neovim.rjs.html#on-neovim",
    "href": "02_neovim.rjs.html#on-neovim",
    "title": "Neovim",
    "section": "On Neovim",
    "text": "On Neovim\n\nNeovim is free,\nNeovim is very widely available,\nNeovim is highly customizable,\nNeovim is stable, year-on-year,\nand Neovim is quite powerful.\n\nWatch more"
  },
  {
    "objectID": "02_neovim.rjs.html#why-not-neovim",
    "href": "02_neovim.rjs.html#why-not-neovim",
    "title": "Neovim",
    "section": "Why not Neovim?",
    "text": "Why not Neovim?\n\nModal - it is not a “What you see is what you get” (WYSIWYG) editor like MS Word, Google Docs, Notepad, or VS Code\nTerminal-based - it is used within the terminal and not often as a stand-alone program.\nSteep-learning curve - students generally find it difficult to get started, though it is widely preferred by experienced users"
  },
  {
    "objectID": "02_neovim.rjs.html#diving-in",
    "href": "02_neovim.rjs.html#diving-in",
    "title": "Neovim",
    "section": "Diving In",
    "text": "Diving In\n\nTaking Neovim as a given, we’ll:\n\nContinue the piecewise functions example\nTouch on Python and the terminal in the context of Neovim\nIntroduce Neovim modes, motions, and operators.\n\nSpoilers for the last exercise!"
  },
  {
    "objectID": "02_neovim.rjs.html#exercise",
    "href": "02_neovim.rjs.html#exercise",
    "title": "Neovim",
    "section": "Exercise",
    "text": "Exercise\n\n\n\nWrite function\ndef single_tax(pay):\nReturn tax cost.\n\nReturn not print!\n\nBonus: Also write single_tax_rate which returns the percent tax rate at some income level.\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050"
  },
  {
    "objectID": "02_neovim.rjs.html#solutions",
    "href": "02_neovim.rjs.html#solutions",
    "title": "Neovim",
    "section": "Solutions",
    "text": "Solutions\n\n\n\ndef single_tax(pay):\n    tax = 0\n    if pay &gt; 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay &gt; 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay &gt; 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay &gt; 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay &gt; 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay &gt; 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n\n\n\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1"
  },
  {
    "objectID": "02_neovim.rjs.html#tedious-to-type",
    "href": "02_neovim.rjs.html#tedious-to-type",
    "title": "Neovim",
    "section": "Tedious to Type",
    "text": "Tedious to Type\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; def single_tax(pay):\n...     tax_policy = [\n...         [415050, .396],\n...         [413350, .35],\n...         [190150, .33],\n...         [91150, .28],\n...         [37650, .25],\n...         [9275, .15]\n...     ]\n...     tax = 0\n...     for bracket in tax_policy:\n...         if pay &gt; bracket[0]:\n...             tax += (pay - bracket[0]) * bracket[1]\n...             pay = bracket[0]\n...     return tax + pay * .1\n...\n&gt;&gt;&gt; single_tax(400000)\n115529.25\n&gt;&gt;&gt;"
  },
  {
    "objectID": "02_neovim.rjs.html#instead-.py-files",
    "href": "02_neovim.rjs.html#instead-.py-files",
    "title": "Neovim",
    "section": "Instead: .py files",
    "text": "Instead: .py files\n\nPython has an associated file type, the .py file.\n\nSimilar to .png (portable network graphic) for images\nSimilar to .pdf (portable document format) for papers"
  },
  {
    "objectID": "02_neovim.rjs.html#test-based",
    "href": "02_neovim.rjs.html#test-based",
    "title": "Neovim",
    "section": "Test-based",
    "text": "Test-based\n\nThe .py file is much like a .txt file in that:\n\nIt is a small, lightweight file containing only typed characters.\nIt can be opened, edited, and viewed in many editors.\n\nThe .py file can save typed code to be used within python."
  },
  {
    "objectID": "02_neovim.rjs.html#enter-neovim",
    "href": "02_neovim.rjs.html#enter-neovim",
    "title": "Neovim",
    "section": "Enter Neovim",
    "text": "Enter Neovim\n\nNeovim is a great way to edit text.\n\n\n\n\n\n\n\nGive it a shot!\n\n\nStudents often object to switching from WYSIWYG editors but:\n\nMany students know no other way to write text-based files, and\nWe’ve ample time this term to properly explore Neovim\n\nBe patient, but also work hard!"
  },
  {
    "objectID": "02_neovim.rjs.html#installation",
    "href": "02_neovim.rjs.html#installation",
    "title": "Neovim",
    "section": "Installation",
    "text": "Installation\n\nWe go to the offial webpage to get an installer for our computer:\n\nhttps://neovim.io/\n\nNeovim offers a few more installation options than you may be used to.\nI recommend…"
  },
  {
    "objectID": "02_neovim.rjs.html#install-from-download",
    "href": "02_neovim.rjs.html#install-from-download",
    "title": "Neovim",
    "section": "Install from download",
    "text": "Install from download\nDownloads are available on the Releases page.\n\nLatest stable release\n\nmacOS x86_64\nmacOS arm64\nLinux x86_64\nLinux arm64\nWindows"
  },
  {
    "objectID": "02_neovim.rjs.html#terminal",
    "href": "02_neovim.rjs.html#terminal",
    "title": "Neovim",
    "section": "Terminal",
    "text": "Terminal\n\nOn MS Windows\n\nI press Windows key, type “terminal” then press enter.\n\nOn MacOS\n\nI open Launchpad, type “terminal” then press enter."
  },
  {
    "objectID": "02_neovim.rjs.html#macos",
    "href": "02_neovim.rjs.html#macos",
    "title": "Neovim",
    "section": "MacOS",
    "text": "MacOS"
  },
  {
    "objectID": "02_neovim.rjs.html#windows",
    "href": "02_neovim.rjs.html#windows",
    "title": "Neovim",
    "section": "Windows",
    "text": "Windows"
  },
  {
    "objectID": "02_neovim.rjs.html#expression-evaluation",
    "href": "02_neovim.rjs.html#expression-evaluation",
    "title": "Neovim",
    "section": "Expression evaluation",
    "text": "Expression evaluation\n\nReturning to the terminal, we can type at the “prompt”.\nOn MacOS, perhaps a line that begins with $ and a flashing cursor\nOn Window, perhaps PS C:\\Users\\calvin&gt;\n\nPS stands for “powershell” - more latter.\nC:\\Users\\calvin is the name of a folder - more latter\n&gt; is the prompt, with a flashing cursor."
  },
  {
    "objectID": "02_neovim.rjs.html#run-neovim",
    "href": "02_neovim.rjs.html#run-neovim",
    "title": "Neovim",
    "section": "Run Neovim",
    "text": "Run Neovim\nIn the following examples, I remove line numbers to denote they are not Python code snippets.\n\nOn MacOS, type nvim\n\n\n\nMacOS\n\n$ nvim\n\n\nOn Windows, type nvim\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; nvim\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key."
  },
  {
    "objectID": "02_neovim.rjs.html#see-neovim",
    "href": "02_neovim.rjs.html#see-neovim",
    "title": "Neovim",
    "section": "See Neovim",
    "text": "See Neovim\n\nYou’ll see something like this:\n\n                  NVIM v0.11.1\n\n  Nvim is open source and freely distributable\n           https://neovim.io/#chat\n\n type :help nvim&lt;Enter&gt;               if you are new!\n type :checkhealth&lt;Enter&gt;             to optimize Nvim\n type :q&lt;Enter&gt;                       to exit\n type :help&lt;Enter&gt;                    for help\n\ntype :help news&lt;Enter&gt; to see changes in v0.11\n\n        Help poor children in Uganda!\n type :help iccf&lt;Enter&gt;               for information"
  },
  {
    "objectID": "02_neovim.rjs.html#modality",
    "href": "02_neovim.rjs.html#modality",
    "title": "Neovim",
    "section": "Modality",
    "text": "Modality\n\nnvim is a modal text editor\nBy default, typed characters will not appear in the document.\nRather, by default, we being in command mode.\nWe won’t worry about that too much, but the first command to learn is\n\ni\n\ni for insert"
  },
  {
    "objectID": "02_neovim.rjs.html#insert-mode",
    "href": "02_neovim.rjs.html#insert-mode",
    "title": "Neovim",
    "section": "Insert Mode",
    "text": "Insert Mode\n\nBy the way, you should see -- INSERT -- at the bottom of the terminal window.\nInsert mode is not unlike WYSIWYG\nUse it prolificly until you are more comfortable.\nNavigate with arrow keys or (depending on system) mouse\nFor now, let’s copy paste in the piecewise function."
  },
  {
    "objectID": "02_neovim.rjs.html#piecewise",
    "href": "02_neovim.rjs.html#piecewise",
    "title": "Neovim",
    "section": "Piecewise",
    "text": "Piecewise\n\nFor me, basic copy/paste commands like:\n\nctrl/cmd+c, ctrl/cmd+v\nrclick-&gt;menu-&gt;copy\n\nWorked amicably in i insert mode\n\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nFor .py files I’ll include line numbers but add a filename on top."
  },
  {
    "objectID": "02_neovim.rjs.html#command-mode",
    "href": "02_neovim.rjs.html#command-mode",
    "title": "Neovim",
    "section": "Command Mode",
    "text": "Command Mode\n\nHaving written some text, we now need to save it to a file.\nPress the “ESC” (Escape) key to return to command mode\nYour cursor will move the bottom of the terminal, where -- INSERT -- was"
  },
  {
    "objectID": "02_neovim.rjs.html#remember",
    "href": "02_neovim.rjs.html#remember",
    "title": "Neovim",
    "section": "Remember!",
    "text": "Remember!\n\n\n\n\n\n\nRemember to press escape!\n\n\n\nIn nvim examples today, it will not always be easy to make a note of when to press escape!\nAs a rule, use escape before anytime you try to do something (exit, save)\nThese “do things” usually are : prefixed\nPress i to get back to typing (insert mode)"
  },
  {
    "objectID": "02_neovim.rjs.html#issuing-commands",
    "href": "02_neovim.rjs.html#issuing-commands",
    "title": "Neovim",
    "section": "Issuing commands",
    "text": "Issuing commands\n\nAfter :w (write) and the name of the file\nInclude the .py ending!\nI wrote:\n\n:w pw.py"
  },
  {
    "objectID": "02_neovim.rjs.html#save-and-quit",
    "href": "02_neovim.rjs.html#save-and-quit",
    "title": "Neovim",
    "section": "Save and Quit",
    "text": "Save and Quit\n\nYou can always use :w to save while working.\nMake any edits you make need to make - a missed paren perhaps.\nThen both save and exit nvim with :x\n\nThis special command saves the file and exits nvim\n\nYou will return to the command line you started with, likely without incident.\n\nBut there will now be a new file you can use!"
  },
  {
    "objectID": "02_neovim.rjs.html#back-in-terminal",
    "href": "02_neovim.rjs.html#back-in-terminal",
    "title": "Neovim",
    "section": "Back in Terminal",
    "text": "Back in Terminal\n\nOn MacOS, you’ll see nvim and a new prompt\n\n\n\nMacOS\n\n$ nvim\n$\n\n\nOn Windows, the same\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; nvim\nPS C:\\Users\\calvin&gt;"
  },
  {
    "objectID": "02_neovim.rjs.html#aside-terminal-commands",
    "href": "02_neovim.rjs.html#aside-terminal-commands",
    "title": "Neovim",
    "section": "Aside: Terminal Commands",
    "text": "Aside: Terminal Commands\n\nLike Python and Neovim, there are also terminal commands!\n\nTwo are python/python3 and nvim!\n\nAnother is ls, which stands for “list”\n\nThis command has been around so long, it is from an era when commands were shorter to save precious computer memory!\n\nIt “lists” local files, and can list them by name!"
  },
  {
    "objectID": "02_neovim.rjs.html#aside-using-ls",
    "href": "02_neovim.rjs.html#aside-using-ls",
    "title": "Neovim",
    "section": "Aside: Using ls",
    "text": "Aside: Using ls\n\nTry out this command, to see that you have a pw.py file!\n\n$ ls pw.py\n\nWhat do you see (different on Windows and MacOS)?"
  },
  {
    "objectID": "02_neovim.rjs.html#checkpoint",
    "href": "02_neovim.rjs.html#checkpoint",
    "title": "Neovim",
    "section": "Checkpoint",
    "text": "Checkpoint\n\nIf you do not have a pw.py file, stop here until you have one!\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; ls pw.py\n\n\n    Directory: C:\\Users\\cd-desk\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/20/2025   3:21 PM            151 pw.py\n\n\n\nMacOS\n\n$ ls pw.py\npw.py\n$"
  },
  {
    "objectID": "02_neovim.rjs.html#py-files",
    "href": "02_neovim.rjs.html#py-files",
    "title": "Neovim",
    "section": ".py files",
    "text": ".py files\n\nThere are two common ways to use .py files\nI believe the most common is via import\nTo begin, at the command line, start Pythoni\nOn Windows, type python\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; python\n\n\nOn MacOS, type python3\n\n\n\nMacOS\n\n$ python3\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key."
  },
  {
    "objectID": "02_neovim.rjs.html#see-python",
    "href": "02_neovim.rjs.html#see-python",
    "title": "Neovim",
    "section": "See Python",
    "text": "See Python\n\nYou’ll see something like this:\n\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\nTake note of the prompt!\n&gt;&gt;&gt;\nThose three are how you know it is Python, and not the Terminal, that you are working in."
  },
  {
    "objectID": "02_neovim.rjs.html#import",
    "href": "02_neovim.rjs.html#import",
    "title": "Neovim",
    "section": "Import",
    "text": "Import\n\nVersus last time, we now have a piecewise function written in a .py file we can reference.\nTo do so, we:\n\nType import followed by a space\nType the filename less the .py extension\nIt should look like this:\n\n\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import pw\n&gt;&gt;&gt;"
  },
  {
    "objectID": "02_neovim.rjs.html#modules",
    "href": "02_neovim.rjs.html#modules",
    "title": "Neovim",
    "section": "Modules",
    "text": "Modules\n\nimport pw will introduce a new variable to Python to which we can refer by name (pw)\nIt is of a new type for us, “module”\n\n&gt;&gt;&gt; type(pw)\n&lt;class 'module'&gt;\n\nModules correspond to .py files!\n\n&gt;&gt;&gt; pw\n&lt;module 'pw' from 'C:\\\\Users\\\\calvin\\\\pw.py'&gt;\n\n(The from will look different on different computers)"
  },
  {
    "objectID": "02_neovim.rjs.html#importing-functions",
    "href": "02_neovim.rjs.html#importing-functions",
    "title": "Neovim",
    "section": "Importing Functions",
    "text": "Importing Functions\n\nWe can use functions inside modules in a few ways.\nFirst, we can use the module name (pw) followed by a dot or period (.) followed by the name of the function.\n\n&gt;&gt;&gt; pw.piecewise(-1)\n14"
  },
  {
    "objectID": "02_neovim.rjs.html#renaming-functions",
    "href": "02_neovim.rjs.html#renaming-functions",
    "title": "Neovim",
    "section": "Renaming Functions",
    "text": "Renaming Functions\n\nSecond, we can just use single equals assignment\n\n&gt;&gt;&gt; piecewise = pw.piecewise\n&gt;&gt;&gt; piecewise(4)\n9"
  },
  {
    "objectID": "02_neovim.rjs.html#using-from",
    "href": "02_neovim.rjs.html#using-from",
    "title": "Neovim",
    "section": "Using from",
    "text": "Using from\n\nThird, we can use the from keyword in our import.\n\nThis is by far preferred (it is more clear)\n\n\n&gt;&gt;&gt; from pw import piecewise\n&gt;&gt;&gt; piecewise(11)\n-9\n\nI only show you the other methods to make it clear what this method is doing."
  },
  {
    "objectID": "02_neovim.rjs.html#exit-python",
    "href": "02_neovim.rjs.html#exit-python",
    "title": "Neovim",
    "section": "Exit Python",
    "text": "Exit Python\n\nOftentimes, we’ll run a bit of Python then want to go back to the command line to use nvim\n\n\n\n\n\n\n\nexit()\n\n\nYou can exit the Python &gt;&gt;&gt; prompt back to Windows &gt; or MacOS $ at any time:\n\nUse exit()\nUse quit()\nUse ctrl/cmd+z\n\nPractice starting and leaving Python a few times!"
  },
  {
    "objectID": "02_neovim.rjs.html#command-line-utilities",
    "href": "02_neovim.rjs.html#command-line-utilities",
    "title": "Neovim",
    "section": "Command Line Utilities",
    "text": "Command Line Utilities\nI find the following tedious:\n\nnvim\nWrite some code\n:w somefile.py\nESC then :x\npython\nfrom somefile import somefunction\nsomefunction(x)\nexit()"
  },
  {
    "objectID": "02_neovim.rjs.html#alternative",
    "href": "02_neovim.rjs.html#alternative",
    "title": "Neovim",
    "section": "Alternative",
    "text": "Alternative\n\nWe will instead:\n\nShow how to how run script files\nShow how to provide input to script files"
  },
  {
    "objectID": "02_neovim.rjs.html#hello-terminal",
    "href": "02_neovim.rjs.html#hello-terminal",
    "title": "Neovim",
    "section": "Hello, Terminal",
    "text": "Hello, Terminal\n\nTo begin, we will do terminal “Hello, World!”\nI use nvim hi.py to create and open a new file named hi.py\nThen I write:\n\n\n\nhi.py\n\nprint(\"Hello, terminal!\")"
  },
  {
    "objectID": "02_neovim.rjs.html#running-scripts",
    "href": "02_neovim.rjs.html#running-scripts",
    "title": "Neovim",
    "section": "Running Scripts",
    "text": "Running Scripts\n\nI save and exit via :x\nThen I run the Python script via python hi.py\nFor me, it looks like this:\n\n$ nvim hi.py\n$ python3 hi.py\nHello, terminal!\n$"
  },
  {
    "objectID": "02_neovim.rjs.html#what-happened",
    "href": "02_neovim.rjs.html#what-happened",
    "title": "Neovim",
    "section": "What happened?",
    "text": "What happened?\n\nBasically, Python runs the code written in the file as if it were entered at the prompts.\nIt then provides the expected print statements.\nWe can run multiple times without rewriting the script."
  },
  {
    "objectID": "02_neovim.rjs.html#piecewise-script",
    "href": "02_neovim.rjs.html#piecewise-script",
    "title": "Neovim",
    "section": "Piecewise Script",
    "text": "Piecewise Script\n\nSay we wish to find the piecewise results from the prior lecture.\nnvim pw.py\nI use G to jump to the end of the file\n\nThis is a “vim motion”\n\nI use i to change into insert mode, and add:\n\n\n\npw.py\n\nfor e in [-1, 4, 5, 8, 11]:\n    print([e, piecewise(e)])\n\n\nSave and exit with (escape then) :x"
  },
  {
    "objectID": "02_neovim.rjs.html#test-it",
    "href": "02_neovim.rjs.html#test-it",
    "title": "Neovim",
    "section": "Test it",
    "text": "Test it\n$ nvim pw.py\n$ python3 pw.py\n[-1, 14]\n[4, 9]\n[5, 9]\n[8, 9]\n[11, -9]\n$"
  },
  {
    "objectID": "02_neovim.rjs.html#using-input",
    "href": "02_neovim.rjs.html#using-input",
    "title": "Neovim",
    "section": "Using input",
    "text": "Using input\n\nFortunately, Python has a built-in function that is (basically) the opposite of print\nWithin the terminal, run python\nThen within Python, call input()\n\n&gt;&gt;&gt; input() \n\nWhat happens?"
  },
  {
    "objectID": "02_neovim.rjs.html#what-if",
    "href": "02_neovim.rjs.html#what-if",
    "title": "Neovim",
    "section": "What if?",
    "text": "What if?\n\nWe want to be able to check values without either\n\nOpening python and doing an import, or\nOpening nvim and editing the list\n\nWe can do that by providing input\n\nWe write a script that expects us to type in some information!"
  },
  {
    "objectID": "02_neovim.rjs.html#python-input",
    "href": "02_neovim.rjs.html#python-input",
    "title": "Neovim",
    "section": "Python input",
    "text": "Python input\n\nPython helpfully has an input that is basically the opposite of print.\ninput\nIt is easiest to learn by trying it out!"
  },
  {
    "objectID": "02_neovim.rjs.html#providing-input",
    "href": "02_neovim.rjs.html#providing-input",
    "title": "Neovim",
    "section": "Providing input",
    "text": "Providing input\n\nOpen Python\nCall the function input()\nType something - anything - then press enter.\n\n&gt;&gt;&gt; input()\nsomething anything\n'something anything'\n\nThe input() function returns the text that is typed in"
  },
  {
    "objectID": "02_neovim.rjs.html#script-input",
    "href": "02_neovim.rjs.html#script-input",
    "title": "Neovim",
    "section": "Script input",
    "text": "Script input\n\nLet’s make a little script to try out input()\n\n\n\nreply.py\n\nx = input()\nprint(x)\n\n\nThink about the steps to create and run this file!"
  },
  {
    "objectID": "02_neovim.rjs.html#example",
    "href": "02_neovim.rjs.html#example",
    "title": "Neovim",
    "section": "Example",
    "text": "Example\n$ nvim\n$ python3 reply.py\nI wrote this text then pressed enter.\nI wrote this text then pressed enter.\n$\n\nTry it out!"
  },
  {
    "objectID": "02_neovim.rjs.html#return-v.-print",
    "href": "02_neovim.rjs.html#return-v.-print",
    "title": "Neovim",
    "section": "Return v. Print",
    "text": "Return v. Print\n\n\n\n\n\n\nPrint, Not Return\n\n\n\nTo see the results of some expression or computation other work in the terminal, we must print within scripts.\nprint() for terminal\nreturn within Python"
  },
  {
    "objectID": "02_neovim.rjs.html#a-wrinkle",
    "href": "02_neovim.rjs.html#a-wrinkle",
    "title": "Neovim",
    "section": "A Wrinkle",
    "text": "A Wrinkle\n\nThere’s one little problem here.\nLet’s update pw.py to to run on input() and see what happens.\n\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\nx = input()\ny = piecewise(x)\nprint(y)"
  },
  {
    "objectID": "02_neovim.rjs.html#uh-oh",
    "href": "02_neovim.rjs.html#uh-oh",
    "title": "Neovim",
    "section": "Uh oh!",
    "text": "Uh oh!\n\nI see the following:\n\n$ python3 pw.py\n10\nTraceback (most recent call last):\n  File \"/home/user/pw.py\", line 10, in &lt;module&gt;\n    y = piecewise(x)\n  File \"/home/user/pw.py\", line 2, in piecewise\n    if (x &lt; 4):\nTypeError: '&lt;' not supported between instances of 'str' and 'int'\n$"
  },
  {
    "objectID": "02_neovim.rjs.html#recall",
    "href": "02_neovim.rjs.html#recall",
    "title": "Neovim",
    "section": "Recall",
    "text": "Recall\n\nWe worked with different types last time:\n\nThink about what is happening here\n\n\n\n[type(1), type(1 == 2), type([1,2]), type({1,2})]\n\n[int, bool, list, set]\n\n\n\nThe type of input() is a new type - str\n\nShort for “string” - as in string of characters\n\n\n\ntype(\"Hello, world!\")\n\nstr"
  },
  {
    "objectID": "02_neovim.rjs.html#casting",
    "href": "02_neovim.rjs.html#casting",
    "title": "Neovim",
    "section": "Casting",
    "text": "Casting\n\nChanging data of one type (like str) into another (like int) is called casting\nIn Python, to cast we use the name of the type we want as a function on the value in the type we don’t want.\nEasy to try within python"
  },
  {
    "objectID": "02_neovim.rjs.html#try-it",
    "href": "02_neovim.rjs.html#try-it",
    "title": "Neovim",
    "section": "Try it",
    "text": "Try it\n&gt;&gt;&gt; x = input()\n10\n&gt;&gt;&gt; x\n'10'\n&gt;&gt;&gt; type(x)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; y = int(x)\n&gt;&gt;&gt; y\n10\n&gt;&gt;&gt; type(y)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; y &lt; 11\nTrue\n\nPython shows something is a string by enclosing it within quote marks ''"
  },
  {
    "objectID": "02_neovim.rjs.html#fix-pw.py",
    "href": "02_neovim.rjs.html#fix-pw.py",
    "title": "Neovim",
    "section": "Fix pw.py",
    "text": "Fix pw.py\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\nx = input()\ny = int(x)\nz = piecewise(y)\nprint(z)"
  },
  {
    "objectID": "02_neovim.rjs.html#use-it",
    "href": "02_neovim.rjs.html#use-it",
    "title": "Neovim",
    "section": "Use it",
    "text": "Use it\n$ nvim pw.py\n$ python3 pw.py\n10\n-8\n$ python3 pw.py\n-1\n14\n$"
  },
  {
    "objectID": "02_neovim.rjs.html#income-tax",
    "href": "02_neovim.rjs.html#income-tax",
    "title": "Neovim",
    "section": "Income Tax",
    "text": "Income Tax\n\nWe’ll return to the income tax example, and\nAdd a wrinkle.\nHere’s an income tax solution:\n\n\n\nCode\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1"
  },
  {
    "objectID": "02_neovim.rjs.html#arguments",
    "href": "02_neovim.rjs.html#arguments",
    "title": "Neovim",
    "section": "Arguments",
    "text": "Arguments\n\nThere is one other way to specify what you want a script to do.\nCommand line arguments\nThis is my favorite way (simpliest to use)\n\n(Bit harder to write)\n\nIt is based on the Python sys module"
  },
  {
    "objectID": "02_neovim.rjs.html#sys",
    "href": "02_neovim.rjs.html#sys",
    "title": "Neovim",
    "section": "sys",
    "text": "sys\n\nCreate and try out the following file:\n\n\n\nargs.py\n\nimport sys\n\nprint(sys.argv)\n\n\nWhat does it do?"
  },
  {
    "objectID": "02_neovim.rjs.html#argv",
    "href": "02_neovim.rjs.html#argv",
    "title": "Neovim",
    "section": "‘argv’",
    "text": "‘argv’\n\n‘argv’ stands for “argument vector”\nYou may have noticed it is a list\n\nOther programming languages sometimes call lists vectors\nComputer systems often call lists vectors\nPython follows this convention"
  },
  {
    "objectID": "02_neovim.rjs.html#add-an-arg",
    "href": "02_neovim.rjs.html#add-an-arg",
    "title": "Neovim",
    "section": "Add an arg",
    "text": "Add an arg\n\nWhat happens if you do this?\n\n$ python3 args.py hello world"
  },
  {
    "objectID": "02_neovim.rjs.html#remember-1",
    "href": "02_neovim.rjs.html#remember-1",
    "title": "Neovim",
    "section": "Remember!",
    "text": "Remember!\n\n\n\n\n\n\nLists begin with zero!\n\n\n\nWhen using argv, recall it is a Python list!\nThe initial element - what we would often call first - is at position zero\nWould would print only this element as follows:\n\n\n\nargs.py\n\nimport sys\n\nprint(sys.argv[0])"
  },
  {
    "objectID": "02_neovim.rjs.html#exercise-2",
    "href": "02_neovim.rjs.html#exercise-2",
    "title": "Neovim",
    "section": "Exercise",
    "text": "Exercise\n\nCreate a file tax.py\nHave it accept an income as a command line argument\nHave it print a tax cost at command line.\nHere’s an example how it should work!\n\n$ python3 tax.py 40000\n115529.25"
  },
  {
    "objectID": "02_neovim.rjs.html#challenge-problem",
    "href": "02_neovim.rjs.html#challenge-problem",
    "title": "Neovim",
    "section": "Challenge Problem",
    "text": "Challenge Problem\n\nAccept two command line arguments\n\nIncome, and\nOne of ['single', 'married', 'separate', 'head']\n\nPrint the tax regardless of “single-ness”"
  },
  {
    "objectID": "02_neovim.rjs.html#solution",
    "href": "02_neovim.rjs.html#solution",
    "title": "Neovim",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n\nimport sys\n\nprint(single_tax(int(sys.argv[1])))"
  },
  {
    "objectID": "02_neovim.html",
    "href": "02_neovim.html",
    "title": "Neovim",
    "section": "",
    "text": "Neovim is free,\nNeovim is very widely available,\nNeovim is highly customizable,\nNeovim is stable, year-on-year,\nand Neovim is quite powerful.\n\nWatch more\n\n\n\n\nModal - it is not a “What you see is what you get” (WYSIWYG) editor like MS Word, Google Docs, Notepad, or VS Code\nTerminal-based - it is used within the terminal and not often as a stand-alone program.\nSteep-learning curve - students generally find it difficult to get started, though it is widely preferred by experienced users",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#on-neovim",
    "href": "02_neovim.html#on-neovim",
    "title": "Neovim",
    "section": "",
    "text": "Neovim is free,\nNeovim is very widely available,\nNeovim is highly customizable,\nNeovim is stable, year-on-year,\nand Neovim is quite powerful.\n\nWatch more",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#why-not-neovim",
    "href": "02_neovim.html#why-not-neovim",
    "title": "Neovim",
    "section": "",
    "text": "Modal - it is not a “What you see is what you get” (WYSIWYG) editor like MS Word, Google Docs, Notepad, or VS Code\nTerminal-based - it is used within the terminal and not often as a stand-alone program.\nSteep-learning curve - students generally find it difficult to get started, though it is widely preferred by experienced users",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#diving-in",
    "href": "02_neovim.html#diving-in",
    "title": "Neovim",
    "section": "Diving In",
    "text": "Diving In\n\nTaking Neovim as a given, we’ll:\n\nContinue the piecewise functions example\nTouch on Python and the terminal in the context of Neovim\nIntroduce Neovim modes, motions, and operators.\n\nSpoilers for the last exercise!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#exercise",
    "href": "02_neovim.html#exercise",
    "title": "Neovim",
    "section": "Exercise",
    "text": "Exercise\n\n\n\nWrite function\ndef single_tax(pay):\nReturn tax cost.\n\nReturn not print!\n\nBonus: Also write single_tax_rate which returns the percent tax rate at some income level.\n\n\n\n\n\nRate\nFrom\n\n\n\n\n10%\n0\n\n\n15%\n9275\n\n\n25%\n37650\n\n\n28%\n91150\n\n\n33%\n190150\n\n\n35%\n413350\n\n\n39.6%\n415050",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#solutions",
    "href": "02_neovim.html#solutions",
    "title": "Neovim",
    "section": "Solutions",
    "text": "Solutions\n\n\n\ndef single_tax(pay):\n    tax = 0\n    if pay &gt; 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay &gt; 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay &gt; 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay &gt; 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay &gt; 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay &gt; 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n\n\n\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#tedious-to-type",
    "href": "02_neovim.html#tedious-to-type",
    "title": "Neovim",
    "section": "Tedious to Type",
    "text": "Tedious to Type\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; def single_tax(pay):\n...     tax_policy = [\n...         [415050, .396],\n...         [413350, .35],\n...         [190150, .33],\n...         [91150, .28],\n...         [37650, .25],\n...         [9275, .15]\n...     ]\n...     tax = 0\n...     for bracket in tax_policy:\n...         if pay &gt; bracket[0]:\n...             tax += (pay - bracket[0]) * bracket[1]\n...             pay = bracket[0]\n...     return tax + pay * .1\n...\n&gt;&gt;&gt; single_tax(400000)\n115529.25\n&gt;&gt;&gt;",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#instead-.py-files",
    "href": "02_neovim.html#instead-.py-files",
    "title": "Neovim",
    "section": "Instead: .py files",
    "text": "Instead: .py files\n\nPython has an associated file type, the .py file.\n\nSimilar to .png (portable network graphic) for images\nSimilar to .pdf (portable document format) for papers",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#test-based",
    "href": "02_neovim.html#test-based",
    "title": "Neovim",
    "section": "Test-based",
    "text": "Test-based\n\nThe .py file is much like a .txt file in that:\n\nIt is a small, lightweight file containing only typed characters.\nIt can be opened, edited, and viewed in many editors.\n\nThe .py file can save typed code to be used within python.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#enter-neovim",
    "href": "02_neovim.html#enter-neovim",
    "title": "Neovim",
    "section": "Enter Neovim",
    "text": "Enter Neovim\n\nNeovim is a great way to edit text.\n\n\n\n\n\n\n\nGive it a shot!\n\n\n\nStudents often object to switching from WYSIWYG editors but:\n\nMany students know no other way to write text-based files, and\nWe’ve ample time this term to properly explore Neovim\n\nBe patient, but also work hard!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#installation",
    "href": "02_neovim.html#installation",
    "title": "Neovim",
    "section": "Installation",
    "text": "Installation\n\nWe go to the offial webpage to get an installer for our computer:\n\nhttps://neovim.io/\n\nNeovim offers a few more installation options than you may be used to.\nI recommend…",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#install-from-download",
    "href": "02_neovim.html#install-from-download",
    "title": "Neovim",
    "section": "Install from download",
    "text": "Install from download\nDownloads are available on the Releases page.\n\nLatest stable release\n\nmacOS x86_64\nmacOS arm64\nLinux x86_64\nLinux arm64\nWindows",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#terminal",
    "href": "02_neovim.html#terminal",
    "title": "Neovim",
    "section": "Terminal",
    "text": "Terminal\n\nOn MS Windows\n\nI press Windows key, type “terminal” then press enter.\n\nOn MacOS\n\nI open Launchpad, type “terminal” then press enter.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#macos",
    "href": "02_neovim.html#macos",
    "title": "Neovim",
    "section": "MacOS",
    "text": "MacOS",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#windows",
    "href": "02_neovim.html#windows",
    "title": "Neovim",
    "section": "Windows",
    "text": "Windows",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#expression-evaluation",
    "href": "02_neovim.html#expression-evaluation",
    "title": "Neovim",
    "section": "Expression evaluation",
    "text": "Expression evaluation\n\nReturning to the terminal, we can type at the “prompt”.\nOn MacOS, perhaps a line that begins with $ and a flashing cursor\nOn Window, perhaps PS C:\\Users\\calvin&gt;\n\nPS stands for “powershell” - more latter.\nC:\\Users\\calvin is the name of a folder - more latter\n&gt; is the prompt, with a flashing cursor.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#run-neovim",
    "href": "02_neovim.html#run-neovim",
    "title": "Neovim",
    "section": "Run Neovim",
    "text": "Run Neovim\nIn the following examples, I remove line numbers to denote they are not Python code snippets.\n\nOn MacOS, type nvim\n\n\n\nMacOS\n\n$ nvim\n\n\nOn Windows, type nvim\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; nvim\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#see-neovim",
    "href": "02_neovim.html#see-neovim",
    "title": "Neovim",
    "section": "See Neovim",
    "text": "See Neovim\n\nYou’ll see something like this:\n\n                  NVIM v0.11.1\n\n  Nvim is open source and freely distributable\n           https://neovim.io/#chat\n\n type :help nvim&lt;Enter&gt;               if you are new!\n type :checkhealth&lt;Enter&gt;             to optimize Nvim\n type :q&lt;Enter&gt;                       to exit\n type :help&lt;Enter&gt;                    for help\n\ntype :help news&lt;Enter&gt; to see changes in v0.11\n\n        Help poor children in Uganda!\n type :help iccf&lt;Enter&gt;               for information",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#modality",
    "href": "02_neovim.html#modality",
    "title": "Neovim",
    "section": "Modality",
    "text": "Modality\n\nnvim is a modal text editor\nBy default, typed characters will not appear in the document.\nRather, by default, we being in command mode.\nWe won’t worry about that too much, but the first command to learn is\n\ni\n\ni for insert",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#insert-mode",
    "href": "02_neovim.html#insert-mode",
    "title": "Neovim",
    "section": "Insert Mode",
    "text": "Insert Mode\n\nBy the way, you should see -- INSERT -- at the bottom of the terminal window.\nInsert mode is not unlike WYSIWYG\nUse it prolificly until you are more comfortable.\nNavigate with arrow keys or (depending on system) mouse\nFor now, let’s copy paste in the piecewise function.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#piecewise",
    "href": "02_neovim.html#piecewise",
    "title": "Neovim",
    "section": "Piecewise",
    "text": "Piecewise\n\nFor me, basic copy/paste commands like:\n\nctrl/cmd+c, ctrl/cmd+v\nrclick-&gt;menu-&gt;copy\n\nWorked amicably in i insert mode\n\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\n\nFor .py files I’ll include line numbers but add a filename on top.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#command-mode",
    "href": "02_neovim.html#command-mode",
    "title": "Neovim",
    "section": "Command Mode",
    "text": "Command Mode\n\nHaving written some text, we now need to save it to a file.\nPress the “ESC” (Escape) key to return to command mode\nYour cursor will move the bottom of the terminal, where -- INSERT -- was",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#remember",
    "href": "02_neovim.html#remember",
    "title": "Neovim",
    "section": "Remember!",
    "text": "Remember!\n\n\n\n\n\n\nRemember to press escape!\n\n\n\n\nIn nvim examples today, it will not always be easy to make a note of when to press escape!\nAs a rule, use escape before anytime you try to do something (exit, save)\nThese “do things” usually are : prefixed\nPress i to get back to typing (insert mode)",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#issuing-commands",
    "href": "02_neovim.html#issuing-commands",
    "title": "Neovim",
    "section": "Issuing commands",
    "text": "Issuing commands\n\nAfter :w (write) and the name of the file\nInclude the .py ending!\nI wrote:\n\n:w pw.py",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#save-and-quit",
    "href": "02_neovim.html#save-and-quit",
    "title": "Neovim",
    "section": "Save and Quit",
    "text": "Save and Quit\n\nYou can always use :w to save while working.\nMake any edits you make need to make - a missed paren perhaps.\nThen both save and exit nvim with :x\n\nThis special command saves the file and exits nvim\n\nYou will return to the command line you started with, likely without incident.\n\nBut there will now be a new file you can use!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#back-in-terminal",
    "href": "02_neovim.html#back-in-terminal",
    "title": "Neovim",
    "section": "Back in Terminal",
    "text": "Back in Terminal\n\nOn MacOS, you’ll see nvim and a new prompt\n\n\n\nMacOS\n\n$ nvim\n$\n\n\nOn Windows, the same\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; nvim\nPS C:\\Users\\calvin&gt;",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#aside-terminal-commands",
    "href": "02_neovim.html#aside-terminal-commands",
    "title": "Neovim",
    "section": "Aside: Terminal Commands",
    "text": "Aside: Terminal Commands\n\nLike Python and Neovim, there are also terminal commands!\n\nTwo are python/python3 and nvim!\n\nAnother is ls, which stands for “list”\n\nThis command has been around so long, it is from an era when commands were shorter to save precious computer memory!\n\nIt “lists” local files, and can list them by name!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#aside-using-ls",
    "href": "02_neovim.html#aside-using-ls",
    "title": "Neovim",
    "section": "Aside: Using ls",
    "text": "Aside: Using ls\n\nTry out this command, to see that you have a pw.py file!\n\n$ ls pw.py\n\nWhat do you see (different on Windows and MacOS)?",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#checkpoint",
    "href": "02_neovim.html#checkpoint",
    "title": "Neovim",
    "section": "Checkpoint",
    "text": "Checkpoint\n\nIf you do not have a pw.py file, stop here until you have one!\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; ls pw.py\n\n\n    Directory: C:\\Users\\cd-desk\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/20/2025   3:21 PM            151 pw.py\n\n\n\nMacOS\n\n$ ls pw.py\npw.py\n$",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#py-files",
    "href": "02_neovim.html#py-files",
    "title": "Neovim",
    "section": ".py files",
    "text": ".py files\n\nThere are two common ways to use .py files\nI believe the most common is via import\nTo begin, at the command line, start Pythoni\nOn Windows, type python\n\n\n\nWindows\n\nPS C:\\Users\\calvin&gt; python\n\n\nOn MacOS, type python3\n\n\n\nMacOS\n\n$ python3\n\n\nOn both, press the ↵ᴇɴᴛᴇʀ key.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#see-python",
    "href": "02_neovim.html#see-python",
    "title": "Neovim",
    "section": "See Python",
    "text": "See Python\n\nYou’ll see something like this:\n\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;\n\nTake note of the prompt!\n&gt;&gt;&gt;\nThose three are how you know it is Python, and not the Terminal, that you are working in.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#import",
    "href": "02_neovim.html#import",
    "title": "Neovim",
    "section": "Import",
    "text": "Import\n\nVersus last time, we now have a piecewise function written in a .py file we can reference.\nTo do so, we:\n\nType import followed by a space\nType the filename less the .py extension\nIt should look like this:\n\n\nPS C:\\Users\\calvin&gt; python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import pw\n&gt;&gt;&gt;",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#modules",
    "href": "02_neovim.html#modules",
    "title": "Neovim",
    "section": "Modules",
    "text": "Modules\n\nimport pw will introduce a new variable to Python to which we can refer by name (pw)\nIt is of a new type for us, “module”\n\n&gt;&gt;&gt; type(pw)\n&lt;class 'module'&gt;\n\nModules correspond to .py files!\n\n&gt;&gt;&gt; pw\n&lt;module 'pw' from 'C:\\\\Users\\\\calvin\\\\pw.py'&gt;\n\n(The from will look different on different computers)",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#importing-functions",
    "href": "02_neovim.html#importing-functions",
    "title": "Neovim",
    "section": "Importing Functions",
    "text": "Importing Functions\n\nWe can use functions inside modules in a few ways.\nFirst, we can use the module name (pw) followed by a dot or period (.) followed by the name of the function.\n\n&gt;&gt;&gt; pw.piecewise(-1)\n14",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#renaming-functions",
    "href": "02_neovim.html#renaming-functions",
    "title": "Neovim",
    "section": "Renaming Functions",
    "text": "Renaming Functions\n\nSecond, we can just use single equals assignment\n\n&gt;&gt;&gt; piecewise = pw.piecewise\n&gt;&gt;&gt; piecewise(4)\n9",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#using-from",
    "href": "02_neovim.html#using-from",
    "title": "Neovim",
    "section": "Using from",
    "text": "Using from\n\nThird, we can use the from keyword in our import.\n\nThis is by far preferred (it is more clear)\n\n\n&gt;&gt;&gt; from pw import piecewise\n&gt;&gt;&gt; piecewise(11)\n-9\n\nI only show you the other methods to make it clear what this method is doing.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#exit-python",
    "href": "02_neovim.html#exit-python",
    "title": "Neovim",
    "section": "Exit Python",
    "text": "Exit Python\n\nOftentimes, we’ll run a bit of Python then want to go back to the command line to use nvim\n\n\n\n\n\n\n\nexit()\n\n\n\nYou can exit the Python &gt;&gt;&gt; prompt back to Windows &gt; or MacOS $ at any time:\n\nUse exit()\nUse quit()\nUse ctrl/cmd+z\n\nPractice starting and leaving Python a few times!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#command-line-utilities",
    "href": "02_neovim.html#command-line-utilities",
    "title": "Neovim",
    "section": "Command Line Utilities",
    "text": "Command Line Utilities\nI find the following tedious:\n\nnvim\nWrite some code\n:w somefile.py\nESC then :x\npython\nfrom somefile import somefunction\nsomefunction(x)\nexit()",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#alternative",
    "href": "02_neovim.html#alternative",
    "title": "Neovim",
    "section": "Alternative",
    "text": "Alternative\n\nWe will instead:\n\nShow how to how run script files\nShow how to provide input to script files",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#hello-terminal",
    "href": "02_neovim.html#hello-terminal",
    "title": "Neovim",
    "section": "Hello, Terminal",
    "text": "Hello, Terminal\n\nTo begin, we will do terminal “Hello, World!”\nI use nvim hi.py to create and open a new file named hi.py\nThen I write:\n\n\n\nhi.py\n\nprint(\"Hello, terminal!\")",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#running-scripts",
    "href": "02_neovim.html#running-scripts",
    "title": "Neovim",
    "section": "Running Scripts",
    "text": "Running Scripts\n\nI save and exit via :x\nThen I run the Python script via python hi.py\nFor me, it looks like this:\n\n$ nvim hi.py\n$ python3 hi.py\nHello, terminal!\n$",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#what-happened",
    "href": "02_neovim.html#what-happened",
    "title": "Neovim",
    "section": "What happened?",
    "text": "What happened?\n\nBasically, Python runs the code written in the file as if it were entered at the prompts.\nIt then provides the expected print statements.\nWe can run multiple times without rewriting the script.",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#piecewise-script",
    "href": "02_neovim.html#piecewise-script",
    "title": "Neovim",
    "section": "Piecewise Script",
    "text": "Piecewise Script\n\nSay we wish to find the piecewise results from the prior lecture.\nnvim pw.py\nI use G to jump to the end of the file\n\nThis is a “vim motion”\n\nI use i to change into insert mode, and add:\n\n\n\npw.py\n\nfor e in [-1, 4, 5, 8, 11]:\n    print([e, piecewise(e)])\n\n\nSave and exit with (escape then) :x",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#test-it",
    "href": "02_neovim.html#test-it",
    "title": "Neovim",
    "section": "Test it",
    "text": "Test it\n$ nvim pw.py\n$ python3 pw.py\n[-1, 14]\n[4, 9]\n[5, 9]\n[8, 9]\n[11, -9]\n$",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#using-input",
    "href": "02_neovim.html#using-input",
    "title": "Neovim",
    "section": "Using input",
    "text": "Using input\n\nFortunately, Python has a built-in function that is (basically) the opposite of print\nWithin the terminal, run python\nThen within Python, call input()\n\n&gt;&gt;&gt; input() \n\nWhat happens?",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#what-if",
    "href": "02_neovim.html#what-if",
    "title": "Neovim",
    "section": "What if?",
    "text": "What if?\n\nWe want to be able to check values without either\n\nOpening python and doing an import, or\nOpening nvim and editing the list\n\nWe can do that by providing input\n\nWe write a script that expects us to type in some information!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#python-input",
    "href": "02_neovim.html#python-input",
    "title": "Neovim",
    "section": "Python input",
    "text": "Python input\n\nPython helpfully has an input that is basically the opposite of print.\ninput\nIt is easiest to learn by trying it out!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#providing-input",
    "href": "02_neovim.html#providing-input",
    "title": "Neovim",
    "section": "Providing input",
    "text": "Providing input\n\nOpen Python\nCall the function input()\nType something - anything - then press enter.\n\n&gt;&gt;&gt; input()\nsomething anything\n'something anything'\n\nThe input() function returns the text that is typed in",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#script-input",
    "href": "02_neovim.html#script-input",
    "title": "Neovim",
    "section": "Script input",
    "text": "Script input\n\nLet’s make a little script to try out input()\n\n\n\nreply.py\n\nx = input()\nprint(x)\n\n\nThink about the steps to create and run this file!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#example",
    "href": "02_neovim.html#example",
    "title": "Neovim",
    "section": "Example",
    "text": "Example\n$ nvim\n$ python3 reply.py\nI wrote this text then pressed enter.\nI wrote this text then pressed enter.\n$\n\nTry it out!",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#return-v.-print",
    "href": "02_neovim.html#return-v.-print",
    "title": "Neovim",
    "section": "Return v. Print",
    "text": "Return v. Print\n\n\n\n\n\n\nPrint, Not Return\n\n\n\n\nTo see the results of some expression or computation other work in the terminal, we must print within scripts.\nprint() for terminal\nreturn within Python",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#a-wrinkle",
    "href": "02_neovim.html#a-wrinkle",
    "title": "Neovim",
    "section": "A Wrinkle",
    "text": "A Wrinkle\n\nThere’s one little problem here.\nLet’s update pw.py to to run on input() and see what happens.\n\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\nx = input()\ny = piecewise(x)\nprint(y)",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#uh-oh",
    "href": "02_neovim.html#uh-oh",
    "title": "Neovim",
    "section": "Uh oh!",
    "text": "Uh oh!\n\nI see the following:\n\n$ python3 pw.py\n10\nTraceback (most recent call last):\n  File \"/home/user/pw.py\", line 10, in &lt;module&gt;\n    y = piecewise(x)\n  File \"/home/user/pw.py\", line 2, in piecewise\n    if (x &lt; 4):\nTypeError: '&lt;' not supported between instances of 'str' and 'int'\n$",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#recall",
    "href": "02_neovim.html#recall",
    "title": "Neovim",
    "section": "Recall",
    "text": "Recall\n\nWe worked with different types last time:\n\nThink about what is happening here\n\n\n\n[type(1), type(1 == 2), type([1,2]), type({1,2})]\n\n[int, bool, list, set]\n\n\n\nThe type of input() is a new type - str\n\nShort for “string” - as in string of characters\n\n\n\ntype(\"Hello, world!\")\n\nstr",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#casting",
    "href": "02_neovim.html#casting",
    "title": "Neovim",
    "section": "Casting",
    "text": "Casting\n\nChanging data of one type (like str) into another (like int) is called casting\nIn Python, to cast we use the name of the type we want as a function on the value in the type we don’t want.\nEasy to try within python",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#try-it",
    "href": "02_neovim.html#try-it",
    "title": "Neovim",
    "section": "Try it",
    "text": "Try it\n&gt;&gt;&gt; x = input()\n10\n&gt;&gt;&gt; x\n'10'\n&gt;&gt;&gt; type(x)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; y = int(x)\n&gt;&gt;&gt; y\n10\n&gt;&gt;&gt; type(y)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; y &lt; 11\nTrue\n\nPython shows something is a string by enclosing it within quote marks ''",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#fix-pw.py",
    "href": "02_neovim.html#fix-pw.py",
    "title": "Neovim",
    "section": "Fix pw.py",
    "text": "Fix pw.py\n\n\npw.py\n\ndef piecewise(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x\n\nx = input()\ny = int(x)\nz = piecewise(y)\nprint(z)",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#use-it",
    "href": "02_neovim.html#use-it",
    "title": "Neovim",
    "section": "Use it",
    "text": "Use it\n$ nvim pw.py\n$ python3 pw.py\n10\n-8\n$ python3 pw.py\n-1\n14\n$",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#income-tax",
    "href": "02_neovim.html#income-tax",
    "title": "Neovim",
    "section": "Income Tax",
    "text": "Income Tax\n\nWe’ll return to the income tax example, and\nAdd a wrinkle.\nHere’s an income tax solution:\n\n\n\nCode\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay &gt; bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#arguments",
    "href": "02_neovim.html#arguments",
    "title": "Neovim",
    "section": "Arguments",
    "text": "Arguments\n\nThere is one other way to specify what you want a script to do.\nCommand line arguments\nThis is my favorite way (simpliest to use)\n\n(Bit harder to write)\n\nIt is based on the Python sys module",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#sys",
    "href": "02_neovim.html#sys",
    "title": "Neovim",
    "section": "sys",
    "text": "sys\n\nCreate and try out the following file:\n\n\n\nargs.py\n\nimport sys\n\nprint(sys.argv)\n\n\nWhat does it do?",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#argv",
    "href": "02_neovim.html#argv",
    "title": "Neovim",
    "section": "‘argv’",
    "text": "‘argv’\n\n‘argv’ stands for “argument vector”\nYou may have noticed it is a list\n\nOther programming languages sometimes call lists vectors\nComputer systems often call lists vectors\nPython follows this convention",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#add-an-arg",
    "href": "02_neovim.html#add-an-arg",
    "title": "Neovim",
    "section": "Add an arg",
    "text": "Add an arg\n\nWhat happens if you do this?\n\n$ python3 args.py hello world",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#remember-1",
    "href": "02_neovim.html#remember-1",
    "title": "Neovim",
    "section": "Remember!",
    "text": "Remember!\n\n\n\n\n\n\nLists begin with zero!\n\n\n\n\nWhen using argv, recall it is a Python list!\nThe initial element - what we would often call first - is at position zero\nWould would print only this element as follows:\n\n\n\nargs.py\n\nimport sys\n\nprint(sys.argv[0])",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#exercise-2",
    "href": "02_neovim.html#exercise-2",
    "title": "Neovim",
    "section": "Exercise",
    "text": "Exercise\n\nCreate a file tax.py\nHave it accept an income as a command line argument\nHave it print a tax cost at command line.\nHere’s an example how it should work!\n\n$ python3 tax.py 40000\n115529.25",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#challenge-problem",
    "href": "02_neovim.html#challenge-problem",
    "title": "Neovim",
    "section": "Challenge Problem",
    "text": "Challenge Problem\n\nAccept two command line arguments\n\nIncome, and\nOne of ['single', 'married', 'separate', 'head']\n\nPrint the tax regardless of “single-ness”",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "02_neovim.html#solution",
    "href": "02_neovim.html#solution",
    "title": "Neovim",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n\nimport sys\n\nprint(single_tax(int(sys.argv[1])))",
    "crumbs": [
      "Neovim"
    ]
  },
  {
    "objectID": "04_numpy.rjs.html#on-numpy",
    "href": "04_numpy.rjs.html#on-numpy",
    "title": "NumPy",
    "section": "On NumPy",
    "text": "On NumPy\nBasically, to do scientific computing it would be nice to have:\n\na powerful N-dimensional array object\nsophisticated (broadcasting) functions\ntools for integrating C/C++ and Fortran code\nuseful linear algebra, Fourier transform, and random number capabilities\n\n(These are the stated features of NumPy.)"
  },
  {
    "objectID": "04_numpy.rjs.html#relevance",
    "href": "04_numpy.rjs.html#relevance",
    "title": "NumPy",
    "section": "Relevance",
    "text": "Relevance\n\nWe have essentially been using 1- and 2-dimensional arrays already!\nHere is the examples intercepts.py solution from last time\n\n\n\nCode\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]"
  },
  {
    "objectID": "04_numpy.rjs.html#we-will",
    "href": "04_numpy.rjs.html#we-will",
    "title": "NumPy",
    "section": "We will",
    "text": "We will\n\nChange our existing lists, which we understand as “N-dimensional arrays” into NumPy arrays.\nShow the benefits of this arrangement.\nShow other NumPy features."
  },
  {
    "objectID": "04_numpy.rjs.html#pypi",
    "href": "04_numpy.rjs.html#pypi",
    "title": "NumPy",
    "section": "PyPI",
    "text": "PyPI\n\nThe Python Package Index (PyPI) is a repository of software for the Python programming language.\n\n\nNumPy is a Python package.\n\nIt is installed separately from Python, but\nMay be installed using Python-based tools."
  },
  {
    "objectID": "04_numpy.rjs.html#pip",
    "href": "04_numpy.rjs.html#pip",
    "title": "NumPy",
    "section": "pip",
    "text": "pip\n\nThe most popular tool for installing Python packages, and the one included with modern versions of Python.\n\n\npip is a command line utility\nFor years pip was the only real options for installing Python programs, but has experienced limitations as the package ecosystem has grown quite large."
  },
  {
    "objectID": "04_numpy.rjs.html#using-pip",
    "href": "04_numpy.rjs.html#using-pip",
    "title": "NumPy",
    "section": "Using pip",
    "text": "Using pip\n\nUse as an argument to python or python3\n\npython3 -m pip install numpy\n\nIt may take a moment to install."
  },
  {
    "objectID": "04_numpy.rjs.html#verify-install",
    "href": "04_numpy.rjs.html#verify-install",
    "title": "NumPy",
    "section": "Verify Install",
    "text": "Verify Install\n\nThe following verifies the the NumPy install was successful\nWe see the return of import\n\nIntroduce as, used to shorten names\nWe could have done import piecewise as pw\n\n\n\nimport numpy as np\n\nprint(np.__version__)\n\n2.0.1"
  },
  {
    "objectID": "04_numpy.rjs.html#recall",
    "href": "04_numpy.rjs.html#recall",
    "title": "NumPy",
    "section": "Recall",
    "text": "Recall\n\nYou may wish to review import\nConsult Neovim -&gt; `import’"
  },
  {
    "objectID": "04_numpy.rjs.html#numpy-arrays",
    "href": "04_numpy.rjs.html#numpy-arrays",
    "title": "NumPy",
    "section": "NumPy Arrays",
    "text": "NumPy Arrays\n\nThe first thing to do in NumPy is make an array.\nIn general we use NumPy arrays when:\n\nWe are dealing with lists of numbers\nWe care about performance, or\nWe want to use advanced mathematical operations"
  },
  {
    "objectID": "04_numpy.rjs.html#list-to-array",
    "href": "04_numpy.rjs.html#list-to-array",
    "title": "NumPy",
    "section": "List to Array",
    "text": "List to Array\n\nWe define a list of lists:\n\n\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]"
  },
  {
    "objectID": "04_numpy.rjs.html#lists-of-lists",
    "href": "04_numpy.rjs.html#lists-of-lists",
    "title": "NumPy",
    "section": "Lists of lists",
    "text": "Lists of lists\n\nIt is worth while to examine taxes a bit\n\n\ntaxes\n\n[[9275, 0.1],\n [37650, 0.15],\n [91150, 0.25],\n [190150, 0.28],\n [413350, 0.33],\n [415051, 0.35]]"
  },
  {
    "objectID": "04_numpy.rjs.html#check-types",
    "href": "04_numpy.rjs.html#check-types",
    "title": "NumPy",
    "section": "Check Types",
    "text": "Check Types\n\nWe can verify it is a list.\n\n\ntype(taxes)\n\nlist\n\n\n\nWe can verify it’s initial element is also a list.\n\n\ntype(taxes[0])\n\nlist\n\n\n\nSince taxes[0] is a list, we can look at that list’s initial element.\n\n\ntype(taxes[0][0])\n\nint"
  },
  {
    "objectID": "04_numpy.rjs.html#versus-arrays",
    "href": "04_numpy.rjs.html#versus-arrays",
    "title": "NumPy",
    "section": "Versus arrays",
    "text": "Versus arrays\n\nWe have a list of lists of ints (like integers, round numbers).\nOr do we?\n\n\ntype(taxes[0][1])\n\nfloat\n\n\n\nIn fact, the tax rates are not round numbers, so they are “floats”.\nNumPy will help us manage when we use “floating point numbers” (have a decimal point) and integers (don’t)."
  },
  {
    "objectID": "04_numpy.rjs.html#niceties",
    "href": "04_numpy.rjs.html#niceties",
    "title": "NumPy",
    "section": "Niceties",
    "text": "Niceties\n\nEach of the internal lists of numbers is of the same length.\nThat lets us do this:\n\n\n\n\nCutoff\nRate\n\n\n\n\n9275\n.10\n\n\n37650\n.15\n\n\n91150\n.25\n\n\n190150\n.28\n\n\n413350\n.33\n\n\n415051\n.35"
  },
  {
    "objectID": "04_numpy.rjs.html#contingencies",
    "href": "04_numpy.rjs.html#contingencies",
    "title": "NumPy",
    "section": "Contingencies",
    "text": "Contingencies\n\nThis… isn’t always true.\nIn our case, for example, we have a .396 rate with no cutoff.\nWe just can’t express this as an array:\n\n\n\n\nCutoff\nRate\n\n\n\n\n413350\n.33\n\n\n415051\n.35\n\n\n\n.396"
  },
  {
    "objectID": "04_numpy.rjs.html#takeaways",
    "href": "04_numpy.rjs.html#takeaways",
    "title": "NumPy",
    "section": "Takeaways:",
    "text": "Takeaways:\n\nBe ready to deal with things being almost arrays, but ultimately only being lists-of-lists.\nThere’s ways to deal with this (we’ve seen a few, sneakily)"
  },
  {
    "objectID": "04_numpy.rjs.html#arrays-1",
    "href": "04_numpy.rjs.html#arrays-1",
    "title": "NumPy",
    "section": "Arrays",
    "text": "Arrays\n\nIn computer programming, an array is a structure for storing and retrieving data. We often talk about an array as if it were a grid in space, with each cell storing one element of the data. For instance, if each element of the data were a number, we might visualize a “one-dimensional” array like a list:\n\n\\[\n    \\begin{array}{|c||c|c|c|}\n    \\hline\n    9275 & 37650 & 91150 & 190150 \\\\\n    \\hline\n    \\end{array}\n\\]"
  },
  {
    "objectID": "04_numpy.rjs.html#tables",
    "href": "04_numpy.rjs.html#tables",
    "title": "NumPy",
    "section": "Tables",
    "text": "Tables\n\nA two-dimensional array would be like a table:\n\n\\[\n    \\begin{array}{|c||c|c|c|}\n    \\hline\n    9275 & 37650 & 91150 & 190150 \\\\\n    \\hline\n    .10 & .15 & .25 & .28 \\\\\n    \\hline\n    0 & -463.75 & -6963.25 & -16470.75 \\\\\n    \\hline\n    \\end{array}\n\\]"
  },
  {
    "objectID": "04_numpy.rjs.html#ndarray",
    "href": "04_numpy.rjs.html#ndarray",
    "title": "NumPy",
    "section": "ndarray",
    "text": "ndarray\n\nA three-dimensional array would be like a set of tables, perhaps stacked as though they were printed on separate pages. In NumPy, this idea is generalized to an arbitrary number of dimensions, and so the fundamental array class is called ndarray: it represents an “N-dimensional array”.\n\n\nThe most obvious 3d example would be that taxes part of an array of tax policies\n\n[\"Single\", \"Married, joint\", \"Married, separate\", \"Head of Household\"]"
  },
  {
    "objectID": "04_numpy.rjs.html#making-arrays",
    "href": "04_numpy.rjs.html#making-arrays",
    "title": "NumPy",
    "section": "Making Arrays",
    "text": "Making Arrays\n\nMake an array with np.array()\n\nOr numpy.array if you used import numpy\n\nThey look like this:\n\n\narr = np.array(taxes)\narr\n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\nOur integers are gone - everything in scientific notation"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-scientific-notation",
    "href": "04_numpy.rjs.html#aside-scientific-notation",
    "title": "NumPy",
    "section": "Aside: Scientific Notation",
    "text": "Aside: Scientific Notation\n\nScientific notation is a way of expressing numbers that are too large or too small to be conveniently written in decimal form, since to do so would require writing out an inconveniently long string of digits.\n\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-explanation",
    "href": "04_numpy.rjs.html#aside-explanation",
    "title": "NumPy",
    "section": "Aside: Explanation",
    "text": "Aside: Explanation\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]\n\n\\(a\\) (the coefficient or mantissa) is a number greater than or equal to 1 and less than 10 (\\(1 \\le |a| &lt; 10\\)).\n\\(10\\) is the base.\n\\(b\\) (the exponent) is an integer."
  },
  {
    "objectID": "04_numpy.rjs.html#aside-physical-examples",
    "href": "04_numpy.rjs.html#aside-physical-examples",
    "title": "NumPy",
    "section": "Aside: Physical Examples",
    "text": "Aside: Physical Examples\n\nSpeed of light: The speed of light in a vacuum is approximately \\(300,000,000 \\text{ m/s}\\) \\[\n3 \\times 10^8 \\text{ m/s}\n\\]\nMass of an electron: The mass of an electron is approximately \\(0.00000000000000000000000000091093837 \\text{ g}\\). \\[\n9.1093837 \\times 10^{-28} \\text{ g}\n\\]"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-economic-examples",
    "href": "04_numpy.rjs.html#aside-economic-examples",
    "title": "NumPy",
    "section": "Aside: Economic Examples",
    "text": "Aside: Economic Examples\n\nWe can use social science numbers.\nLabor Market Outcomes of College Graduates by Major\nComputer scientists have a $80,000 median wage early career\n\n\\(8.0000 \\times 10^4\\)\n\nAnd 6.1% unemployment\n\n\\(6.1 \\times 10^{-2}\\)"
  },
  {
    "objectID": "04_numpy.rjs.html#inspecting-arrays",
    "href": "04_numpy.rjs.html#inspecting-arrays",
    "title": "NumPy",
    "section": "Inspecting Arrays",
    "text": "Inspecting Arrays\n\nGiven some array, we can look up elements in an array as we did with lists.\nWe refer to zero as the “index” of the initial element of an array (or list).\n\n\n\n\ntaxes[0]\n\n[9275, 0.1]\n\n\n\n\narr[0]\n\narray([9.275e+03, 1.000e-01])\n\n\n\n\nWe look up the same element by the same index in both Python lists and NumPy arrays."
  },
  {
    "objectID": "04_numpy.rjs.html#slices",
    "href": "04_numpy.rjs.html#slices",
    "title": "NumPy",
    "section": "Slices",
    "text": "Slices\n\nPython and NumPy support slicing\nThis takes multiple elements of an array by specifying a range of indices\nLet’s make a one-dimensional array to make matters simpler.\n\n\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n\n\n\n\ncolor_lst = colors\ncolor_lst[1:4]\n\n['orange', 'yellow', 'green']\n\n\n\n\ncolor_arr = np.array(colors)\ncolor_arr[1:4]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\n\ndtype is data type - We’ll cover it soon."
  },
  {
    "objectID": "04_numpy.rjs.html#understanding-slices",
    "href": "04_numpy.rjs.html#understanding-slices",
    "title": "NumPy",
    "section": "Understanding slices",
    "text": "Understanding slices\n\nThe slice 1:4 takes all elements at index beginning at 1 and stopping before getting to index 4.\n\n\\[\n\\small\n\\begin{array}{|l|c|c|c|c|c|c|}\n\\hline\n\\textbf{Index} & 0 & 1 & 2 & 3 & 4 & 5 & 6   \\\\\n\\hline\n\\textbf{Element} & red & orange& yellow& green& blue& indigo& violet\\\\\n\\hline\n\\end{array}\n\\]\n\\[\n\\small\n\\begin{array}{|l|c|c|c|}\n\\hline\n\\textbf{Index} & 1 & 2 & 3   \\\\\n\\hline\n\\textbf{Element} & orange& yellow& green\\\\\n\\hline\n\\end{array}\n\\]"
  },
  {
    "objectID": "04_numpy.rjs.html#omiting-values",
    "href": "04_numpy.rjs.html#omiting-values",
    "title": "NumPy",
    "section": "Omiting Values",
    "text": "Omiting Values\n\nIf we omit the value before the : from the slice, it is treated as if a zero was provided.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\ncolor_arr[0:4]\n\narray(['red', 'orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\ncolor_arr[:4]\n\narray(['red', 'orange', 'yellow', 'green'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#omiting-end",
    "href": "04_numpy.rjs.html#omiting-end",
    "title": "NumPy",
    "section": "Omiting End",
    "text": "Omiting End\n\nIf we omit the value after the : from the slice, it is as if the length was provided.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nlen gives the length of a list or array\n\n\nlen(color_arr)\n\n7\n\n\n\ncolor_arr[4:7]\n\narray(['blue', 'indigo', 'violet'], dtype='&lt;U6')\n\n\n\ncolor_arr[4:]\n\narray(['blue', 'indigo', 'violet'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#steps",
    "href": "04_numpy.rjs.html#steps",
    "title": "NumPy",
    "section": "Steps",
    "text": "Steps\n\nPython and NumPy slices have an additional feature I find quite nice called “steps”\nWe specify a slice:\n\n\ncolor_arr[1:4]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\nWe add a third value\n\n\ncolor_arr[1:4:1]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#step-size",
    "href": "04_numpy.rjs.html#step-size",
    "title": "NumPy",
    "section": "Step Size",
    "text": "Step Size\n– We add a third value\n\ncolor_arr[1:4:1]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\nThis value determines how far to move over the original array between each element shown.\n\nLet’s look at 2 - every other element.\n\n\n\ncolor_arr[1:4:2]\n\narray(['orange', 'green'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#example",
    "href": "04_numpy.rjs.html#example",
    "title": "NumPy",
    "section": "Example",
    "text": "Example\n\nIn kindergarten, I learned that red, yellow, and blue were primary colors.\n\nI’m relatively unconvinced by that at this time, but it’s a good example.\n\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nAnd the primaries:\n\n\ncolor_arr[0:5:2]\n\narray(['red', 'yellow', 'blue'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#step-ommissions",
    "href": "04_numpy.rjs.html#step-ommissions",
    "title": "NumPy",
    "section": "Step Ommissions",
    "text": "Step Ommissions\n\nWe can omit start, stop, or both and still take steps.\n\n\ncolor_arr[::3]\n\narray(['red', 'green', 'violet'], dtype='&lt;U6')\n\n\n\nWe can use a negative step to reverse.\n\n\ncolor_arr[::-1]\n\narray(['violet', 'indigo', 'blue', 'green', 'yellow', 'orange', 'red'],\n      dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-negatives",
    "href": "04_numpy.rjs.html#aside-negatives",
    "title": "NumPy",
    "section": "Aside: Negatives",
    "text": "Aside: Negatives\n\nNegative starts and stops can also be used\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nThey simply measure distance from the end.\n\n\ncolor_arr[:-2]\n\narray(['red', 'orange', 'yellow', 'green', 'blue'], dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#coordinates",
    "href": "04_numpy.rjs.html#coordinates",
    "title": "NumPy",
    "section": "Coordinates",
    "text": "Coordinates\n\nVersus Python lists-of-lists.\n\n\ntaxes[1][1]\n\n0.15\n\n\n\nNumPy arrays can specify coordinates - indices of multiple dimensions - in a single set of brackets.\n\n\narr[1][1], arr[1, 1]\n\n(np.float64(0.15), np.float64(0.15))"
  },
  {
    "objectID": "04_numpy.rjs.html#coordinate-slices",
    "href": "04_numpy.rjs.html#coordinate-slices",
    "title": "NumPy",
    "section": "Coordinate slices",
    "text": "Coordinate slices\n\nI recommend using the comma notation.\nOtherwise I get unexpected behavior.\n\n\n\n\n# reverse in both dimensions\narr[::-1][::-1] \n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\n\n# reverse in both dimensions\narr[::-1,::-1]\n\narray([[3.50000e-01, 4.15051e+05],\n       [3.30000e-01, 4.13350e+05],\n       [2.80000e-01, 1.90150e+05],\n       [2.50000e-01, 9.11500e+04],\n       [1.50000e-01, 3.76500e+04],\n       [1.00000e-01, 9.27500e+03]])\n\n\n\n\nTakeaway: Always use [x,y] instead of [x][y]\nThings like this are we use NumPy!"
  },
  {
    "objectID": "04_numpy.rjs.html#updates",
    "href": "04_numpy.rjs.html#updates",
    "title": "NumPy",
    "section": "Updates",
    "text": "Updates\n\nWe can also update entries via =\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nUse (1) name of array, (2) index of element, (3) =, (4) new element\n\n\ncolor_arr[-1] = 'purple'\n\n\nThe array now has that element/index.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple'],\n      dtype='&lt;U6')"
  },
  {
    "objectID": "04_numpy.rjs.html#why-numpy",
    "href": "04_numpy.rjs.html#why-numpy",
    "title": "NumPy",
    "section": "Why NumPy?",
    "text": "Why NumPy?\n\nNumPy vectors can do a very cool thing that lists can’t.\nWe use it a lot in science.\nVector operations."
  },
  {
    "objectID": "04_numpy.rjs.html#vector-ops",
    "href": "04_numpy.rjs.html#vector-ops",
    "title": "NumPy",
    "section": "Vector Ops",
    "text": "Vector Ops\n\nLet’s compare Python\n\n\nl1 = [1,2,3]\nl2 = [1,1,1]\nl1 + l2\n\n[1, 2, 3, 1, 1, 1]\n\n\n\nTo NumPy\n\n\na1 = np.array(l1)\na2 = np.array(l2)\na1 + a2\n\narray([2, 3, 4])\n\n\n\nBy the way, vectorization is really fast.\nOur first “high performance computing” idea."
  },
  {
    "objectID": "04_numpy.rjs.html#example-1",
    "href": "04_numpy.rjs.html#example-1",
    "title": "NumPy",
    "section": "Example",
    "text": "Example\n\nSuppose you need to convert some temperatures.\n\n\n# Portland highs and lows 5/26/25-6/2/25 in degF\ntemps = np.array([70, 50, 81, 60, 85, 57, 70, 52, 84, 58, 87, 58, 74, 53, 70, 54])\ntemps -= 32\ntemps *= 5\ntemps //= 9\ntemps\n\narray([21, 10, 27, 15, 29, 13, 21, 11, 28, 14, 30, 14, 23, 11, 21, 12])"
  },
  {
    "objectID": "04_numpy.rjs.html#aside",
    "href": "04_numpy.rjs.html#aside",
    "title": "NumPy",
    "section": "Aside: //",
    "text": "Aside: //\n\nNumPy requires arrays to be of a certain kind of number.\n30 is an integer.\n30/9 is a decimal value…\nPython furnishes special // integer division.\n\nIt truncates (does not round) the result.\n\n\n\nnp.array([1,2,3,4,5,6,7,8,9,10]) // 3\n\narray([0, 0, 1, 1, 1, 2, 2, 2, 3, 3])\n\n\n\nTry using / there. What happens?"
  },
  {
    "objectID": "04_numpy.rjs.html#use-case",
    "href": "04_numpy.rjs.html#use-case",
    "title": "NumPy",
    "section": "Use case",
    "text": "Use case\n\nSlices and vectorization are very useful in the income tax example.\nWe:\n\nHad income cutoffs, that were\nThe beginning of some tax brackets, but\nThe end of other tax brackets\nOffset by one (1)"
  },
  {
    "objectID": "04_numpy.rjs.html#building-brackets",
    "href": "04_numpy.rjs.html#building-brackets",
    "title": "NumPy",
    "section": "Building Brackets",
    "text": "Building Brackets\n\nLet’s refresh on what the tax bracket array looked like.\n\n\narr\n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\nInitial tax bracket goes zero and to 9275\nThe next goes from 9275 to 37650.\nSo 9275 is useful to two brackets."
  },
  {
    "objectID": "04_numpy.rjs.html#begin-and-end",
    "href": "04_numpy.rjs.html#begin-and-end",
    "title": "NumPy",
    "section": "Begin and end",
    "text": "Begin and end\n\nLet’s grab just the cutoffs.\n\n\ncutoffs = arr[:,0]\ncutoffs\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.])\n\n\n\n[:, 0] means for every row (slice :) take the initial columns (index 0)"
  },
  {
    "objectID": "04_numpy.rjs.html#insert",
    "href": "04_numpy.rjs.html#insert",
    "title": "NumPy",
    "section": "Insert",
    "text": "Insert\n\nThe initial bracket begins at 0 and the last bracket ends at infinity.\n\nNumPy knows about infinity! np.inf\n\nWe can use NumPy insert to add an element at an index:\n\n\n# Insert to (a) an array at (b) some index (c) some value\na = cutoffs\nb = len(cutoffs)\nc = np.inf\ncutoffs = np.insert(a, b, c)\ncutoffs\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.,     inf])"
  },
  {
    "objectID": "04_numpy.rjs.html#append",
    "href": "04_numpy.rjs.html#append",
    "title": "NumPy",
    "section": "Append",
    "text": "Append\n\nI usually don’t insert, I append.\nThis allows adding two arrays together, like how Python + works on lists.\n\n\n# Smoosh arrays together.\ncutoffs = np.append([0],cutoffs)\ncutoffs\n\narray([     0.,   9275.,  37650.,  91150., 190150., 413350., 415051.,\n           inf])"
  },
  {
    "objectID": "04_numpy.rjs.html#slicing",
    "href": "04_numpy.rjs.html#slicing",
    "title": "NumPy",
    "section": "Slicing",
    "text": "Slicing\n\nNow we can take the beginning of every bracket, by index:\n\n\nbegin = cutoffs[:-1]\nbegin\n\narray([     0.,   9275.,  37650.,  91150., 190150., 413350., 415051.])\n\n\n\nAnd the end\n\n\nend = cutoffs[1:]\nend\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.,     inf])"
  },
  {
    "objectID": "04_numpy.rjs.html#vector-minus",
    "href": "04_numpy.rjs.html#vector-minus",
    "title": "NumPy",
    "section": "Vector Minus",
    "text": "Vector Minus\n\nWe can see how big each bracket is.\n\n\nbracket_size = end - begin\nbracket_size\n\narray([  9275.,  28375.,  53500.,  99000., 223200.,   1701.,     inf])"
  },
  {
    "objectID": "04_numpy.rjs.html#vector-times",
    "href": "04_numpy.rjs.html#vector-times",
    "title": "NumPy",
    "section": "Vector Times",
    "text": "Vector Times\n\nWe can see how much tax is spent in each bracket.\n\nWe will “cut off” the last bracket first\nIt doesn’t really have a size?\n\n\n\nbracket_cost = bracket_size[:-1] * arr[:, 1]\nbracket_cost\n\narray([  927.5 ,  4256.25, 13375.  , 27720.  , 73656.  ,   595.35])\n\n\n\nWhat happens if we don’t cut off the last bracket and try to multiply a vector of length 7 by a vector of length 6?"
  },
  {
    "objectID": "04_numpy.rjs.html#accumulation",
    "href": "04_numpy.rjs.html#accumulation",
    "title": "NumPy",
    "section": "Accumulation",
    "text": "Accumulation\n\nWhile bracket_cost does correctly describe the cost within on bracket, someone in the n+1’th bracket pays the cost the previous n brackets.\nSomeone how we want to sum those up.\nNumPy has many built-in array functions, including np.cumsum.\n\n\ntotal_cost = np.cumsum(bracket_cost)\ntotal_cost\n\narray([   927.5 ,   5183.75,  18558.75,  46278.75, 119934.75, 120530.1 ])"
  },
  {
    "objectID": "04_numpy.rjs.html#numpy-does-a-lot",
    "href": "04_numpy.rjs.html#numpy-does-a-lot",
    "title": "NumPy",
    "section": "NumPy does a lot!",
    "text": "NumPy does a lot!\n\nArrays mostly, but including:\nVector operations called “broadcasting”.\nIndices and slices matter a lot.\nContants like np.inf support mathematics\nAccumulation functions we don’t have to write ourselves (which we’d have to do via loops)"
  },
  {
    "objectID": "04_numpy.rjs.html#on-names",
    "href": "04_numpy.rjs.html#on-names",
    "title": "NumPy",
    "section": "On Names",
    "text": "On Names\n\nYou might hear of a 0-D (zero-dimensional) array referred to as a “scalar”, a 1-D (one-dimensional) array as a “vector”, a 2-D (two-dimensional) array as a “matrix”, or an N-D (N-dimensional, where “N” is typically an integer greater than 2) array as a “tensor”.\n\n\nFor clarity, it is best to avoid the mathematical terms when referring to an array because the mathematical objects with these names behave differently than arrays (e.g. “matrix” multiplication is fundamentally different from “array” multiplication), and there are other objects in the scientific Python ecosystem that have these names (e.g. the fundamental data structure of PyTorch is the “tensor”)."
  },
  {
    "objectID": "04_numpy.rjs.html#using-numpy",
    "href": "04_numpy.rjs.html#using-numpy",
    "title": "NumPy",
    "section": "Using NumPy",
    "text": "Using NumPy\n\nToday we successfully recomputed the points of the point-intercept form of the income tax problem.\nUsing NumPy, starting with taxes, create the array on the right:\n\n\n\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\n\n\n\nnp.array([[ 9.275000e+03,  1.000000e-01,  0.000000e+00],\n          [ 3.765000e+04,  1.500000e-01, -4.637500e+02],\n          [ 9.115000e+04,  2.500000e-01, -4.228750e+03],\n          [ 1.901500e+05,  2.800000e-01, -6.963250e+03],\n          [ 4.133500e+05,  3.300000e-01, -1.647075e+04],\n          [ 4.150510e+05,  3.500000e-01, -2.473775e+04]])"
  },
  {
    "objectID": "04_numpy.rjs.html#transpose",
    "href": "04_numpy.rjs.html#transpose",
    "title": "NumPy",
    "section": "Transpose",
    "text": "Transpose\n\nThere are many ways to solve this problem!\nThings will be easier with the following:\n\n\ntaxes.shape\n\n(6, 2)\n\n\n\ntaxes.reshape(2,6)\n\narray([[9.27500e+03, 1.00000e-01, 3.76500e+04, 1.50000e-01, 9.11500e+04,\n        2.50000e-01],\n       [1.90150e+05, 2.80000e-01, 4.13350e+05, 3.30000e-01, 4.15051e+05,\n        3.50000e-01]])\n\n\n\ntaxes.transpose()\n\narray([[9.27500e+03, 3.76500e+04, 9.11500e+04, 1.90150e+05, 4.13350e+05,\n        4.15051e+05],\n       [1.00000e-01, 1.50000e-01, 2.50000e-01, 2.80000e-01, 3.30000e-01,\n        3.50000e-01]])"
  },
  {
    "objectID": "04_numpy.rjs.html#bonus-problem",
    "href": "04_numpy.rjs.html#bonus-problem",
    "title": "NumPy",
    "section": "Bonus Problem",
    "text": "Bonus Problem\n\nNumPy allows random number generation.\nGenerate one million random numbers between, say, 0 and 500000.\n\nThere will be repeats, which is okay.\n\nUse Python with and without NumPy to compute every tax cost.\nSee which one is faster! You can use the shell command time"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-random",
    "href": "04_numpy.rjs.html#aside-random",
    "title": "NumPy",
    "section": "Aside: Random",
    "text": "Aside: Random\n\nThe following:\n\nGenerates 1 million random integers from 0 to 50000\nPrints every 10 thousandth integer.\n\n\n\nimport numpy as np\nrng = np.random.default_rng()\nincomes = rng.integers(0, 500000, 1000000)\nprint(incomes[::10000])\n\n[  8201 360013 229780 197812 170991 415476  34778 283639  10003 227788\n 466737 243316 375696 111881  85258 152344 420393  22431 165776 486561\n 305882  57478 143791 162895 243703 187892 259808 216331 241486 320929\n 230905 348999 340818 299624 262921  22871 176164  52254  43167 452499\n 371853 196871 491931 304235 348652  53241 472042 458092 342046  25424\n 356650 156338 416360  61412 144592 342212  29462 316670 173066 470856\n  52492 161130 297738 454323 454238 195042 246213 285691 394655   5978\n  65650  76621 148079  98501 261311 312038 126230 416412 111752 386561\n 482795 441012 362008 337002 425876 328055 330607 251868 479938 395810\n 232629 286008 424885 449109    668 223307 180780 398449   1628 392282]\n\n\n\nRead more: Random sample"
  },
  {
    "objectID": "04_numpy.rjs.html#aside-time",
    "href": "04_numpy.rjs.html#aside-time",
    "title": "NumPy",
    "section": "Aside: time",
    "text": "Aside: time\n\nUse time before a command.\n\nreal time is how much passes in real life\n\n\n$ time python3 onemil.py\n[123177 422613 471310 380518  95385 143328 426503 453832 427403 106416\n 327306 476263  65814 281381 422404  59938  14231 232824 342190 329545\n 412684 112339 202498   5071  59114 394601 451216  92268 381107 487447\n  55089 339493 344836 261917 148326 452850 409130 484951 427839 307217\n 259268 485208 331277 183015 132480 345930 439366   6814  39743 268276\n  80739 293355 170394   4220  48082  15668 453927  58059 320294 101182\n   1864 492297 130465   9920  76321 345944 268312 255875  46614 195236\n 233737 443948 343483 116870 165561 326265 103567 327780 475672 392212\n 396479 328248  43273  32596 246212   4258  60202  66783 135035 155327\n 469638 378485 175496 428130 493185 154716 193012 424037 197666 103758]\n\nreal    0m0.155s\nuser    0m1.883s\nsys     0m0.033s"
  },
  {
    "objectID": "04_numpy.rjs.html#solution",
    "href": "04_numpy.rjs.html#solution",
    "title": "NumPy",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ncutoffs = taxes[:,0]\nrates = taxes[:,1]\n\n# If you are confused, print(arr) after every line\narr = np.append([0], cutoffs)\narr = arr[1:] - arr[:-1]\narr *= rates\narr = np.cumsum(arr)\narr = arr - cutoffs * rates\n\ntaxes = np.array([cutoffs,rates,arr])\n\ntaxes = taxes.transpose()"
  },
  {
    "objectID": "04_numpy.rjs.html#using-it",
    "href": "04_numpy.rjs.html#using-it",
    "title": "NumPy",
    "section": "Using it",
    "text": "Using it\n\nI used the exact same single_tax function as in the “Shell” exercise.\n\n\n\nCode\ndef single_tax(income):\n    # Check all brackets\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    # We calculated the top bracket earlier\n    return income * .396 + -43830.05"
  },
  {
    "objectID": "04_numpy.html",
    "href": "04_numpy.html",
    "title": "NumPy",
    "section": "",
    "text": "The fundamental package for scientific computing with Python.\n\n\nNumerical Python\nIt is a package - addition features we can optional add to the Python language.\n\n\n\nBasically, to do scientific computing it would be nice to have:\n\na powerful N-dimensional array object\nsophisticated (broadcasting) functions\ntools for integrating C/C++ and Fortran code\nuseful linear algebra, Fourier transform, and random number capabilities\n\n(These are the stated features of NumPy.)\n\n\n\n\nWe have essentially been using 1- and 2-dimensional arrays already!\nHere is the examples intercepts.py solution from last time\n\n\n\nCode\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]\n\n\n\n\n\n\nChange our existing lists, which we understand as “N-dimensional arrays” into NumPy arrays.\nShow the benefits of this arrangement.\nShow other NumPy features.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#on-numpy",
    "href": "04_numpy.html#on-numpy",
    "title": "NumPy",
    "section": "",
    "text": "Basically, to do scientific computing it would be nice to have:\n\na powerful N-dimensional array object\nsophisticated (broadcasting) functions\ntools for integrating C/C++ and Fortran code\nuseful linear algebra, Fourier transform, and random number capabilities\n\n(These are the stated features of NumPy.)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#relevance",
    "href": "04_numpy.html#relevance",
    "title": "NumPy",
    "section": "",
    "text": "We have essentially been using 1- and 2-dimensional arrays already!\nHere is the examples intercepts.py solution from last time\n\n\n\nCode\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#we-will",
    "href": "04_numpy.html#we-will",
    "title": "NumPy",
    "section": "",
    "text": "Change our existing lists, which we understand as “N-dimensional arrays” into NumPy arrays.\nShow the benefits of this arrangement.\nShow other NumPy features.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#pypi",
    "href": "04_numpy.html#pypi",
    "title": "NumPy",
    "section": "PyPI",
    "text": "PyPI\n\nThe Python Package Index (PyPI) is a repository of software for the Python programming language.\n\n\nNumPy is a Python package.\n\nIt is installed separately from Python, but\nMay be installed using Python-based tools.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#pip",
    "href": "04_numpy.html#pip",
    "title": "NumPy",
    "section": "pip",
    "text": "pip\n\nThe most popular tool for installing Python packages, and the one included with modern versions of Python.\n\n\npip is a command line utility\nFor years pip was the only real options for installing Python programs, but has experienced limitations as the package ecosystem has grown quite large.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#using-pip",
    "href": "04_numpy.html#using-pip",
    "title": "NumPy",
    "section": "Using pip",
    "text": "Using pip\n\nUse as an argument to python or python3\n\npython3 -m pip install numpy\n\nIt may take a moment to install.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#verify-install",
    "href": "04_numpy.html#verify-install",
    "title": "NumPy",
    "section": "Verify Install",
    "text": "Verify Install\n\nThe following verifies the the NumPy install was successful\nWe see the return of import\n\nIntroduce as, used to shorten names\nWe could have done import piecewise as pw\n\n\n\nimport numpy as np\n\nprint(np.__version__)\n\n2.0.1",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#recall",
    "href": "04_numpy.html#recall",
    "title": "NumPy",
    "section": "Recall",
    "text": "Recall\n\nYou may wish to review import\nConsult Neovim -&gt; `import’",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#numpy-arrays",
    "href": "04_numpy.html#numpy-arrays",
    "title": "NumPy",
    "section": "NumPy Arrays",
    "text": "NumPy Arrays\n\nThe first thing to do in NumPy is make an array.\nIn general we use NumPy arrays when:\n\nWe are dealing with lists of numbers\nWe care about performance, or\nWe want to use advanced mathematical operations",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#list-to-array",
    "href": "04_numpy.html#list-to-array",
    "title": "NumPy",
    "section": "List to Array",
    "text": "List to Array\n\nWe define a list of lists:\n\n\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#lists-of-lists",
    "href": "04_numpy.html#lists-of-lists",
    "title": "NumPy",
    "section": "Lists of lists",
    "text": "Lists of lists\n\nIt is worth while to examine taxes a bit\n\n\ntaxes\n\n[[9275, 0.1],\n [37650, 0.15],\n [91150, 0.25],\n [190150, 0.28],\n [413350, 0.33],\n [415051, 0.35]]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#check-types",
    "href": "04_numpy.html#check-types",
    "title": "NumPy",
    "section": "Check Types",
    "text": "Check Types\n\nWe can verify it is a list.\n\n\ntype(taxes)\n\nlist\n\n\n\nWe can verify it’s initial element is also a list.\n\n\ntype(taxes[0])\n\nlist\n\n\n\nSince taxes[0] is a list, we can look at that list’s initial element.\n\n\ntype(taxes[0][0])\n\nint",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#versus-arrays",
    "href": "04_numpy.html#versus-arrays",
    "title": "NumPy",
    "section": "Versus arrays",
    "text": "Versus arrays\n\nWe have a list of lists of ints (like integers, round numbers).\nOr do we?\n\n\ntype(taxes[0][1])\n\nfloat\n\n\n\nIn fact, the tax rates are not round numbers, so they are “floats”.\nNumPy will help us manage when we use “floating point numbers” (have a decimal point) and integers (don’t).",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#niceties",
    "href": "04_numpy.html#niceties",
    "title": "NumPy",
    "section": "Niceties",
    "text": "Niceties\n\nEach of the internal lists of numbers is of the same length.\nThat lets us do this:\n\n\n\n\nCutoff\nRate\n\n\n\n\n9275\n.10\n\n\n37650\n.15\n\n\n91150\n.25\n\n\n190150\n.28\n\n\n413350\n.33\n\n\n415051\n.35",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#contingencies",
    "href": "04_numpy.html#contingencies",
    "title": "NumPy",
    "section": "Contingencies",
    "text": "Contingencies\n\nThis… isn’t always true.\nIn our case, for example, we have a .396 rate with no cutoff.\nWe just can’t express this as an array:\n\n\n\n\nCutoff\nRate\n\n\n\n\n413350\n.33\n\n\n415051\n.35\n\n\n\n.396",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#takeaways",
    "href": "04_numpy.html#takeaways",
    "title": "NumPy",
    "section": "Takeaways:",
    "text": "Takeaways:\n\nBe ready to deal with things being almost arrays, but ultimately only being lists-of-lists.\nThere’s ways to deal with this (we’ve seen a few, sneakily)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#arrays-1",
    "href": "04_numpy.html#arrays-1",
    "title": "NumPy",
    "section": "Arrays",
    "text": "Arrays\n\nIn computer programming, an array is a structure for storing and retrieving data. We often talk about an array as if it were a grid in space, with each cell storing one element of the data. For instance, if each element of the data were a number, we might visualize a “one-dimensional” array like a list:\n\n\\[\n    \\begin{array}{|c||c|c|c|}\n    \\hline\n    9275 & 37650 & 91150 & 190150 \\\\\n    \\hline\n    \\end{array}\n\\]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#tables",
    "href": "04_numpy.html#tables",
    "title": "NumPy",
    "section": "Tables",
    "text": "Tables\n\nA two-dimensional array would be like a table:\n\n\\[\n    \\begin{array}{|c||c|c|c|}\n    \\hline\n    9275 & 37650 & 91150 & 190150 \\\\\n    \\hline\n    .10 & .15 & .25 & .28 \\\\\n    \\hline\n    0 & -463.75 & -6963.25 & -16470.75 \\\\\n    \\hline\n    \\end{array}\n\\]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#ndarray",
    "href": "04_numpy.html#ndarray",
    "title": "NumPy",
    "section": "ndarray",
    "text": "ndarray\n\nA three-dimensional array would be like a set of tables, perhaps stacked as though they were printed on separate pages. In NumPy, this idea is generalized to an arbitrary number of dimensions, and so the fundamental array class is called ndarray: it represents an “N-dimensional array”.\n\n\nThe most obvious 3d example would be that taxes part of an array of tax policies\n\n[\"Single\", \"Married, joint\", \"Married, separate\", \"Head of Household\"]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#making-arrays",
    "href": "04_numpy.html#making-arrays",
    "title": "NumPy",
    "section": "Making Arrays",
    "text": "Making Arrays\n\nMake an array with np.array()\n\nOr numpy.array if you used import numpy\n\nThey look like this:\n\n\narr = np.array(taxes)\narr\n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\nOur integers are gone - everything in scientific notation",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-scientific-notation",
    "href": "04_numpy.html#aside-scientific-notation",
    "title": "NumPy",
    "section": "Aside: Scientific Notation",
    "text": "Aside: Scientific Notation\n\nScientific notation is a way of expressing numbers that are too large or too small to be conveniently written in decimal form, since to do so would require writing out an inconveniently long string of digits.\n\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-explanation",
    "href": "04_numpy.html#aside-explanation",
    "title": "NumPy",
    "section": "Aside: Explanation",
    "text": "Aside: Explanation\n\nIn scientific notation, nonzero numbers are written in the form\n\n\\[a \\times 10^b\\]\n\n\\(a\\) (the coefficient or mantissa) is a number greater than or equal to 1 and less than 10 (\\(1 \\le |a| &lt; 10\\)).\n\\(10\\) is the base.\n\\(b\\) (the exponent) is an integer.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-physical-examples",
    "href": "04_numpy.html#aside-physical-examples",
    "title": "NumPy",
    "section": "Aside: Physical Examples",
    "text": "Aside: Physical Examples\n\nSpeed of light: The speed of light in a vacuum is approximately \\(300,000,000 \\text{ m/s}\\) \\[\n3 \\times 10^8 \\text{ m/s}\n\\]\nMass of an electron: The mass of an electron is approximately \\(0.00000000000000000000000000091093837 \\text{ g}\\). \\[\n9.1093837 \\times 10^{-28} \\text{ g}\n\\]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-economic-examples",
    "href": "04_numpy.html#aside-economic-examples",
    "title": "NumPy",
    "section": "Aside: Economic Examples",
    "text": "Aside: Economic Examples\n\nWe can use social science numbers.\nLabor Market Outcomes of College Graduates by Major\nComputer scientists have a $80,000 median wage early career\n\n\\(8.0000 \\times 10^4\\)\n\nAnd 6.1% unemployment\n\n\\(6.1 \\times 10^{-2}\\)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#inspecting-arrays",
    "href": "04_numpy.html#inspecting-arrays",
    "title": "NumPy",
    "section": "Inspecting Arrays",
    "text": "Inspecting Arrays\n\nGiven some array, we can look up elements in an array as we did with lists.\nWe refer to zero as the “index” of the initial element of an array (or list).\n\n\n\n\ntaxes[0]\n\n[9275, 0.1]\n\n\n\n\n\narr[0]\n\narray([9.275e+03, 1.000e-01])\n\n\n\n\n\nWe look up the same element by the same index in both Python lists and NumPy arrays.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#slices",
    "href": "04_numpy.html#slices",
    "title": "NumPy",
    "section": "Slices",
    "text": "Slices\n\nPython and NumPy support slicing\nThis takes multiple elements of an array by specifying a range of indices\nLet’s make a one-dimensional array to make matters simpler.\n\n\ncolors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\n\n\n\n\ncolor_lst = colors\ncolor_lst[1:4]\n\n['orange', 'yellow', 'green']\n\n\n\n\ncolor_arr = np.array(colors)\ncolor_arr[1:4]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\n\n\ndtype is data type - We’ll cover it soon.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#understanding-slices",
    "href": "04_numpy.html#understanding-slices",
    "title": "NumPy",
    "section": "Understanding slices",
    "text": "Understanding slices\n\nThe slice 1:4 takes all elements at index beginning at 1 and stopping before getting to index 4.\n\n\\[\n\\small\n\\begin{array}{|l|c|c|c|c|c|c|}\n\\hline\n\\textbf{Index} & 0 & 1 & 2 & 3 & 4 & 5 & 6   \\\\\n\\hline\n\\textbf{Element} & red & orange& yellow& green& blue& indigo& violet\\\\\n\\hline\n\\end{array}\n\\]\n\\[\n\\small\n\\begin{array}{|l|c|c|c|}\n\\hline\n\\textbf{Index} & 1 & 2 & 3   \\\\\n\\hline\n\\textbf{Element} & orange& yellow& green\\\\\n\\hline\n\\end{array}\n\\]",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#omiting-values",
    "href": "04_numpy.html#omiting-values",
    "title": "NumPy",
    "section": "Omiting Values",
    "text": "Omiting Values\n\nIf we omit the value before the : from the slice, it is treated as if a zero was provided.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\ncolor_arr[0:4]\n\narray(['red', 'orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\ncolor_arr[:4]\n\narray(['red', 'orange', 'yellow', 'green'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#omiting-end",
    "href": "04_numpy.html#omiting-end",
    "title": "NumPy",
    "section": "Omiting End",
    "text": "Omiting End\n\nIf we omit the value after the : from the slice, it is as if the length was provided.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nlen gives the length of a list or array\n\n\nlen(color_arr)\n\n7\n\n\n\ncolor_arr[4:7]\n\narray(['blue', 'indigo', 'violet'], dtype='&lt;U6')\n\n\n\ncolor_arr[4:]\n\narray(['blue', 'indigo', 'violet'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#steps",
    "href": "04_numpy.html#steps",
    "title": "NumPy",
    "section": "Steps",
    "text": "Steps\n\nPython and NumPy slices have an additional feature I find quite nice called “steps”\nWe specify a slice:\n\n\ncolor_arr[1:4]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\nWe add a third value\n\n\ncolor_arr[1:4:1]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#step-size",
    "href": "04_numpy.html#step-size",
    "title": "NumPy",
    "section": "Step Size",
    "text": "Step Size\n– We add a third value\n\ncolor_arr[1:4:1]\n\narray(['orange', 'yellow', 'green'], dtype='&lt;U6')\n\n\n\nThis value determines how far to move over the original array between each element shown.\n\nLet’s look at 2 - every other element.\n\n\n\ncolor_arr[1:4:2]\n\narray(['orange', 'green'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#example",
    "href": "04_numpy.html#example",
    "title": "NumPy",
    "section": "Example",
    "text": "Example\n\nIn kindergarten, I learned that red, yellow, and blue were primary colors.\n\nI’m relatively unconvinced by that at this time, but it’s a good example.\n\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nAnd the primaries:\n\n\ncolor_arr[0:5:2]\n\narray(['red', 'yellow', 'blue'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#step-ommissions",
    "href": "04_numpy.html#step-ommissions",
    "title": "NumPy",
    "section": "Step Ommissions",
    "text": "Step Ommissions\n\nWe can omit start, stop, or both and still take steps.\n\n\ncolor_arr[::3]\n\narray(['red', 'green', 'violet'], dtype='&lt;U6')\n\n\n\nWe can use a negative step to reverse.\n\n\ncolor_arr[::-1]\n\narray(['violet', 'indigo', 'blue', 'green', 'yellow', 'orange', 'red'],\n      dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-negatives",
    "href": "04_numpy.html#aside-negatives",
    "title": "NumPy",
    "section": "Aside: Negatives",
    "text": "Aside: Negatives\n\nNegative starts and stops can also be used\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nThey simply measure distance from the end.\n\n\ncolor_arr[:-2]\n\narray(['red', 'orange', 'yellow', 'green', 'blue'], dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#coordinates",
    "href": "04_numpy.html#coordinates",
    "title": "NumPy",
    "section": "Coordinates",
    "text": "Coordinates\n\nVersus Python lists-of-lists.\n\n\ntaxes[1][1]\n\n0.15\n\n\n\nNumPy arrays can specify coordinates - indices of multiple dimensions - in a single set of brackets.\n\n\narr[1][1], arr[1, 1]\n\n(np.float64(0.15), np.float64(0.15))",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#coordinate-slices",
    "href": "04_numpy.html#coordinate-slices",
    "title": "NumPy",
    "section": "Coordinate slices",
    "text": "Coordinate slices\n\nI recommend using the comma notation.\nOtherwise I get unexpected behavior.\n\n\n\n\n# reverse in both dimensions\narr[::-1][::-1] \n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\n\n# reverse in both dimensions\narr[::-1,::-1]\n\narray([[3.50000e-01, 4.15051e+05],\n       [3.30000e-01, 4.13350e+05],\n       [2.80000e-01, 1.90150e+05],\n       [2.50000e-01, 9.11500e+04],\n       [1.50000e-01, 3.76500e+04],\n       [1.00000e-01, 9.27500e+03]])\n\n\n\n\n\nTakeaway: Always use [x,y] instead of [x][y]\nThings like this are we use NumPy!",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#updates",
    "href": "04_numpy.html#updates",
    "title": "NumPy",
    "section": "Updates",
    "text": "Updates\n\nWe can also update entries via =\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'],\n      dtype='&lt;U6')\n\n\n\nUse (1) name of array, (2) index of element, (3) =, (4) new element\n\n\ncolor_arr[-1] = 'purple'\n\n\nThe array now has that element/index.\n\n\ncolor_arr\n\narray(['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple'],\n      dtype='&lt;U6')",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#why-numpy",
    "href": "04_numpy.html#why-numpy",
    "title": "NumPy",
    "section": "Why NumPy?",
    "text": "Why NumPy?\n\nNumPy vectors can do a very cool thing that lists can’t.\nWe use it a lot in science.\nVector operations.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#vector-ops",
    "href": "04_numpy.html#vector-ops",
    "title": "NumPy",
    "section": "Vector Ops",
    "text": "Vector Ops\n\nLet’s compare Python\n\n\nl1 = [1,2,3]\nl2 = [1,1,1]\nl1 + l2\n\n[1, 2, 3, 1, 1, 1]\n\n\n\nTo NumPy\n\n\na1 = np.array(l1)\na2 = np.array(l2)\na1 + a2\n\narray([2, 3, 4])\n\n\n\nBy the way, vectorization is really fast.\nOur first “high performance computing” idea.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#example-1",
    "href": "04_numpy.html#example-1",
    "title": "NumPy",
    "section": "Example",
    "text": "Example\n\nSuppose you need to convert some temperatures.\n\n\n# Portland highs and lows 5/26/25-6/2/25 in degF\ntemps = np.array([70, 50, 81, 60, 85, 57, 70, 52, 84, 58, 87, 58, 74, 53, 70, 54])\ntemps -= 32\ntemps *= 5\ntemps //= 9\ntemps\n\narray([21, 10, 27, 15, 29, 13, 21, 11, 28, 14, 30, 14, 23, 11, 21, 12])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside",
    "href": "04_numpy.html#aside",
    "title": "NumPy",
    "section": "Aside: //",
    "text": "Aside: //\n\nNumPy requires arrays to be of a certain kind of number.\n30 is an integer.\n30/9 is a decimal value…\nPython furnishes special // integer division.\n\nIt truncates (does not round) the result.\n\n\n\nnp.array([1,2,3,4,5,6,7,8,9,10]) // 3\n\narray([0, 0, 1, 1, 1, 2, 2, 2, 3, 3])\n\n\n\nTry using / there. What happens?",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#use-case",
    "href": "04_numpy.html#use-case",
    "title": "NumPy",
    "section": "Use case",
    "text": "Use case\n\nSlices and vectorization are very useful in the income tax example.\nWe:\n\nHad income cutoffs, that were\nThe beginning of some tax brackets, but\nThe end of other tax brackets\nOffset by one (1)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#building-brackets",
    "href": "04_numpy.html#building-brackets",
    "title": "NumPy",
    "section": "Building Brackets",
    "text": "Building Brackets\n\nLet’s refresh on what the tax bracket array looked like.\n\n\narr\n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\nInitial tax bracket goes zero and to 9275\nThe next goes from 9275 to 37650.\nSo 9275 is useful to two brackets.",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#begin-and-end",
    "href": "04_numpy.html#begin-and-end",
    "title": "NumPy",
    "section": "Begin and end",
    "text": "Begin and end\n\nLet’s grab just the cutoffs.\n\n\ncutoffs = arr[:,0]\ncutoffs\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.])\n\n\n\n[:, 0] means for every row (slice :) take the initial columns (index 0)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#insert",
    "href": "04_numpy.html#insert",
    "title": "NumPy",
    "section": "Insert",
    "text": "Insert\n\nThe initial bracket begins at 0 and the last bracket ends at infinity.\n\nNumPy knows about infinity! np.inf\n\nWe can use NumPy insert to add an element at an index:\n\n\n# Insert to (a) an array at (b) some index (c) some value\na = cutoffs\nb = len(cutoffs)\nc = np.inf\ncutoffs = np.insert(a, b, c)\ncutoffs\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.,     inf])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#append",
    "href": "04_numpy.html#append",
    "title": "NumPy",
    "section": "Append",
    "text": "Append\n\nI usually don’t insert, I append.\nThis allows adding two arrays together, like how Python + works on lists.\n\n\n# Smoosh arrays together.\ncutoffs = np.append([0],cutoffs)\ncutoffs\n\narray([     0.,   9275.,  37650.,  91150., 190150., 413350., 415051.,\n           inf])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#slicing",
    "href": "04_numpy.html#slicing",
    "title": "NumPy",
    "section": "Slicing",
    "text": "Slicing\n\nNow we can take the beginning of every bracket, by index:\n\n\nbegin = cutoffs[:-1]\nbegin\n\narray([     0.,   9275.,  37650.,  91150., 190150., 413350., 415051.])\n\n\n\nAnd the end\n\n\nend = cutoffs[1:]\nend\n\narray([  9275.,  37650.,  91150., 190150., 413350., 415051.,     inf])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#vector-minus",
    "href": "04_numpy.html#vector-minus",
    "title": "NumPy",
    "section": "Vector Minus",
    "text": "Vector Minus\n\nWe can see how big each bracket is.\n\n\nbracket_size = end - begin\nbracket_size\n\narray([  9275.,  28375.,  53500.,  99000., 223200.,   1701.,     inf])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#vector-times",
    "href": "04_numpy.html#vector-times",
    "title": "NumPy",
    "section": "Vector Times",
    "text": "Vector Times\n\nWe can see how much tax is spent in each bracket.\n\nWe will “cut off” the last bracket first\nIt doesn’t really have a size?\n\n\n\nbracket_cost = bracket_size[:-1] * arr[:, 1]\nbracket_cost\n\narray([  927.5 ,  4256.25, 13375.  , 27720.  , 73656.  ,   595.35])\n\n\n\nWhat happens if we don’t cut off the last bracket and try to multiply a vector of length 7 by a vector of length 6?",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#accumulation",
    "href": "04_numpy.html#accumulation",
    "title": "NumPy",
    "section": "Accumulation",
    "text": "Accumulation\n\nWhile bracket_cost does correctly describe the cost within on bracket, someone in the n+1’th bracket pays the cost the previous n brackets.\nSomeone how we want to sum those up.\nNumPy has many built-in array functions, including np.cumsum.\n\n\ntotal_cost = np.cumsum(bracket_cost)\ntotal_cost\n\narray([   927.5 ,   5183.75,  18558.75,  46278.75, 119934.75, 120530.1 ])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#numpy-does-a-lot",
    "href": "04_numpy.html#numpy-does-a-lot",
    "title": "NumPy",
    "section": "NumPy does a lot!",
    "text": "NumPy does a lot!\n\nArrays mostly, but including:\nVector operations called “broadcasting”.\nIndices and slices matter a lot.\nContants like np.inf support mathematics\nAccumulation functions we don’t have to write ourselves (which we’d have to do via loops)",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#on-names",
    "href": "04_numpy.html#on-names",
    "title": "NumPy",
    "section": "On Names",
    "text": "On Names\n\nYou might hear of a 0-D (zero-dimensional) array referred to as a “scalar”, a 1-D (one-dimensional) array as a “vector”, a 2-D (two-dimensional) array as a “matrix”, or an N-D (N-dimensional, where “N” is typically an integer greater than 2) array as a “tensor”.\n\n\nFor clarity, it is best to avoid the mathematical terms when referring to an array because the mathematical objects with these names behave differently than arrays (e.g. “matrix” multiplication is fundamentally different from “array” multiplication), and there are other objects in the scientific Python ecosystem that have these names (e.g. the fundamental data structure of PyTorch is the “tensor”).",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#using-numpy",
    "href": "04_numpy.html#using-numpy",
    "title": "NumPy",
    "section": "Using NumPy",
    "text": "Using NumPy\n\nToday we successfully recomputed the points of the point-intercept form of the income tax problem.\nUsing NumPy, starting with taxes, create the array on the right:\n\n\n\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\n\n\n\nnp.array([[ 9.275000e+03,  1.000000e-01,  0.000000e+00],\n          [ 3.765000e+04,  1.500000e-01, -4.637500e+02],\n          [ 9.115000e+04,  2.500000e-01, -4.228750e+03],\n          [ 1.901500e+05,  2.800000e-01, -6.963250e+03],\n          [ 4.133500e+05,  3.300000e-01, -1.647075e+04],\n          [ 4.150510e+05,  3.500000e-01, -2.473775e+04]])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#transpose",
    "href": "04_numpy.html#transpose",
    "title": "NumPy",
    "section": "Transpose",
    "text": "Transpose\n\nThere are many ways to solve this problem!\nThings will be easier with the following:\n\n\ntaxes.shape\n\n(6, 2)\n\n\n\ntaxes.reshape(2,6)\n\narray([[9.27500e+03, 1.00000e-01, 3.76500e+04, 1.50000e-01, 9.11500e+04,\n        2.50000e-01],\n       [1.90150e+05, 2.80000e-01, 4.13350e+05, 3.30000e-01, 4.15051e+05,\n        3.50000e-01]])\n\n\n\ntaxes.transpose()\n\narray([[9.27500e+03, 3.76500e+04, 9.11500e+04, 1.90150e+05, 4.13350e+05,\n        4.15051e+05],\n       [1.00000e-01, 1.50000e-01, 2.50000e-01, 2.80000e-01, 3.30000e-01,\n        3.50000e-01]])",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#bonus-problem",
    "href": "04_numpy.html#bonus-problem",
    "title": "NumPy",
    "section": "Bonus Problem",
    "text": "Bonus Problem\n\nNumPy allows random number generation.\nGenerate one million random numbers between, say, 0 and 500000.\n\nThere will be repeats, which is okay.\n\nUse Python with and without NumPy to compute every tax cost.\nSee which one is faster! You can use the shell command time",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-random",
    "href": "04_numpy.html#aside-random",
    "title": "NumPy",
    "section": "Aside: Random",
    "text": "Aside: Random\n\nThe following:\n\nGenerates 1 million random integers from 0 to 50000\nPrints every 10 thousandth integer.\n\n\n\nimport numpy as np\nrng = np.random.default_rng()\nincomes = rng.integers(0, 500000, 1000000)\nprint(incomes[::10000])\n\n[  8201 360013 229780 197812 170991 415476  34778 283639  10003 227788\n 466737 243316 375696 111881  85258 152344 420393  22431 165776 486561\n 305882  57478 143791 162895 243703 187892 259808 216331 241486 320929\n 230905 348999 340818 299624 262921  22871 176164  52254  43167 452499\n 371853 196871 491931 304235 348652  53241 472042 458092 342046  25424\n 356650 156338 416360  61412 144592 342212  29462 316670 173066 470856\n  52492 161130 297738 454323 454238 195042 246213 285691 394655   5978\n  65650  76621 148079  98501 261311 312038 126230 416412 111752 386561\n 482795 441012 362008 337002 425876 328055 330607 251868 479938 395810\n 232629 286008 424885 449109    668 223307 180780 398449   1628 392282]\n\n\n\nRead more: Random sample",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#aside-time",
    "href": "04_numpy.html#aside-time",
    "title": "NumPy",
    "section": "Aside: time",
    "text": "Aside: time\n\nUse time before a command.\n\nreal time is how much passes in real life\n\n\n$ time python3 onemil.py\n[123177 422613 471310 380518  95385 143328 426503 453832 427403 106416\n 327306 476263  65814 281381 422404  59938  14231 232824 342190 329545\n 412684 112339 202498   5071  59114 394601 451216  92268 381107 487447\n  55089 339493 344836 261917 148326 452850 409130 484951 427839 307217\n 259268 485208 331277 183015 132480 345930 439366   6814  39743 268276\n  80739 293355 170394   4220  48082  15668 453927  58059 320294 101182\n   1864 492297 130465   9920  76321 345944 268312 255875  46614 195236\n 233737 443948 343483 116870 165561 326265 103567 327780 475672 392212\n 396479 328248  43273  32596 246212   4258  60202  66783 135035 155327\n 469638 378485 175496 428130 493185 154716 193012 424037 197666 103758]\n\nreal    0m0.155s\nuser    0m1.883s\nsys     0m0.033s",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#solution",
    "href": "04_numpy.html#solution",
    "title": "NumPy",
    "section": "Solution",
    "text": "Solution\n\n\nCode\ncutoffs = taxes[:,0]\nrates = taxes[:,1]\n\n# If you are confused, print(arr) after every line\narr = np.append([0], cutoffs)\narr = arr[1:] - arr[:-1]\narr *= rates\narr = np.cumsum(arr)\narr = arr - cutoffs * rates\n\ntaxes = np.array([cutoffs,rates,arr])\n\ntaxes = taxes.transpose()",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "04_numpy.html#using-it",
    "href": "04_numpy.html#using-it",
    "title": "NumPy",
    "section": "Using it",
    "text": "Using it\n\nI used the exact same single_tax function as in the “Shell” exercise.\n\n\n\nCode\ndef single_tax(income):\n    # Check all brackets\n    for tax in taxes:\n        if income &lt; tax[0]:\n            return income * tax[1] + tax[2]\n    # We calculated the top bracket earlier\n    return income * .396 + -43830.05",
    "crumbs": [
      "NumPy"
    ]
  },
  {
    "objectID": "06_pandas.rjs.html#pandas",
    "href": "06_pandas.rjs.html#pandas",
    "title": "pandas",
    "section": "pandas",
    "text": "pandas\n\nStands for “panel data”\nOriginal built on NumPy, now on supercomputing technologies.\nCore innovation: The DataFrame\n\n\nA DataFrame is a data structure that organizes data into a 2-dimensional table of rows and columns, much like a spreadsheet."
  },
  {
    "objectID": "06_pandas.rjs.html#like-a-spreadsheet",
    "href": "06_pandas.rjs.html#like-a-spreadsheet",
    "title": "pandas",
    "section": "“like a spreadsheet”",
    "text": "“like a spreadsheet”\n\nWith pandas, we can do all the things we can do in a spreadsheet, but:\n\nAutomatically\nRepeatedly\nConsistently\n\nBasically, we never have to find a button again, but instead we have to learn functions from code documentation."
  },
  {
    "objectID": "06_pandas.rjs.html#spreadsheet-usage",
    "href": "06_pandas.rjs.html#spreadsheet-usage",
    "title": "pandas",
    "section": "Spreadsheet Usage",
    "text": "Spreadsheet Usage\n\nI mostly (used to) use spreadsheets to make charts.\npandas works very well with Matplotlib (better than NumPy does, I think)\nIn the NumPy tutorial, pandas and Matplotlib are the two other Python packages mentioned, to read spreadsheets and plot them, respectively."
  },
  {
    "objectID": "06_pandas.rjs.html#why-not-pandas",
    "href": "06_pandas.rjs.html#why-not-pandas",
    "title": "pandas",
    "section": "Why not pandas?",
    "text": "Why not pandas?\n\nAfter years undisputed prominence as the best data library, pandas has recently received a challenger called “Polars” which is situationally faster and rapidly gaining popularity.\nI expect Polars to take over in cloud computing but not in scientific computing.\nPolars uses neither NumPy not Matplotlib, but plots with Altair, which I found insuitable for scientific applications."
  },
  {
    "objectID": "06_pandas.rjs.html#relevance",
    "href": "06_pandas.rjs.html#relevance",
    "title": "pandas",
    "section": "Relevance",
    "text": "Relevance\n\nWe have only calculated and plotted data we have typed in ourselves!\nYuck!"
  },
  {
    "objectID": "06_pandas.rjs.html#pip-again",
    "href": "06_pandas.rjs.html#pip-again",
    "title": "pandas",
    "section": "pip again",
    "text": "pip again\n\nJust like NumPy and Matplotlib, pandas is a Python package which we install via pip\n\npython3 -m pip install pandas\n\nThat might take a moment, when it does we can check it worked!"
  },
  {
    "objectID": "06_pandas.rjs.html#two-first-steps",
    "href": "06_pandas.rjs.html#two-first-steps",
    "title": "pandas",
    "section": "Two First Steps",
    "text": "Two First Steps\n\nThere are two great ways to get a pandas DataFrame.\nWe quickly show both.\n\n\nimport numpy as np\nimport pandas as pd"
  },
  {
    "objectID": "06_pandas.rjs.html#from-numpy",
    "href": "06_pandas.rjs.html#from-numpy",
    "title": "pandas",
    "section": "From NumPy",
    "text": "From NumPy\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\ndf = pd.DataFrame(taxes) # use \"df\" for dataframes by convention\ndf # You'll notice this may look a lot nicer\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n9275.0\n0.10\n\n\n1\n37650.0\n0.15\n\n\n2\n91150.0\n0.25\n\n\n3\n190150.0\n0.28\n\n\n4\n413350.0\n0.33\n\n\n5\n415051.0\n0.35"
  },
  {
    "objectID": "06_pandas.rjs.html#get-a-file",
    "href": "06_pandas.rjs.html#get-a-file",
    "title": "pandas",
    "section": "Get a File",
    "text": "Get a File\n\nI will use some nuclear data.\nUsually data will come from your research group or experiments.\nOften stored as a CSV.\n\nA “.csv” file, for “comma separated value”\n\nWe’ll use “Periodic Table of Elements.csv”\n\nSpaces in maes are annoying; we’ll manage.\n\nIt’s from here"
  },
  {
    "objectID": "06_pandas.rjs.html#from-a-url",
    "href": "06_pandas.rjs.html#from-a-url",
    "title": "pandas",
    "section": "From a URL",
    "text": "From a URL\n\nYou can use files on your computer, or…\nFrom a url.\nBut the url must be the address of the file\n\nNot a page that talks about the file.\nNot a page with the same data but presented in a pretty table."
  },
  {
    "objectID": "06_pandas.rjs.html#raw-files",
    "href": "06_pandas.rjs.html#raw-files",
    "title": "pandas",
    "section": "“Raw” Files",
    "text": "“Raw” Files\n\nOn GitHub (common place to keep files) these are called “raw” files.\n\nhttps://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\n\nNote - that ends in .csv"
  },
  {
    "objectID": "06_pandas.rjs.html#from-file",
    "href": "06_pandas.rjs.html#from-file",
    "title": "pandas",
    "section": "From File",
    "text": "From File\n\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n0\n1\nHydrogen\nH\n1.007\n0\n1\n1\n1\n1.0\ngas\n...\n13.5984\n0.000090\n14.175\n20.28\n3.0\nCavendish\n1766.0\n14.304\n1\n1.0\n\n\n1\n2\nHelium\nHe\n4.002\n2\n2\n2\n1\n18.0\ngas\n...\n24.5874\n0.000179\nNaN\n4.22\n5.0\nJanssen\n1868.0\n5.193\n1\nNaN\n\n\n2\n3\nLithium\nLi\n6.941\n4\n3\n3\n2\n1.0\nsolid\n...\n5.3917\n0.534000\n453.850\n1615.00\n5.0\nArfvedson\n1817.0\n3.582\n2\n1.0\n\n\n3\n4\nBeryllium\nBe\n9.012\n5\n4\n4\n2\n2.0\nsolid\n...\n9.3227\n1.850000\n1560.150\n2742.00\n6.0\nVaulquelin\n1798.0\n1.825\n2\n2.0\n\n\n4\n5\nBoron\nB\n10.811\n6\n5\n5\n2\n13.0\nsolid\n...\n8.2980\n2.340000\n2573.150\n4200.00\n6.0\nGay-Lussac\n1808.0\n1.026\n2\n3.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n113\n114\nFlerovium\nFl\n289.000\n175\n114\n114\n7\n14.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1999.0\nNaN\n7\n4.0\n\n\n114\n115\nMoscovium\nMc\n288.000\n173\n115\n115\n7\n15.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n5.0\n\n\n115\n116\nLivermorium\nLv\n292.000\n176\n116\n116\n7\n16.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2000.0\nNaN\n7\n6.0\n\n\n116\n117\nTennessine\nTs\n295.000\n178\n117\n117\n7\n17.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n7.0\n\n\n117\n118\nOganesson\nOg\n294.000\n176\n118\n118\n7\n18.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2006.0\nNaN\n7\n8.0\n\n\n\n\n118 rows × 28 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#dataframes-and-arrays",
    "href": "06_pandas.rjs.html#dataframes-and-arrays",
    "title": "pandas",
    "section": "DataFrames and Arrays",
    "text": "DataFrames and Arrays\n\nDataFrames:\n\nHave row and column labels\nCan store multiple types of data (strings/words, integers, and floating point numbers)\n\nArrays:\n\nDon’t\nCan’t"
  },
  {
    "objectID": "06_pandas.rjs.html#subsetting",
    "href": "06_pandas.rjs.html#subsetting",
    "title": "pandas",
    "section": "Subsetting",
    "text": "Subsetting\n\nOne of the most common uses for pandas is to subset, to look at part of DataFrame but not all.\nUsually by looking at a specific column or columns - by name.\n\nVs. arrays and lists, DataFrames still have indices, but they are now usually strings.\n\n\n\ndf[\"Element\"]\n\n0         Hydrogen\n1           Helium\n2          Lithium\n3        Beryllium\n4            Boron\n          ...     \n113      Flerovium\n114      Moscovium\n115    Livermorium\n116     Tennessine\n117      Oganesson\nName: Element, Length: 118, dtype: object"
  },
  {
    "objectID": "06_pandas.rjs.html#multiple-indices",
    "href": "06_pandas.rjs.html#multiple-indices",
    "title": "pandas",
    "section": "Multiple Indices",
    "text": "Multiple Indices\n\nWe can also subset multiple indices using a list of indices (column names).\n\n\ndf[[\"Element\",\"Symbol\"]]\n\n\n\n\n\n\n\n\nElement\nSymbol\n\n\n\n\n0\nHydrogen\nH\n\n\n1\nHelium\nHe\n\n\n2\nLithium\nLi\n\n\n3\nBeryllium\nBe\n\n\n4\nBoron\nB\n\n\n...\n...\n...\n\n\n113\nFlerovium\nFl\n\n\n114\nMoscovium\nMc\n\n\n115\nLivermorium\nLv\n\n\n116\nTennessine\nTs\n\n\n117\nOganesson\nOg\n\n\n\n\n118 rows × 2 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#filtering",
    "href": "06_pandas.rjs.html#filtering",
    "title": "pandas",
    "section": "Filtering",
    "text": "Filtering\n\nWe can subset rows by filtering\nBasically we write what would be an if statement, but use it as an index.\nThe “transuranic” elements are elements higher than number 92.\n\n\ndf[df[\"AtomicNumber\"] &gt; 92]\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n92\n93\nNeptunium\nNp\n237.0\n144\n93\n93\n7\nNaN\nartificial\n...\n6.2657\n20.5\n913.15\n4273.0\n153.0\nMcMillan and Abelson\n1940.0\nNaN\n7\nNaN\n\n\n93\n94\nPlutonium\nPu\n244.0\n150\n94\n94\n7\nNaN\nartificial\n...\n6.0262\n19.8\n913.15\n3501.0\n163.0\nSeaborg et al.\n1940.0\nNaN\n7\nNaN\n\n\n94\n95\nAmericium\nAm\n243.0\n148\n95\n95\n7\nNaN\nartificial\n...\n5.9738\n13.7\n1267.15\n2880.0\n133.0\nSeaborg et al.\n1944.0\nNaN\n7\nNaN\n\n\n95\n96\nCurium\nCm\n247.0\n151\n96\n96\n7\nNaN\nartificial\n...\n5.9915\n13.5\n1340.15\n3383.0\n133.0\nSeaborg et al.\n1944.0\nNaN\n7\nNaN\n\n\n96\n97\nBerkelium\nBk\n247.0\n150\n97\n97\n7\nNaN\nartificial\n...\n6.1979\n14.8\n1259.15\n983.0\n83.0\nSeaborg et al.\n1949.0\nNaN\n7\nNaN\n\n\n97\n98\nCalifornium\nCf\n251.0\n153\n98\n98\n7\nNaN\nartificial\n...\n6.2817\n15.1\n1925.15\n1173.0\n123.0\nSeaborg et al.\n1950.0\nNaN\n7\nNaN\n\n\n98\n99\nEinsteinium\nEs\n252.0\n153\n99\n99\n7\nNaN\nartificial\n...\n6.4200\n13.5\n1133.15\nNaN\n123.0\nGhiorso et al.\n1952.0\nNaN\n7\nNaN\n\n\n99\n100\nFermium\nFm\n257.0\n157\n100\n100\n7\nNaN\nartificial\n...\n6.5000\nNaN\nNaN\nNaN\n103.0\nGhiorso et al.\n1953.0\nNaN\n7\nNaN\n\n\n100\n101\nMendelevium\nMd\n258.0\n157\n101\n101\n7\nNaN\nartificial\n...\n6.5800\nNaN\nNaN\nNaN\n33.0\nGhiorso et al.\n1955.0\nNaN\n7\nNaN\n\n\n101\n102\nNobelium\nNo\n259.0\n157\n102\n102\n7\nNaN\nartificial\n...\n6.6500\nNaN\nNaN\nNaN\n73.0\nGhiorso et al.\n1958.0\nNaN\n7\nNaN\n\n\n102\n103\nLawrencium\nLr\n262.0\n159\n103\n103\n7\nNaN\nartificial\n...\nNaN\nNaN\nNaN\nNaN\n203.0\nGhiorso et al.\n1961.0\nNaN\n7\nNaN\n\n\n103\n104\nRutherfordium\nRf\n261.0\n157\n104\n104\n7\n4.0\nartificial\n...\nNaN\n18.1\nNaN\nNaN\nNaN\nGhiorso et al.\n1969.0\nNaN\n7\nNaN\n\n\n104\n105\nDubnium\nDb\n262.0\n157\n105\n105\n7\n5.0\nartificial\n...\nNaN\n39.0\nNaN\nNaN\nNaN\nGhiorso et al.\n1970.0\nNaN\n7\nNaN\n\n\n105\n106\nSeaborgium\nSg\n266.0\n160\n106\n106\n7\n6.0\nartificial\n...\nNaN\n35.0\nNaN\nNaN\nNaN\nGhiorso et al.\n1974.0\nNaN\n7\nNaN\n\n\n106\n107\nBohrium\nBh\n264.0\n157\n107\n107\n7\n7.0\nartificial\n...\nNaN\n37.0\nNaN\nNaN\nNaN\nArmbruster and M�nzenberg\n1981.0\nNaN\n7\nNaN\n\n\n107\n108\nHassium\nHs\n267.0\n159\n108\n108\n7\n8.0\nartificial\n...\nNaN\n41.0\nNaN\nNaN\nNaN\nArmbruster and M�nzenberg\n1983.0\nNaN\n7\nNaN\n\n\n108\n109\nMeitnerium\nMt\n268.0\n159\n109\n109\n7\n9.0\nartificial\n...\nNaN\n35.0\nNaN\nNaN\nNaN\nGSI, Darmstadt, West Germany\n1982.0\nNaN\n7\nNaN\n\n\n109\n110\nDarmstadtium\nDs\n271.0\n161\n110\n110\n7\n10.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1994.0\nNaN\n7\nNaN\n\n\n110\n111\nRoentgenium\nRg\n272.0\n161\n111\n111\n7\n11.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1994.0\nNaN\n7\nNaN\n\n\n111\n112\nCopernicium\nCn\n285.0\n173\n112\n112\n7\n12.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1996.0\nNaN\n7\nNaN\n\n\n112\n113\nNihonium\nNh\n284.0\n171\n113\n113\n7\n13.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2004.0\nNaN\n7\n3.0\n\n\n113\n114\nFlerovium\nFl\n289.0\n175\n114\n114\n7\n14.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1999.0\nNaN\n7\n4.0\n\n\n114\n115\nMoscovium\nMc\n288.0\n173\n115\n115\n7\n15.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n5.0\n\n\n115\n116\nLivermorium\nLv\n292.0\n176\n116\n116\n7\n16.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2000.0\nNaN\n7\n6.0\n\n\n116\n117\nTennessine\nTs\n295.0\n178\n117\n117\n7\n17.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n7.0\n\n\n117\n118\nOganesson\nOg\n294.0\n176\n118\n118\n7\n18.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2006.0\nNaN\n7\n8.0\n\n\n\n\n26 rows × 28 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#double-df",
    "href": "06_pandas.rjs.html#double-df",
    "title": "pandas",
    "section": "Double df",
    "text": "Double df\n\nWe use df twice in that expression:\n\nOnce to check the df if some value is greater than 92\nOnce to look up all elements for which the value is greater.\n\n\n\ndf[\"AtomicNumber\"] &gt; 92\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n113     True\n114     True\n115     True\n116     True\n117     True\nName: AtomicNumber, Length: 118, dtype: bool"
  },
  {
    "objectID": "06_pandas.rjs.html#columns",
    "href": "06_pandas.rjs.html#columns",
    "title": "pandas",
    "section": ".columns",
    "text": ".columns\n\nBy the way, what all do we know?\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'NumberofProtons', 'NumberofElectrons', 'Period', 'Group', 'Phase',\n       'Radioactive', 'Natural', 'Metal', 'Nonmetal', 'Metalloid', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence'],\n      dtype='object')\n\n\n\nOh that’s a lot of information!"
  },
  {
    "objectID": "06_pandas.rjs.html#how-big",
    "href": "06_pandas.rjs.html#how-big",
    "title": "pandas",
    "section": "How big?",
    "text": "How big?\n\nHow big is df?\n\n\ndf.shape\n\n(118, 28)\n\n\n\nAnd by the way, np.array’s have shape too.\n\n\ntaxes.shape\n\n(6, 2)\n\n\n\nAside: Multiple values within a () are asically lists but called tuples.\n\n\ntype(taxes.shape)\n\ntuple"
  },
  {
    "objectID": "06_pandas.rjs.html#locating-entries",
    "href": "06_pandas.rjs.html#locating-entries",
    "title": "pandas",
    "section": "Locating Entries",
    "text": "Locating Entries\n\nSometimes you want to use an integer index.\n\n\ndf.iloc[10] # \"Integer Location\"\n\nAtomicNumber                   11\nElement                    Sodium\nSymbol                         Na\nAtomicMass                  22.99\nNumberofNeutrons               12\nNumberofProtons                11\nNumberofElectrons              11\nPeriod                          3\nGroup                         1.0\nPhase                       solid\nRadioactive                   NaN\nNatural                       yes\nMetal                         yes\nNonmetal                      NaN\nMetalloid                     NaN\nType                 Alkali Metal\nAtomicRadius                  2.2\nElectronegativity            0.93\nFirstIonization            5.1391\nDensity                     0.971\nMeltingPoint               371.15\nBoilingPoint               1156.0\nNumberOfIsotopes              7.0\nDiscoverer                   Davy\nYear                       1807.0\nSpecificHeat                1.228\nNumberofShells                  3\nNumberofValence               1.0\nName: 10, dtype: object"
  },
  {
    "objectID": "06_pandas.rjs.html#zeroone-index",
    "href": "06_pandas.rjs.html#zeroone-index",
    "title": "pandas",
    "section": "Zero/One index",
    "text": "Zero/One index\n\nDataFrames are 0-indexed\n\n\ndf[\"AtomicNumber\"].iloc[0]\n\nnp.int64(1)\n\n\n\nElements are 1-indexed1 with good reason.\n\n\ndf[[\"AtomicNumber\",\"NumberofProtons\"]].head(1)\n\n\n\n\n\n\n\n\nAtomicNumber\nNumberofProtons\n\n\n\n\n0\n1\n1\n\n\n\n\n\n\n\nNeutronium is a proposed but not academically interesting element with atomic number 0."
  },
  {
    "objectID": "06_pandas.rjs.html#data-manipulation",
    "href": "06_pandas.rjs.html#data-manipulation",
    "title": "pandas",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nCheck out these columns\n\n\ndf.iloc[::20][[\"NumberofNeutrons\", \"NumberofProtons\"]]\n\n\n\n\n\n\n\n\nNumberofNeutrons\nNumberofProtons\n\n\n\n\n0\n0\n1\n\n\n20\n24\n21\n\n\n40\n52\n41\n\n\n60\n84\n61\n\n\n80\n123\n81\n\n\n100\n157\n101"
  },
  {
    "objectID": "06_pandas.rjs.html#pattern",
    "href": "06_pandas.rjs.html#pattern",
    "title": "pandas",
    "section": "Pattern",
    "text": "Pattern\n\nIt looks like atoms with fewer protons have the same number of protons and neutrons, and atoms with many protons have many more neutrons.\nLet’s calculate the difference.\n\n\ndf[\"NumberofProtons\"] - df[\"NumberofNeutrons\"]\n\n0       1\n1       0\n2      -1\n3      -1\n4      -1\n       ..\n113   -61\n114   -58\n115   -60\n116   -61\n117   -58\nLength: 118, dtype: int64"
  },
  {
    "objectID": "06_pandas.rjs.html#visualize",
    "href": "06_pandas.rjs.html#visualize",
    "title": "pandas",
    "section": "Visualize",
    "text": "Visualize\n\nEasier to visualize.\n\n\n# import Matplotlib if you don't have it yet!\nimport matplotlib.pyplot as plt"
  },
  {
    "objectID": "06_pandas.rjs.html#scatterplot",
    "href": "06_pandas.rjs.html#scatterplot",
    "title": "pandas",
    "section": "Scatterplot",
    "text": "Scatterplot\n\nplt.scatter(df[\"NumberofProtons\"], df[\"NumberofNeutrons\"])"
  },
  {
    "objectID": "06_pandas.rjs.html#insights",
    "href": "06_pandas.rjs.html#insights",
    "title": "pandas",
    "section": "Insights",
    "text": "Insights\n\nA lot of science, as far as I can tell is finding novel insights.\nI noticed that boiling/melting point seemed to go up and down at some intervals.\nI recall that the number of outermost electrons did that too…\nLet’s make num_es again, from last time."
  },
  {
    "objectID": "06_pandas.rjs.html#num_es",
    "href": "06_pandas.rjs.html#num_es",
    "title": "pandas",
    "section": "num_es",
    "text": "num_es\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])\nnum_es = np.array([]) # The first zero elements\nfor e in es:\n    num_es = np.append(num_es, np.arange(e))\nnum_es += 1\nnum_es\n\narray([ 1.,  2.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,\n        9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,\n       17., 18.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.,\n       12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24.,\n       25., 26., 27., 28., 29., 30., 31., 32.,  1.,  2.,  3.,  4.,  5.,\n        6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,\n       19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n       32.])"
  },
  {
    "objectID": "06_pandas.rjs.html#expanding-dataframes",
    "href": "06_pandas.rjs.html#expanding-dataframes",
    "title": "pandas",
    "section": "Expanding DataFrames",
    "text": "Expanding DataFrames\n\nWe can create a new column and add new data to it from a np.array\nAt least if the dimensions work out…\n\n\ndf.shape, num_es.shape\n\n((118, 28), (118,))\n\n\n\nWe have 118 elements, so it is good we have 118 possible outermost electron counts!"
  },
  {
    "objectID": "06_pandas.rjs.html#update-list",
    "href": "06_pandas.rjs.html#update-list",
    "title": "pandas",
    "section": "Update list",
    "text": "Update list\n\nLike updating the element of a list by index…\n\n\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\ncolors[-1] = \"purple\"\ncolors\n\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']"
  },
  {
    "objectID": "06_pandas.rjs.html#update-dataframe",
    "href": "06_pandas.rjs.html#update-dataframe",
    "title": "pandas",
    "section": "Update DataFrame",
    "text": "Update DataFrame\n\nWe can update or add a column to a DataFrame by index:\n\n\ndf[\"OutermostElectrons\"] = num_es\ndf.iloc[::20][[\"Element\",\"OutermostElectrons\"]]\n\n\n\n\n\n\n\n\nElement\nOutermostElectrons\n\n\n\n\n0\nHydrogen\n1.0\n\n\n20\nScandium\n3.0\n\n\n40\nNiobium\n5.0\n\n\n60\nPromethium\n7.0\n\n\n80\nThallium\n27.0\n\n\n100\nMendelevium\n15.0"
  },
  {
    "objectID": "06_pandas.rjs.html#patterns",
    "href": "06_pandas.rjs.html#patterns",
    "title": "pandas",
    "section": "Patterns",
    "text": "Patterns\n\nFor a scatter, that is two (2) DataFrames (or subsets), not one DataFrame with two columns\n\n\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"])"
  },
  {
    "objectID": "06_pandas.rjs.html#d",
    "href": "06_pandas.rjs.html#d",
    "title": "pandas",
    "section": "3D",
    "text": "3D\n\nThird dimension via s= for size\n\n\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"], s=df[\"AtomicNumber\"])"
  },
  {
    "objectID": "06_pandas.rjs.html#columns-to-columns",
    "href": "06_pandas.rjs.html#columns-to-columns",
    "title": "pandas",
    "section": "Columns to Columns",
    "text": "Columns to Columns\n\nUsing vector operations, we can make novel columns from existing columns.\n\n\ndf[\"NeutronsLessProtons\"] = df[\"NumberofNeutrons\"] - df[\"NumberofProtons\"]\nplt.plot(df[\"NeutronsLessProtons\"])"
  },
  {
    "objectID": "06_pandas.rjs.html#d-1",
    "href": "06_pandas.rjs.html#d-1",
    "title": "pandas",
    "section": "4D",
    "text": "4D\n\nplt.scatter(x=df[\"OutermostElectrons\"], # we can optional specify x and y \n            y=df[\"MeltingPoint\"], \n            s=df[\"AtomicNumber\"], \n            c=df[\"NeutronsLessProtons\"]) # color\nplt.colorbar() # Like a legend for colors."
  },
  {
    "objectID": "06_pandas.rjs.html#kwargs",
    "href": "06_pandas.rjs.html#kwargs",
    "title": "pandas",
    "section": "“kwargs”",
    "text": "“kwargs”\n\nWhen we call a function and use something like x= in the arguments, x is a keyword so we call these “kwargs” for “keyword arguments”.\nYou may see this when looking up functions.\nJust follow examples.\n\n\ndef triple(x):\n    return 3 * x\n\n[triple(x=7), triple(7)]\n\n[21, 21]"
  },
  {
    "objectID": "06_pandas.rjs.html#dropping",
    "href": "06_pandas.rjs.html#dropping",
    "title": "pandas",
    "section": "Dropping",
    "text": "Dropping\n\nSome columns may be useless or redundant.\n\n\ndf.iloc[::20][[\"AtomicNumber\",\"NumberofProtons\",\"NumberofElectrons\"]]\n\n\n\n\n\n\n\n\nAtomicNumber\nNumberofProtons\nNumberofElectrons\n\n\n\n\n0\n1\n1\n1\n\n\n20\n21\n21\n21\n\n\n40\n41\n41\n41\n\n\n60\n61\n61\n61\n\n\n80\n81\n81\n81\n\n\n100\n101\n101\n101"
  },
  {
    "objectID": "06_pandas.rjs.html#drop-it",
    "href": "06_pandas.rjs.html#drop-it",
    "title": "pandas",
    "section": "Drop it",
    "text": "Drop it\n\nWe can remove such columns.\n\n\ndf.shape\n\n(118, 30)\n\n\n\n# Have to specify columns (we can also drop rows)\ndf = df.drop(columns=[\"NumberofProtons\",\"NumberofElectrons\"])\ndf.shape\n\n(118, 28)"
  },
  {
    "objectID": "06_pandas.rjs.html#summary-statistics",
    "href": "06_pandas.rjs.html#summary-statistics",
    "title": "pandas",
    "section": "Summary Statistics",
    "text": "Summary Statistics\n\nThere’s a variety of ways to describe a DataFrame other than just seeing all of it’s data.\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nAtomicNumber\nAtomicMass\nNumberofNeutrons\nPeriod\nGroup\nAtomicRadius\nElectronegativity\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\n\n\n\n\ncount\n118.000000\n118.000000\n118.000000\n118.000000\n90.000000\n86.000000\n96.000000\n102.000000\n105.000000\n98.000000\n98.000000\n103.000000\n107.000000\n85.000000\n118.000000\n49.000000\n118.000000\n118.000000\n\n\nmean\n59.500000\n145.988297\n86.483051\n5.254237\n9.944444\n1.825814\n1.695000\n7.988505\n9.232161\n1281.475184\n2513.143163\n28.116505\n1865.280374\n0.635976\n5.254237\n4.428571\n12.483051\n26.983051\n\n\nstd\n34.207699\n88.954899\n54.785320\n1.618200\n5.597674\n0.611058\n0.621174\n3.334571\n8.630406\n903.685175\n1601.901036\n35.864205\n97.951740\n1.653965\n1.618200\n2.345208\n8.830535\n20.782547\n\n\nmin\n1.000000\n1.007000\n0.000000\n1.000000\n1.000000\n0.490000\n0.700000\n3.893900\n0.000090\n14.175000\n4.220000\n3.000000\n1250.000000\n0.094000\n1.000000\n1.000000\n1.000000\n-1.000000\n\n\n25%\n30.250000\n66.465750\n36.000000\n4.000000\n5.000000\n1.425000\n1.237500\n6.004850\n2.700000\n510.695000\n1069.000000\n11.000000\n1803.500000\n0.168000\n4.000000\n2.000000\n5.000000\n6.500000\n\n\n50%\n59.500000\n142.575000\n83.000000\n6.000000\n10.500000\n1.800000\n1.585000\n6.960250\n7.290000\n1204.150000\n2767.000000\n19.000000\n1878.000000\n0.244000\n6.000000\n4.000000\n11.000000\n24.500000\n\n\n75%\n88.750000\n226.750000\n138.000000\n7.000000\n15.000000\n2.200000\n2.062500\n8.964925\n12.000000\n1811.150000\n3596.750000\n24.000000\n1940.000000\n0.489000\n7.000000\n6.000000\n18.000000\n49.750000\n\n\nmax\n118.000000\n295.000000\n178.000000\n7.000000\n18.000000\n3.300000\n3.980000\n24.587400\n41.000000\n3948.150000\n5869.000000\n203.000000\n2010.000000\n14.304000\n7.000000\n8.000000\n32.000000\n61.000000"
  },
  {
    "objectID": "06_pandas.rjs.html#info",
    "href": "06_pandas.rjs.html#info",
    "title": "pandas",
    "section": "Info",
    "text": "Info\n\nInfo is often helpful\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 118 entries, 0 to 117\nData columns (total 28 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   AtomicNumber         118 non-null    int64  \n 1   Element              118 non-null    object \n 2   Symbol               118 non-null    object \n 3   AtomicMass           118 non-null    float64\n 4   NumberofNeutrons     118 non-null    int64  \n 5   Period               118 non-null    int64  \n 6   Group                90 non-null     float64\n 7   Phase                118 non-null    object \n 8   Radioactive          37 non-null     object \n 9   Natural              90 non-null     object \n 10  Metal                92 non-null     object \n 11  Nonmetal             19 non-null     object \n 12  Metalloid            7 non-null      object \n 13  Type                 115 non-null    object \n 14  AtomicRadius         86 non-null     float64\n 15  Electronegativity    96 non-null     float64\n 16  FirstIonization      102 non-null    float64\n 17  Density              105 non-null    float64\n 18  MeltingPoint         98 non-null     float64\n 19  BoilingPoint         98 non-null     float64\n 20  NumberOfIsotopes     103 non-null    float64\n 21  Discoverer           109 non-null    object \n 22  Year                 107 non-null    float64\n 23  SpecificHeat         85 non-null     float64\n 24  NumberofShells       118 non-null    int64  \n 25  NumberofValence      49 non-null     float64\n 26  OutermostElectrons   118 non-null    float64\n 27  NeutronsLessProtons  118 non-null    int64  \ndtypes: float64(13), int64(5), object(10)\nmemory usage: 25.9+ KB"
  },
  {
    "objectID": "06_pandas.rjs.html#columns-1",
    "href": "06_pandas.rjs.html#columns-1",
    "title": "pandas",
    "section": "Columns",
    "text": "Columns\n\nAnd remember we can see all the column names!\nNo ()!\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Metal',\n       'Nonmetal', 'Metalloid', 'Type', 'AtomicRadius', 'Electronegativity',\n       'FirstIonization', 'Density', 'MeltingPoint', 'BoilingPoint',\n       'NumberOfIsotopes', 'Discoverer', 'Year', 'SpecificHeat',\n       'NumberofShells', 'NumberofValence', 'OutermostElectrons',\n       'NeutronsLessProtons'],\n      dtype='object')"
  },
  {
    "objectID": "06_pandas.rjs.html#shape",
    "href": "06_pandas.rjs.html#shape",
    "title": "pandas",
    "section": "Shape",
    "text": "Shape\n\nAnd of course shape!\n\n\ndf.shape\n\n(118, 28)"
  },
  {
    "objectID": "06_pandas.rjs.html#column-wise",
    "href": "06_pandas.rjs.html#column-wise",
    "title": "pandas",
    "section": "Column-wise",
    "text": "Column-wise\n\nWe can do all kinds of operations over a single column.\n\n\nmp = df[\"MeltingPoint\"] # Copy column to save some typing.\n[mp.min(), mp.max(), mp.mean(), mp.median(), mp.mode(), mp.std()]\n\n[np.float64(14.175),\n np.float64(3948.15),\n np.float64(1281.4751836734692),\n np.float64(1204.15),\n 0     913.15\n 1    1204.15\n Name: MeltingPoint, dtype: float64,\n np.float64(903.6851752147392)]"
  },
  {
    "objectID": "06_pandas.rjs.html#metal-or-not",
    "href": "06_pandas.rjs.html#metal-or-not",
    "title": "pandas",
    "section": "Metal or not",
    "text": "Metal or not\n\nWe helpfully can already see what metals are.\n\n\ndf.iloc[15:25:2][[\"Element\",\"Metal\"]]\n\n\n\n\n\n\n\n\nElement\nMetal\n\n\n\n\n15\nSulfur\nNaN\n\n\n17\nArgon\nNaN\n\n\n19\nCalcium\nyes\n\n\n21\nTitanium\nyes\n\n\n23\nChromium\nyes"
  },
  {
    "objectID": "06_pandas.rjs.html#nan",
    "href": "06_pandas.rjs.html#nan",
    "title": "pandas",
    "section": "NaN",
    "text": "NaN\n\nNaN means “not a number” and is used by pandas (not generally by Python) to fill in missing data.\n\n\nnp.sqrt(-1)\n\nnp.float64(nan)\n\n\n\nI find this idea a bit odd (and e.g. Polars does not do this) but we can work with it."
  },
  {
    "objectID": "06_pandas.rjs.html#nonmetalloid",
    "href": "06_pandas.rjs.html#nonmetalloid",
    "title": "pandas",
    "section": "(Non)metal(loid)",
    "text": "(Non)metal(loid)\n\nElements are “metal”, “nonmetal”, or “metalloid”.\nI regard this as how metallic an element is.\n\n\ndf.iloc[12:16][[\"Element\",\"Metal\",\"Nonmetal\",\"Metalloid\"]]\n\n\n\n\n\n\n\n\nElement\nMetal\nNonmetal\nMetalloid\n\n\n\n\n12\nAluminum\nyes\nNaN\nNaN\n\n\n13\nSilicon\nNaN\nNaN\nyes\n\n\n14\nPhosphorus\nNaN\nyes\nNaN\n\n\n15\nSulfur\nNaN\nyes\nNaN"
  },
  {
    "objectID": "06_pandas.rjs.html#metallic",
    "href": "06_pandas.rjs.html#metallic",
    "title": "pandas",
    "section": "Metallic",
    "text": "Metallic\n\nWe introduce and use np.where, which takes\n\nA condition\nA value if condition\nA value else\n\n\n\ndf[\"Metallic\"] = np.where(df[\"Metal\"] == \"yes\", \"Metal\", \"Nonmetal\")\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nNonmetal\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal"
  },
  {
    "objectID": "06_pandas.rjs.html#metalloids",
    "href": "06_pandas.rjs.html#metalloids",
    "title": "pandas",
    "section": "Metalloids",
    "text": "Metalloids\n\nAdditionally deal with metalloids.\n\n\ndf[df[\"Metalloid\"] == \"yes\"][\"Metallic\"] = \"Metalloid\"\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nNonmetal\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal\n\n\n\n\n\n\n\n\nWhoops!"
  },
  {
    "objectID": "06_pandas.rjs.html#loc",
    "href": "06_pandas.rjs.html#loc",
    "title": "pandas",
    "section": "loc",
    "text": "loc\n\ndf[df[\"Metalloid\"] == \"yes\"] is not the same dataframe as df\nChanges to it will not change df.\nWe use .loc, the cousin of .iloc to update df.\nWe must also very carefully put all indices, comma separated, in single brackets."
  },
  {
    "objectID": "06_pandas.rjs.html#recall-numpy",
    "href": "06_pandas.rjs.html#recall-numpy",
    "title": "pandas",
    "section": "Recall: NumPy",
    "text": "Recall: NumPy\n\n\narr = np.array([\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\n\n\n\nI recommend using the comma notation.\nOtherwise I get unexpected behavior.\n\n\n\n\n# reverse in both dimensions\narr[::-1][::-1] \n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\n\n# reverse in both dimensions\narr[::-1,::-1]\n\narray([[3.50000e-01, 4.15051e+05],\n       [3.30000e-01, 4.13350e+05],\n       [2.80000e-01, 1.90150e+05],\n       [2.50000e-01, 9.11500e+04],\n       [1.50000e-01, 3.76500e+04],\n       [1.00000e-01, 9.27500e+03]])\n\n\n\n\nTakeaway: Always use [x,y] instead of [x][y]\nThis is why we use NumPypandas!"
  },
  {
    "objectID": "06_pandas.rjs.html#update",
    "href": "06_pandas.rjs.html#update",
    "title": "pandas",
    "section": "Update",
    "text": "Update\n\ndf.loc[df[\"Metalloid\"] == \"yes\", \"Metallic\"] = \"Metalloid\"\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nMetalloid\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal\n\n\n\n\n\n\n\n\nMuch nicer."
  },
  {
    "objectID": "06_pandas.rjs.html#another-drop",
    "href": "06_pandas.rjs.html#another-drop",
    "title": "pandas",
    "section": "Another drop",
    "text": "Another drop\n\nLet’s just keep “Metallic” now that we have it.\n\n\n# Have to specify columns (we can also drop rows)\ndf = df.drop(columns=[\"Metal\",\"Nonmetal\",\"Metalloid\"])\ndf.columns \n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence',\n       'OutermostElectrons', 'NeutronsLessProtons', 'Metallic'],\n      dtype='object')"
  },
  {
    "objectID": "06_pandas.rjs.html#on-groups",
    "href": "06_pandas.rjs.html#on-groups",
    "title": "pandas",
    "section": "On groups",
    "text": "On groups\n\nIn chemistry:\n\n\na group (also known as a family) is a column of elements in the periodic table of the chemical elements.\n\n\nIn computing\n\n\na set together with a binary operation satisfying certain algebraic conditions."
  },
  {
    "objectID": "06_pandas.rjs.html#on-groupby",
    "href": "06_pandas.rjs.html#on-groupby",
    "title": "pandas",
    "section": "On groupby",
    "text": "On groupby\n\nIn pandas\n\n\nA groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups."
  },
  {
    "objectID": "06_pandas.rjs.html#element-groups",
    "href": "06_pandas.rjs.html#element-groups",
    "title": "pandas",
    "section": "Element Groups",
    "text": "Element Groups\n\ndf.iloc[:60:10][[\"Element\",\"Group\"]]\n\n\n\n\n\n\n\n\nElement\nGroup\n\n\n\n\n0\nHydrogen\n1.0\n\n\n10\nSodium\n1.0\n\n\n20\nScandium\n3.0\n\n\n30\nGallium\n13.0\n\n\n40\nNiobium\n5.0\n\n\n50\nAntimony\n15.0"
  },
  {
    "objectID": "06_pandas.rjs.html#counting",
    "href": "06_pandas.rjs.html#counting",
    "title": "pandas",
    "section": "Counting",
    "text": "Counting\n\nLet’s see how many elements are in each group!\n\n\ndf.groupby(\"Group\").count()\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nPeriod\nPhase\nRadioactive\nNatural\nType\n...\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\nMetallic\n\n\nGroup\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.0\n7\n7\n7\n7\n7\n7\n7\n1\n7\n7\n...\n7\n7\n7\n7\n6\n7\n7\n7\n7\n7\n\n\n2.0\n6\n6\n6\n6\n6\n6\n6\n1\n6\n6\n...\n6\n6\n6\n6\n5\n6\n6\n6\n6\n6\n\n\n3.0\n4\n4\n4\n4\n4\n4\n4\n1\n4\n4\n...\n4\n4\n4\n4\n4\n4\n0\n4\n4\n4\n\n\n4.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n5.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n6.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n7.0\n4\n4\n4\n4\n4\n4\n4\n2\n2\n4\n...\n3\n3\n4\n4\n2\n4\n0\n4\n4\n4\n\n\n8.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n3\n3\n4\n0\n4\n4\n4\n\n\n9.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n10.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n4\n3\n4\n0\n4\n4\n4\n\n\n11.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n1\n3\n4\n0\n4\n4\n4\n\n\n12.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n2\n3\n4\n0\n4\n4\n4\n\n\n13.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n5\n...\n5\n5\n5\n6\n5\n6\n6\n6\n6\n6\n\n\n14.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n6\n...\n5\n5\n5\n3\n5\n6\n6\n6\n6\n6\n\n\n15.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n5\n...\n5\n5\n5\n5\n5\n6\n6\n6\n6\n6\n\n\n16.0\n6\n6\n6\n6\n6\n6\n6\n2\n5\n6\n...\n5\n5\n5\n5\n4\n6\n6\n6\n6\n6\n\n\n17.0\n6\n6\n6\n6\n6\n6\n6\n2\n5\n5\n...\n5\n5\n5\n6\n4\n6\n6\n6\n6\n6\n\n\n18.0\n7\n7\n7\n7\n7\n7\n7\n2\n6\n7\n...\n6\n6\n6\n7\n6\n7\n6\n7\n7\n7\n\n\n\n\n18 rows × 25 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#goofy",
    "href": "06_pandas.rjs.html#goofy",
    "title": "pandas",
    "section": "Goofy",
    "text": "Goofy\n\nOh it took the count of all columns.\nBut… that isn’t useless?\nLet’s perhaps look a melting point by group.\n\n\ndf.groupby(\"Group\")[\"MeltingPoint\"].mean()\n\nGroup\n1.0      298.616429\n2.0     1102.150000\n3.0     1531.900000\n4.0     2186.150000\n5.0     2728.483333\n6.0     2900.150000\n7.0     2481.816667\n8.0     2543.816667\n9.0     2241.150000\n10.0    1865.483333\n11.0    1309.876667\n12.0     507.213333\n13.0     963.304000\n14.0    1589.742000\n15.0     583.882000\n16.0     436.622000\n17.0     290.758000\n18.0     117.638600\nName: MeltingPoint, dtype: float64"
  },
  {
    "objectID": "06_pandas.rjs.html#plot-it",
    "href": "06_pandas.rjs.html#plot-it",
    "title": "pandas",
    "section": "Plot it",
    "text": "Plot it\n\nThat was too hard to see.\n\n\ndf.groupby(\"Group\")[\"MeltingPoint\"].mean().plot()"
  },
  {
    "objectID": "06_pandas.rjs.html#groupby",
    "href": "06_pandas.rjs.html#groupby",
    "title": "pandas",
    "section": "groupby",
    "text": "groupby\n\nGroupby is a cool and powerful tool.\nI tend to use it with summary statistics, and you can usually work around it with filters, but with a bit of practice it’s a real joy to work with."
  },
  {
    "objectID": "06_pandas.rjs.html#names",
    "href": "06_pandas.rjs.html#names",
    "title": "pandas",
    "section": "Names",
    "text": "Names\n\nAn astute learning will note a few oddities with names and symbols in the table.\nSome symbols and elements start with different letters."
  },
  {
    "objectID": "06_pandas.rjs.html#strings",
    "href": "06_pandas.rjs.html#strings",
    "title": "pandas",
    "section": "Strings",
    "text": "Strings\n\nLike lists, arrays, and DataFrames, we can use indices on strings of characters.\n\n\nsymbol = \"He\"\nelement = \"Helium\"\nsymbol[0] == element[0]\n\nTrue"
  },
  {
    "objectID": "06_pandas.rjs.html#differing",
    "href": "06_pandas.rjs.html#differing",
    "title": "pandas",
    "section": "Differing",
    "text": "Differing\n\nSometimes the first letter differs - but not often.\n\n\nsymbol = \"Au\"\nelement = \"Gold\"\nsymbol[0] == element[0] # != means \"does not equal\"\n\nFalse"
  },
  {
    "objectID": "06_pandas.rjs.html#write-a-function",
    "href": "06_pandas.rjs.html#write-a-function",
    "title": "pandas",
    "section": "Write a function",
    "text": "Write a function\n\nWe make a function that checks if two things start with the same letter.\n\n\ndef differ(x,y):\n    return x[0] != y[0]"
  },
  {
    "objectID": "06_pandas.rjs.html#vectorize",
    "href": "06_pandas.rjs.html#vectorize",
    "title": "pandas",
    "section": "Vectorize",
    "text": "Vectorize\n\nTo apply to DataFrames, we must vectorize it.\n\nx[0] of a DataFrame is a row\nx[0] of a string is a letter\nWe wanted letters!\n\n\n\ndiff_vector = np.vectorize(differ)"
  },
  {
    "objectID": "06_pandas.rjs.html#the-elements",
    "href": "06_pandas.rjs.html#the-elements",
    "title": "pandas",
    "section": "The Elements",
    "text": "The Elements\n\ndf[diff_vector(df[\"Symbol\"], df[\"Element\"])][\"Element\"]\n\n10       Sodium\n18    Potassium\n25         Iron\n46       Silver\n49          Tin\n50     Antimony\n78         Gold\n79      Mercury\n81         Lead\nName: Element, dtype: object\n\n\n\nBasically, these elements have archaic Latin names that were in use when symbols were set before developing their modern names, or something. Read more"
  },
  {
    "objectID": "06_pandas.rjs.html#adding-names",
    "href": "06_pandas.rjs.html#adding-names",
    "title": "pandas",
    "section": "Adding Names",
    "text": "Adding Names\n\nLet’s make another DataFrame\n\nWe’ll call if ad for “artus datus”, which might (I have no idea) be Latin for data frame.\n\n\n\nnames = [\n    [\"Sodium\", \"Natrium\"],\n    [\"Potassium\", \"Kalium\"],\n    [\"Iron\", \"Ferrum\"],\n    [\"Silver\", \"Argentum\"],\n    [\"Tin\", \"Stannum\"],\n    [\"Antimony\", \"Stibium\"],\n    [\"Tungsten\", \"Wolfram\"],\n    [\"Gold\", \"Aurum\"],\n    [\"Mercury\", \"Hydrargyrum\"],\n    [\"Lead\", \"Plumbum\"]\n]"
  },
  {
    "objectID": "06_pandas.rjs.html#to-dataframe",
    "href": "06_pandas.rjs.html#to-dataframe",
    "title": "pandas",
    "section": "To DataFrame",
    "text": "To DataFrame\n\nad for “artus datus”, which may be Latin for data frame.\n\n\nad = pd.DataFrame(names)\nad\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\nSodium\nNatrium\n\n\n1\nPotassium\nKalium\n\n\n2\nIron\nFerrum\n\n\n3\nSilver\nArgentum\n\n\n4\nTin\nStannum\n\n\n5\nAntimony\nStibium\n\n\n6\nTungsten\nWolfram\n\n\n7\nGold\nAurum\n\n\n8\nMercury\nHydrargyrum\n\n\n9\nLead\nPlumbum"
  },
  {
    "objectID": "06_pandas.rjs.html#column-names",
    "href": "06_pandas.rjs.html#column-names",
    "title": "pandas",
    "section": "Column Names",
    "text": "Column Names\n\nRemember .columns?\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence',\n       'OutermostElectrons', 'NeutronsLessProtons', 'Metallic'],\n      dtype='object')\n\n\n\nWe can actually use = with .columns\n\n\nad.columns = [\"Element\", \"Latin\"] \nad.iloc[0]\n\nElement     Sodium\nLatin      Natrium\nName: 0, dtype: object"
  },
  {
    "objectID": "06_pandas.rjs.html#merge-1",
    "href": "06_pandas.rjs.html#merge-1",
    "title": "pandas",
    "section": "Merge",
    "text": "Merge\n\ndf.merge(ad) \n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nPeriod\nGroup\nPhase\nRadioactive\nNatural\n...\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\nMetallic\nLatin\n\n\n\n\n0\n11\nSodium\nNa\n22.990\n12\n3\n1.0\nsolid\nNaN\nyes\n...\n7.0\nDavy\n1807.0\n1.228\n3\n1.0\n1.0\n1\nMetal\nNatrium\n\n\n1\n19\nPotassium\nK\n39.098\n20\n4\n1.0\nsolid\nNaN\nyes\n...\n10.0\nDavy\n1807.0\n0.757\n4\n1.0\n1.0\n1\nMetal\nKalium\n\n\n2\n26\nIron\nFe\n55.845\n30\n4\n8.0\nsolid\nNaN\nyes\n...\n10.0\nPrehistoric\nNaN\n0.449\n4\nNaN\n8.0\n4\nMetal\nFerrum\n\n\n3\n47\nSilver\nAg\n107.868\n61\n5\n11.0\nsolid\nNaN\nyes\n...\n27.0\nPrehistoric\nNaN\n0.235\n5\nNaN\n11.0\n14\nMetal\nArgentum\n\n\n4\n50\nTin\nSn\n118.710\n69\n5\n14.0\nsolid\nNaN\nyes\n...\n28.0\nPrehistoric\nNaN\n0.228\n5\n4.0\n14.0\n19\nMetal\nStannum\n\n\n5\n51\nAntimony\nSb\n121.760\n71\n5\n15.0\nsolid\nNaN\nyes\n...\n29.0\nEarly historic times\nNaN\n0.207\n5\n5.0\n15.0\n20\nMetalloid\nStibium\n\n\n6\n79\nGold\nAu\n196.967\n118\n6\n11.0\nsolid\nNaN\nyes\n...\n21.0\nPrehistoric\nNaN\n0.129\n6\nNaN\n25.0\n39\nMetal\nAurum\n\n\n7\n80\nMercury\nHg\n200.590\n121\n6\n12.0\nliq\nNaN\nyes\n...\n26.0\nPrehistoric\nNaN\n0.140\n6\nNaN\n26.0\n41\nMetal\nHydrargyrum\n\n\n8\n82\nLead\nPb\n207.200\n125\n6\n14.0\nsolid\nNaN\nyes\n...\n29.0\nPrehistoric\nNaN\n0.129\n6\n4.0\n28.0\n43\nMetal\nPlumbum\n\n\n\n\n9 rows × 27 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#oh-no",
    "href": "06_pandas.rjs.html#oh-no",
    "title": "pandas",
    "section": "Oh no!",
    "text": "Oh no!\n\nSo we successfully added Latin names, but…\nWe lost all elements without a Latin name.\nThe merge only kept elements in both df and ad"
  },
  {
    "objectID": "06_pandas.rjs.html#dont-merge",
    "href": "06_pandas.rjs.html#dont-merge",
    "title": "pandas",
    "section": "Don’t merge",
    "text": "Don’t merge\n\nIn my experience, merges never work, but…\nThey explain how joins, the good thing, work."
  },
  {
    "objectID": "06_pandas.rjs.html#background",
    "href": "06_pandas.rjs.html#background",
    "title": "pandas",
    "section": "Background",
    "text": "Background\n\nTo make learning joins easier, we’ll work with two DataFrames.\n\n\nmetalloids = df[df[\"Metallic\"] == \"Metalloid\"]\nlatin_name = df.merge(ad)"
  },
  {
    "objectID": "06_pandas.rjs.html#index",
    "href": "06_pandas.rjs.html#index",
    "title": "pandas",
    "section": "Index",
    "text": "Index\n\nVersus merge, which just figures it out, join likes to look at indices.\nSo we have to make sure we have the same index on both data frames.\nWe’ll use \"Symbol\"\n\n\nmetalloids.index = metalloids[\"Symbol\"]\nlatin_name.index = latin_name[\"Symbol\"]"
  },
  {
    "objectID": "06_pandas.rjs.html#simplify",
    "href": "06_pandas.rjs.html#simplify",
    "title": "pandas",
    "section": "Simplify",
    "text": "Simplify\n\nTo make things easier on us, let’s just only look at a few columns.\nWe will avoid having two columns of the same name.\n\nThis is manageable, but let’s learn joins first.\n\n\n\nmetalloids = metalloids[[\"AtomicNumber\",\"Metallic\"]]\nlatin_name = latin_name[[\"Element\",\"Latin\"]]"
  },
  {
    "objectID": "06_pandas.rjs.html#the-dfs",
    "href": "06_pandas.rjs.html#the-dfs",
    "title": "pandas",
    "section": "The df’s",
    "text": "The df’s\n\n\n\nmetalloids\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\n\n\nSymbol\n\n\n\n\n\n\nB\n5\nMetalloid\n\n\nSi\n14\nMetalloid\n\n\nGe\n32\nMetalloid\n\n\nAs\n33\nMetalloid\n\n\nSb\n51\nMetalloid\n\n\nTe\n52\nMetalloid\n\n\nPo\n84\nMetalloid\n\n\n\n\n\n\n\n\n\nlatin_name\n\n\n\n\n\n\n\n\nElement\nLatin\n\n\nSymbol\n\n\n\n\n\n\nNa\nSodium\nNatrium\n\n\nK\nPotassium\nKalium\n\n\nFe\nIron\nFerrum\n\n\nAg\nSilver\nArgentum\n\n\nSn\nTin\nStannum\n\n\nSb\nAntimony\nStibium\n\n\nAu\nGold\nAurum\n\n\nHg\nMercury\nHydrargyrum\n\n\nPb\nLead\nPlumbum"
  },
  {
    "objectID": "06_pandas.rjs.html#visuals",
    "href": "06_pandas.rjs.html#visuals",
    "title": "pandas",
    "section": "Visuals",
    "text": "Visuals\n\nI will also visualize this using venn diagrams.\nTo my knowledge, there is no graceful way to visualize venn diagrams, but matplotlib-venn is okay.\nI’m spoiler-marking code that shows how I make the venn diagrams."
  },
  {
    "objectID": "06_pandas.rjs.html#section-1",
    "href": "06_pandas.rjs.html#section-1",
    "title": "pandas",
    "section": "",
    "text": "Code\nfrom matplotlib_venn import venn2, venn2_circles\n\ndef show_join(how, left, right, mid):\n    v = venn2((2, 2, 1), ('metalloids', 'latin_name'))\n    v.get_patch_by_id('100').set_color('darkblue' if left else 'white')\n    v.get_patch_by_id('010').set_color('darkblue' if right else 'white')\n    v.get_patch_by_id('110').set_color('darkblue' if mid else 'white')\n    v.get_patch_by_id('100').set_alpha(1.0)\n    v.get_patch_by_id('010').set_alpha(1.0)\n    v.get_patch_by_id('110').set_alpha(1.0)\n    venn2_circles((2, 2, 1))\n    for idx, subset in enumerate(v.subset_labels):\n        v.subset_labels[idx].set_visible(False)\n        plt.title(\"metalloids.join(latin_name, how=\\\"\" + how + \"\\\")\")\n    plt.show()"
  },
  {
    "objectID": "06_pandas.rjs.html#quoth-pandas",
    "href": "06_pandas.rjs.html#quoth-pandas",
    "title": "pandas",
    "section": "Quoth pandas",
    "text": "Quoth pandas\nhow: {‘left’,‘right’,‘outer’,‘inner’,‘cross’}\n\nHow to handle operation of the two objects.\n\n'left': use calling frame’s index\n\n'right': use other’s index.\n'outer': form union of calling frame’s index with other’s index.\n'inner': form intersection of calling frame’s index with other’s index.\n'cross': creates the cartesian product from both frames."
  },
  {
    "objectID": "06_pandas.rjs.html#join-1",
    "href": "06_pandas.rjs.html#join-1",
    "title": "pandas",
    "section": "Join",
    "text": "Join\n\nJoin uses all columns, filling with “NaN”.\n\n\nmetalloids.join(latin_name)\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\nElement\nLatin\n\n\nSymbol\n\n\n\n\n\n\n\n\nB\n5\nMetalloid\nNaN\nNaN\n\n\nSi\n14\nMetalloid\nNaN\nNaN\n\n\nGe\n32\nMetalloid\nNaN\nNaN\n\n\nAs\n33\nMetalloid\nNaN\nNaN\n\n\nSb\n51\nMetalloid\nAntimony\nStibium\n\n\nTe\n52\nMetalloid\nNaN\nNaN\n\n\nPo\n84\nMetalloid\nNaN\nNaN"
  },
  {
    "objectID": "06_pandas.rjs.html#left",
    "href": "06_pandas.rjs.html#left",
    "title": "pandas",
    "section": "Left",
    "text": "Left\n\n\n\nmetalloids.join(latin_name, how='left')[\"Element\"]\n\nSymbol\nB          NaN\nSi         NaN\nGe         NaN\nAs         NaN\nSb    Antimony\nTe         NaN\nPo         NaN\nName: Element, dtype: object\n\n\n\n\nshow_join('left',1,0,1)"
  },
  {
    "objectID": "06_pandas.rjs.html#right",
    "href": "06_pandas.rjs.html#right",
    "title": "pandas",
    "section": "Right",
    "text": "Right\n\n\n\nmetalloids.join(latin_name, how='right')[\"Element\"]\n\nSymbol\nNa       Sodium\nK     Potassium\nFe         Iron\nAg       Silver\nSn          Tin\nSb     Antimony\nAu         Gold\nHg      Mercury\nPb         Lead\nName: Element, dtype: object\n\n\n\n\nshow_join('right',0,1,1)"
  },
  {
    "objectID": "06_pandas.rjs.html#outer",
    "href": "06_pandas.rjs.html#outer",
    "title": "pandas",
    "section": "Outer",
    "text": "Outer\n\n\n\nmetalloids.join(latin_name, how='outer')[\"Element\"]\n\nSymbol\nAg       Silver\nAs          NaN\nAu         Gold\nB           NaN\nFe         Iron\nGe          NaN\nHg      Mercury\nK     Potassium\nNa       Sodium\nPb         Lead\nPo          NaN\nSb     Antimony\nSi          NaN\nSn          Tin\nTe          NaN\nName: Element, dtype: object\n\n\n\n\nshow_join('outer',1,1,1)"
  },
  {
    "objectID": "06_pandas.rjs.html#inner",
    "href": "06_pandas.rjs.html#inner",
    "title": "pandas",
    "section": "Inner",
    "text": "Inner\n\n\n\nmetalloids.join(latin_name, how='inner')[\"Element\"]\n\nSymbol\nSb    Antimony\nName: Element, dtype: object\n\n\n\n\nshow_join('inner',0,0,1)"
  },
  {
    "objectID": "06_pandas.rjs.html#cross",
    "href": "06_pandas.rjs.html#cross",
    "title": "pandas",
    "section": "Cross",
    "text": "Cross\n\nCross makes pairs.\nI don’t see it used often.\n\n\nmetalloids.join(latin_name, how='cross')\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\nElement\nLatin\n\n\n\n\n0\n5\nMetalloid\nSodium\nNatrium\n\n\n1\n5\nMetalloid\nPotassium\nKalium\n\n\n2\n5\nMetalloid\nIron\nFerrum\n\n\n3\n5\nMetalloid\nSilver\nArgentum\n\n\n4\n5\nMetalloid\nTin\nStannum\n\n\n...\n...\n...\n...\n...\n\n\n58\n84\nMetalloid\nTin\nStannum\n\n\n59\n84\nMetalloid\nAntimony\nStibium\n\n\n60\n84\nMetalloid\nGold\nAurum\n\n\n61\n84\nMetalloid\nMercury\nHydrargyrum\n\n\n62\n84\nMetalloid\nLead\nPlumbum\n\n\n\n\n63 rows × 4 columns"
  },
  {
    "objectID": "06_pandas.rjs.html#the-table",
    "href": "06_pandas.rjs.html#the-table",
    "title": "pandas",
    "section": "The Table",
    "text": "The Table\n\nThe periodic table was developed by laying out elements by “Groups” and “Periods”\nBasically, number of outer electrons (that can bond) and number of layers of inner “shells” of electrons that can’t bond.\n\nOr something. I’m not a real scientist.\n\nWe can plot these against each other."
  },
  {
    "objectID": "06_pandas.rjs.html#electronegativity",
    "href": "06_pandas.rjs.html#electronegativity",
    "title": "pandas",
    "section": "Electronegativity",
    "text": "Electronegativity\n\nElectronegativity is a measure of the tendency of an atom to attract a bonding pair of electrons. The Pauling scale is the most commonly used. Fluorine (the most electronegative element) is assigned a value of 4.0, and values range down to cesium and francium which are the least electronegative at 0.7."
  },
  {
    "objectID": "06_pandas.rjs.html#exercise-1",
    "href": "06_pandas.rjs.html#exercise-1",
    "title": "pandas",
    "section": "Exercise",
    "text": "Exercise\n\nPlot the table, by plotting “Groups” vs “Periods”\nPlot electronegativity using color.\nConfirm the claims from the chemistry text about electronegativity trends.\nAnnotate the location of fluorine (F)."
  },
  {
    "objectID": "06_pandas.rjs.html#aside-inversion",
    "href": "06_pandas.rjs.html#aside-inversion",
    "title": "pandas",
    "section": "Aside: Inversion",
    "text": "Aside: Inversion\n\nThere’s a few ways to invert an axis that you may want to use.\n\n\ntaxes = pd.DataFrame(taxes)\nplt.scatter(taxes[0],taxes[1])"
  },
  {
    "objectID": "06_pandas.rjs.html#supply-a--",
    "href": "06_pandas.rjs.html#supply-a--",
    "title": "pandas",
    "section": "Supply a -",
    "text": "Supply a -\n\nYou can negate, but it impacts labels.\n\n\n# Not there's a negative on taxes[1]\nplt.scatter(taxes[0],-taxes[1])"
  },
  {
    "objectID": "06_pandas.rjs.html#get-axes",
    "href": "06_pandas.rjs.html#get-axes",
    "title": "pandas",
    "section": "Get axes",
    "text": "Get axes\n\nYou can use .gca() (get current axes) and set one negative.\n\n\nplt.scatter(taxes[0],taxes[1])\nplt.gca().invert_yaxis()"
  },
  {
    "objectID": "06_pandas.rjs.html#solution",
    "href": "06_pandas.rjs.html#solution",
    "title": "pandas",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n# Plot\nplt.scatter(\n    x=df[\"Group\"],\n    y=df[\"Period\"],\n    c=df[\"Electronegativity\"]\n)\nplt.gca().invert_yaxis()\n# Label\nplt.title(\"Electronegativity\")\nplt.xlabel(\"Group\")\nplt.ylabel(\"Period\")\nplt.colorbar()\n# Annotate\n_ = plt.annotate(\"F\",(17,2))"
  },
  {
    "objectID": "06_pandas.html",
    "href": "06_pandas.html",
    "title": "pandas",
    "section": "",
    "text": "In its own words:\n\n\na fast, powerful, flexible and easy to use open source data analysis and manipulation tool\n\n\nIn my words:\n\n“The basis of the modern ‘boom’ in data and data analysis”\n\n\n\nStands for “panel data”\nOriginal built on NumPy, now on supercomputing technologies.\nCore innovation: The DataFrame\n\n\nA DataFrame is a data structure that organizes data into a 2-dimensional table of rows and columns, much like a spreadsheet.\n\n\n\n\n\nWith pandas, we can do all the things we can do in a spreadsheet, but:\n\nAutomatically\nRepeatedly\nConsistently\n\nBasically, we never have to find a button again, but instead we have to learn functions from code documentation.\n\n\n\n\n\nI mostly (used to) use spreadsheets to make charts.\npandas works very well with Matplotlib (better than NumPy does, I think)\nIn the NumPy tutorial, pandas and Matplotlib are the two other Python packages mentioned, to read spreadsheets and plot them, respectively.\n\n\n\n\n\nAfter years undisputed prominence as the best data library, pandas has recently received a challenger called “Polars” which is situationally faster and rapidly gaining popularity.\nI expect Polars to take over in cloud computing but not in scientific computing.\nPolars uses neither NumPy not Matplotlib, but plots with Altair, which I found insuitable for scientific applications.\n\n\n\n\n\nWe have only calculated and plotted data we have typed in ourselves!\nYuck!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#pandas",
    "href": "06_pandas.html#pandas",
    "title": "pandas",
    "section": "",
    "text": "Stands for “panel data”\nOriginal built on NumPy, now on supercomputing technologies.\nCore innovation: The DataFrame\n\n\nA DataFrame is a data structure that organizes data into a 2-dimensional table of rows and columns, much like a spreadsheet.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#like-a-spreadsheet",
    "href": "06_pandas.html#like-a-spreadsheet",
    "title": "pandas",
    "section": "",
    "text": "With pandas, we can do all the things we can do in a spreadsheet, but:\n\nAutomatically\nRepeatedly\nConsistently\n\nBasically, we never have to find a button again, but instead we have to learn functions from code documentation.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#spreadsheet-usage",
    "href": "06_pandas.html#spreadsheet-usage",
    "title": "pandas",
    "section": "",
    "text": "I mostly (used to) use spreadsheets to make charts.\npandas works very well with Matplotlib (better than NumPy does, I think)\nIn the NumPy tutorial, pandas and Matplotlib are the two other Python packages mentioned, to read spreadsheets and plot them, respectively.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#why-not-pandas",
    "href": "06_pandas.html#why-not-pandas",
    "title": "pandas",
    "section": "",
    "text": "After years undisputed prominence as the best data library, pandas has recently received a challenger called “Polars” which is situationally faster and rapidly gaining popularity.\nI expect Polars to take over in cloud computing but not in scientific computing.\nPolars uses neither NumPy not Matplotlib, but plots with Altair, which I found insuitable for scientific applications.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#relevance",
    "href": "06_pandas.html#relevance",
    "title": "pandas",
    "section": "",
    "text": "We have only calculated and plotted data we have typed in ourselves!\nYuck!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#pip-again",
    "href": "06_pandas.html#pip-again",
    "title": "pandas",
    "section": "pip again",
    "text": "pip again\n\nJust like NumPy and Matplotlib, pandas is a Python package which we install via pip\n\npython3 -m pip install pandas\n\nThat might take a moment, when it does we can check it worked!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#two-first-steps",
    "href": "06_pandas.html#two-first-steps",
    "title": "pandas",
    "section": "Two First Steps",
    "text": "Two First Steps\n\nThere are two great ways to get a pandas DataFrame.\nWe quickly show both.\n\n\nimport numpy as np\nimport pandas as pd",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#from-numpy",
    "href": "06_pandas.html#from-numpy",
    "title": "pandas",
    "section": "From NumPy",
    "text": "From NumPy\n\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\ndf = pd.DataFrame(taxes) # use \"df\" for dataframes by convention\ndf # You'll notice this may look a lot nicer\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n9275.0\n0.10\n\n\n1\n37650.0\n0.15\n\n\n2\n91150.0\n0.25\n\n\n3\n190150.0\n0.28\n\n\n4\n413350.0\n0.33\n\n\n5\n415051.0\n0.35",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#get-a-file",
    "href": "06_pandas.html#get-a-file",
    "title": "pandas",
    "section": "Get a File",
    "text": "Get a File\n\nI will use some nuclear data.\nUsually data will come from your research group or experiments.\nOften stored as a CSV.\n\nA “.csv” file, for “comma separated value”\n\nWe’ll use “Periodic Table of Elements.csv”\n\nSpaces in maes are annoying; we’ll manage.\n\nIt’s from here",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#from-a-url",
    "href": "06_pandas.html#from-a-url",
    "title": "pandas",
    "section": "From a URL",
    "text": "From a URL\n\nYou can use files on your computer, or…\nFrom a url.\nBut the url must be the address of the file\n\nNot a page that talks about the file.\nNot a page with the same data but presented in a pretty table.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#raw-files",
    "href": "06_pandas.html#raw-files",
    "title": "pandas",
    "section": "“Raw” Files",
    "text": "“Raw” Files\n\nOn GitHub (common place to keep files) these are called “raw” files.\n\nhttps://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\n\nNote - that ends in .csv",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#from-file",
    "href": "06_pandas.html#from-file",
    "title": "pandas",
    "section": "From File",
    "text": "From File\n\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n0\n1\nHydrogen\nH\n1.007\n0\n1\n1\n1\n1.0\ngas\n...\n13.5984\n0.000090\n14.175\n20.28\n3.0\nCavendish\n1766.0\n14.304\n1\n1.0\n\n\n1\n2\nHelium\nHe\n4.002\n2\n2\n2\n1\n18.0\ngas\n...\n24.5874\n0.000179\nNaN\n4.22\n5.0\nJanssen\n1868.0\n5.193\n1\nNaN\n\n\n2\n3\nLithium\nLi\n6.941\n4\n3\n3\n2\n1.0\nsolid\n...\n5.3917\n0.534000\n453.850\n1615.00\n5.0\nArfvedson\n1817.0\n3.582\n2\n1.0\n\n\n3\n4\nBeryllium\nBe\n9.012\n5\n4\n4\n2\n2.0\nsolid\n...\n9.3227\n1.850000\n1560.150\n2742.00\n6.0\nVaulquelin\n1798.0\n1.825\n2\n2.0\n\n\n4\n5\nBoron\nB\n10.811\n6\n5\n5\n2\n13.0\nsolid\n...\n8.2980\n2.340000\n2573.150\n4200.00\n6.0\nGay-Lussac\n1808.0\n1.026\n2\n3.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n113\n114\nFlerovium\nFl\n289.000\n175\n114\n114\n7\n14.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1999.0\nNaN\n7\n4.0\n\n\n114\n115\nMoscovium\nMc\n288.000\n173\n115\n115\n7\n15.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n5.0\n\n\n115\n116\nLivermorium\nLv\n292.000\n176\n116\n116\n7\n16.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2000.0\nNaN\n7\n6.0\n\n\n116\n117\nTennessine\nTs\n295.000\n178\n117\n117\n7\n17.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n7.0\n\n\n117\n118\nOganesson\nOg\n294.000\n176\n118\n118\n7\n18.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2006.0\nNaN\n7\n8.0\n\n\n\n\n118 rows × 28 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#dataframes-and-arrays",
    "href": "06_pandas.html#dataframes-and-arrays",
    "title": "pandas",
    "section": "DataFrames and Arrays",
    "text": "DataFrames and Arrays\n\nDataFrames:\n\nHave row and column labels\nCan store multiple types of data (strings/words, integers, and floating point numbers)\n\nArrays:\n\nDon’t\nCan’t",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#subsetting",
    "href": "06_pandas.html#subsetting",
    "title": "pandas",
    "section": "Subsetting",
    "text": "Subsetting\n\nOne of the most common uses for pandas is to subset, to look at part of DataFrame but not all.\nUsually by looking at a specific column or columns - by name.\n\nVs. arrays and lists, DataFrames still have indices, but they are now usually strings.\n\n\n\ndf[\"Element\"]\n\n0         Hydrogen\n1           Helium\n2          Lithium\n3        Beryllium\n4            Boron\n          ...     \n113      Flerovium\n114      Moscovium\n115    Livermorium\n116     Tennessine\n117      Oganesson\nName: Element, Length: 118, dtype: object",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#multiple-indices",
    "href": "06_pandas.html#multiple-indices",
    "title": "pandas",
    "section": "Multiple Indices",
    "text": "Multiple Indices\n\nWe can also subset multiple indices using a list of indices (column names).\n\n\ndf[[\"Element\",\"Symbol\"]]\n\n\n\n\n\n\n\n\nElement\nSymbol\n\n\n\n\n0\nHydrogen\nH\n\n\n1\nHelium\nHe\n\n\n2\nLithium\nLi\n\n\n3\nBeryllium\nBe\n\n\n4\nBoron\nB\n\n\n...\n...\n...\n\n\n113\nFlerovium\nFl\n\n\n114\nMoscovium\nMc\n\n\n115\nLivermorium\nLv\n\n\n116\nTennessine\nTs\n\n\n117\nOganesson\nOg\n\n\n\n\n118 rows × 2 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#filtering",
    "href": "06_pandas.html#filtering",
    "title": "pandas",
    "section": "Filtering",
    "text": "Filtering\n\nWe can subset rows by filtering\nBasically we write what would be an if statement, but use it as an index.\nThe “transuranic” elements are elements higher than number 92.\n\n\ndf[df[\"AtomicNumber\"] &gt; 92]\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nNumberofProtons\nNumberofElectrons\nPeriod\nGroup\nPhase\n...\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\n\n\n\n\n92\n93\nNeptunium\nNp\n237.0\n144\n93\n93\n7\nNaN\nartificial\n...\n6.2657\n20.5\n913.15\n4273.0\n153.0\nMcMillan and Abelson\n1940.0\nNaN\n7\nNaN\n\n\n93\n94\nPlutonium\nPu\n244.0\n150\n94\n94\n7\nNaN\nartificial\n...\n6.0262\n19.8\n913.15\n3501.0\n163.0\nSeaborg et al.\n1940.0\nNaN\n7\nNaN\n\n\n94\n95\nAmericium\nAm\n243.0\n148\n95\n95\n7\nNaN\nartificial\n...\n5.9738\n13.7\n1267.15\n2880.0\n133.0\nSeaborg et al.\n1944.0\nNaN\n7\nNaN\n\n\n95\n96\nCurium\nCm\n247.0\n151\n96\n96\n7\nNaN\nartificial\n...\n5.9915\n13.5\n1340.15\n3383.0\n133.0\nSeaborg et al.\n1944.0\nNaN\n7\nNaN\n\n\n96\n97\nBerkelium\nBk\n247.0\n150\n97\n97\n7\nNaN\nartificial\n...\n6.1979\n14.8\n1259.15\n983.0\n83.0\nSeaborg et al.\n1949.0\nNaN\n7\nNaN\n\n\n97\n98\nCalifornium\nCf\n251.0\n153\n98\n98\n7\nNaN\nartificial\n...\n6.2817\n15.1\n1925.15\n1173.0\n123.0\nSeaborg et al.\n1950.0\nNaN\n7\nNaN\n\n\n98\n99\nEinsteinium\nEs\n252.0\n153\n99\n99\n7\nNaN\nartificial\n...\n6.4200\n13.5\n1133.15\nNaN\n123.0\nGhiorso et al.\n1952.0\nNaN\n7\nNaN\n\n\n99\n100\nFermium\nFm\n257.0\n157\n100\n100\n7\nNaN\nartificial\n...\n6.5000\nNaN\nNaN\nNaN\n103.0\nGhiorso et al.\n1953.0\nNaN\n7\nNaN\n\n\n100\n101\nMendelevium\nMd\n258.0\n157\n101\n101\n7\nNaN\nartificial\n...\n6.5800\nNaN\nNaN\nNaN\n33.0\nGhiorso et al.\n1955.0\nNaN\n7\nNaN\n\n\n101\n102\nNobelium\nNo\n259.0\n157\n102\n102\n7\nNaN\nartificial\n...\n6.6500\nNaN\nNaN\nNaN\n73.0\nGhiorso et al.\n1958.0\nNaN\n7\nNaN\n\n\n102\n103\nLawrencium\nLr\n262.0\n159\n103\n103\n7\nNaN\nartificial\n...\nNaN\nNaN\nNaN\nNaN\n203.0\nGhiorso et al.\n1961.0\nNaN\n7\nNaN\n\n\n103\n104\nRutherfordium\nRf\n261.0\n157\n104\n104\n7\n4.0\nartificial\n...\nNaN\n18.1\nNaN\nNaN\nNaN\nGhiorso et al.\n1969.0\nNaN\n7\nNaN\n\n\n104\n105\nDubnium\nDb\n262.0\n157\n105\n105\n7\n5.0\nartificial\n...\nNaN\n39.0\nNaN\nNaN\nNaN\nGhiorso et al.\n1970.0\nNaN\n7\nNaN\n\n\n105\n106\nSeaborgium\nSg\n266.0\n160\n106\n106\n7\n6.0\nartificial\n...\nNaN\n35.0\nNaN\nNaN\nNaN\nGhiorso et al.\n1974.0\nNaN\n7\nNaN\n\n\n106\n107\nBohrium\nBh\n264.0\n157\n107\n107\n7\n7.0\nartificial\n...\nNaN\n37.0\nNaN\nNaN\nNaN\nArmbruster and M�nzenberg\n1981.0\nNaN\n7\nNaN\n\n\n107\n108\nHassium\nHs\n267.0\n159\n108\n108\n7\n8.0\nartificial\n...\nNaN\n41.0\nNaN\nNaN\nNaN\nArmbruster and M�nzenberg\n1983.0\nNaN\n7\nNaN\n\n\n108\n109\nMeitnerium\nMt\n268.0\n159\n109\n109\n7\n9.0\nartificial\n...\nNaN\n35.0\nNaN\nNaN\nNaN\nGSI, Darmstadt, West Germany\n1982.0\nNaN\n7\nNaN\n\n\n109\n110\nDarmstadtium\nDs\n271.0\n161\n110\n110\n7\n10.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1994.0\nNaN\n7\nNaN\n\n\n110\n111\nRoentgenium\nRg\n272.0\n161\n111\n111\n7\n11.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1994.0\nNaN\n7\nNaN\n\n\n111\n112\nCopernicium\nCn\n285.0\n173\n112\n112\n7\n12.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1996.0\nNaN\n7\nNaN\n\n\n112\n113\nNihonium\nNh\n284.0\n171\n113\n113\n7\n13.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2004.0\nNaN\n7\n3.0\n\n\n113\n114\nFlerovium\nFl\n289.0\n175\n114\n114\n7\n14.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n1999.0\nNaN\n7\n4.0\n\n\n114\n115\nMoscovium\nMc\n288.0\n173\n115\n115\n7\n15.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n5.0\n\n\n115\n116\nLivermorium\nLv\n292.0\n176\n116\n116\n7\n16.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2000.0\nNaN\n7\n6.0\n\n\n116\n117\nTennessine\nTs\n295.0\n178\n117\n117\n7\n17.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2010.0\nNaN\n7\n7.0\n\n\n117\n118\nOganesson\nOg\n294.0\n176\n118\n118\n7\n18.0\nartificial\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n2006.0\nNaN\n7\n8.0\n\n\n\n\n26 rows × 28 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#double-df",
    "href": "06_pandas.html#double-df",
    "title": "pandas",
    "section": "Double df",
    "text": "Double df\n\nWe use df twice in that expression:\n\nOnce to check the df if some value is greater than 92\nOnce to look up all elements for which the value is greater.\n\n\n\ndf[\"AtomicNumber\"] &gt; 92\n\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n113     True\n114     True\n115     True\n116     True\n117     True\nName: AtomicNumber, Length: 118, dtype: bool",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#columns",
    "href": "06_pandas.html#columns",
    "title": "pandas",
    "section": ".columns",
    "text": ".columns\n\nBy the way, what all do we know?\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'NumberofProtons', 'NumberofElectrons', 'Period', 'Group', 'Phase',\n       'Radioactive', 'Natural', 'Metal', 'Nonmetal', 'Metalloid', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence'],\n      dtype='object')\n\n\n\nOh that’s a lot of information!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#how-big",
    "href": "06_pandas.html#how-big",
    "title": "pandas",
    "section": "How big?",
    "text": "How big?\n\nHow big is df?\n\n\ndf.shape\n\n(118, 28)\n\n\n\nAnd by the way, np.array’s have shape too.\n\n\ntaxes.shape\n\n(6, 2)\n\n\n\nAside: Multiple values within a () are asically lists but called tuples.\n\n\ntype(taxes.shape)\n\ntuple",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#locating-entries",
    "href": "06_pandas.html#locating-entries",
    "title": "pandas",
    "section": "Locating Entries",
    "text": "Locating Entries\n\nSometimes you want to use an integer index.\n\n\ndf.iloc[10] # \"Integer Location\"\n\nAtomicNumber                   11\nElement                    Sodium\nSymbol                         Na\nAtomicMass                  22.99\nNumberofNeutrons               12\nNumberofProtons                11\nNumberofElectrons              11\nPeriod                          3\nGroup                         1.0\nPhase                       solid\nRadioactive                   NaN\nNatural                       yes\nMetal                         yes\nNonmetal                      NaN\nMetalloid                     NaN\nType                 Alkali Metal\nAtomicRadius                  2.2\nElectronegativity            0.93\nFirstIonization            5.1391\nDensity                     0.971\nMeltingPoint               371.15\nBoilingPoint               1156.0\nNumberOfIsotopes              7.0\nDiscoverer                   Davy\nYear                       1807.0\nSpecificHeat                1.228\nNumberofShells                  3\nNumberofValence               1.0\nName: 10, dtype: object",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#zeroone-index",
    "href": "06_pandas.html#zeroone-index",
    "title": "pandas",
    "section": "Zero/One index",
    "text": "Zero/One index\n\nDataFrames are 0-indexed\n\n\ndf[\"AtomicNumber\"].iloc[0]\n\nnp.int64(1)\n\n\n\nElements are 1-indexed1 with good reason.\n\n\ndf[[\"AtomicNumber\",\"NumberofProtons\"]].head(1)\n\n\n\n\n\n\n\n\nAtomicNumber\nNumberofProtons\n\n\n\n\n0\n1\n1",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#data-manipulation",
    "href": "06_pandas.html#data-manipulation",
    "title": "pandas",
    "section": "Data Manipulation",
    "text": "Data Manipulation\n\nCheck out these columns\n\n\ndf.iloc[::20][[\"NumberofNeutrons\", \"NumberofProtons\"]]\n\n\n\n\n\n\n\n\nNumberofNeutrons\nNumberofProtons\n\n\n\n\n0\n0\n1\n\n\n20\n24\n21\n\n\n40\n52\n41\n\n\n60\n84\n61\n\n\n80\n123\n81\n\n\n100\n157\n101",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#pattern",
    "href": "06_pandas.html#pattern",
    "title": "pandas",
    "section": "Pattern",
    "text": "Pattern\n\nIt looks like atoms with fewer protons have the same number of protons and neutrons, and atoms with many protons have many more neutrons.\nLet’s calculate the difference.\n\n\ndf[\"NumberofProtons\"] - df[\"NumberofNeutrons\"]\n\n0       1\n1       0\n2      -1\n3      -1\n4      -1\n       ..\n113   -61\n114   -58\n115   -60\n116   -61\n117   -58\nLength: 118, dtype: int64",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#visualize",
    "href": "06_pandas.html#visualize",
    "title": "pandas",
    "section": "Visualize",
    "text": "Visualize\n\nEasier to visualize.\n\n\n# import Matplotlib if you don't have it yet!\nimport matplotlib.pyplot as plt",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#scatterplot",
    "href": "06_pandas.html#scatterplot",
    "title": "pandas",
    "section": "Scatterplot",
    "text": "Scatterplot\n\nplt.scatter(df[\"NumberofProtons\"], df[\"NumberofNeutrons\"])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#insights",
    "href": "06_pandas.html#insights",
    "title": "pandas",
    "section": "Insights",
    "text": "Insights\n\nA lot of science, as far as I can tell is finding novel insights.\nI noticed that boiling/melting point seemed to go up and down at some intervals.\nI recall that the number of outermost electrons did that too…\nLet’s make num_es again, from last time.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#num_es",
    "href": "06_pandas.html#num_es",
    "title": "pandas",
    "section": "num_es",
    "text": "num_es\n\nes = np.array([2, 8, 8, 18, 18, 32, 32])\nnum_es = np.array([]) # The first zero elements\nfor e in es:\n    num_es = np.append(num_es, np.arange(e))\nnum_es += 1\nnum_es\n\narray([ 1.,  2.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,\n        9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,\n       17., 18.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.,\n       12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24.,\n       25., 26., 27., 28., 29., 30., 31., 32.,  1.,  2.,  3.,  4.,  5.,\n        6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,\n       19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n       32.])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#expanding-dataframes",
    "href": "06_pandas.html#expanding-dataframes",
    "title": "pandas",
    "section": "Expanding DataFrames",
    "text": "Expanding DataFrames\n\nWe can create a new column and add new data to it from a np.array\nAt least if the dimensions work out…\n\n\ndf.shape, num_es.shape\n\n((118, 28), (118,))\n\n\n\nWe have 118 elements, so it is good we have 118 possible outermost electron counts!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#update-list",
    "href": "06_pandas.html#update-list",
    "title": "pandas",
    "section": "Update list",
    "text": "Update list\n\nLike updating the element of a list by index…\n\n\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\ncolors[-1] = \"purple\"\ncolors\n\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#update-dataframe",
    "href": "06_pandas.html#update-dataframe",
    "title": "pandas",
    "section": "Update DataFrame",
    "text": "Update DataFrame\n\nWe can update or add a column to a DataFrame by index:\n\n\ndf[\"OutermostElectrons\"] = num_es\ndf.iloc[::20][[\"Element\",\"OutermostElectrons\"]]\n\n\n\n\n\n\n\n\nElement\nOutermostElectrons\n\n\n\n\n0\nHydrogen\n1.0\n\n\n20\nScandium\n3.0\n\n\n40\nNiobium\n5.0\n\n\n60\nPromethium\n7.0\n\n\n80\nThallium\n27.0\n\n\n100\nMendelevium\n15.0",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#patterns",
    "href": "06_pandas.html#patterns",
    "title": "pandas",
    "section": "Patterns",
    "text": "Patterns\n\nFor a scatter, that is two (2) DataFrames (or subsets), not one DataFrame with two columns\n\n\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#d",
    "href": "06_pandas.html#d",
    "title": "pandas",
    "section": "3D",
    "text": "3D\n\nThird dimension via s= for size\n\n\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"], s=df[\"AtomicNumber\"])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#columns-to-columns",
    "href": "06_pandas.html#columns-to-columns",
    "title": "pandas",
    "section": "Columns to Columns",
    "text": "Columns to Columns\n\nUsing vector operations, we can make novel columns from existing columns.\n\n\ndf[\"NeutronsLessProtons\"] = df[\"NumberofNeutrons\"] - df[\"NumberofProtons\"]\nplt.plot(df[\"NeutronsLessProtons\"])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#d-1",
    "href": "06_pandas.html#d-1",
    "title": "pandas",
    "section": "4D",
    "text": "4D\n\nplt.scatter(x=df[\"OutermostElectrons\"], # we can optional specify x and y \n            y=df[\"MeltingPoint\"], \n            s=df[\"AtomicNumber\"], \n            c=df[\"NeutronsLessProtons\"]) # color\nplt.colorbar() # Like a legend for colors.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#kwargs",
    "href": "06_pandas.html#kwargs",
    "title": "pandas",
    "section": "“kwargs”",
    "text": "“kwargs”\n\nWhen we call a function and use something like x= in the arguments, x is a keyword so we call these “kwargs” for “keyword arguments”.\nYou may see this when looking up functions.\nJust follow examples.\n\n\ndef triple(x):\n    return 3 * x\n\n[triple(x=7), triple(7)]\n\n[21, 21]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#dropping",
    "href": "06_pandas.html#dropping",
    "title": "pandas",
    "section": "Dropping",
    "text": "Dropping\n\nSome columns may be useless or redundant.\n\n\ndf.iloc[::20][[\"AtomicNumber\",\"NumberofProtons\",\"NumberofElectrons\"]]\n\n\n\n\n\n\n\n\nAtomicNumber\nNumberofProtons\nNumberofElectrons\n\n\n\n\n0\n1\n1\n1\n\n\n20\n21\n21\n21\n\n\n40\n41\n41\n41\n\n\n60\n61\n61\n61\n\n\n80\n81\n81\n81\n\n\n100\n101\n101\n101",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#drop-it",
    "href": "06_pandas.html#drop-it",
    "title": "pandas",
    "section": "Drop it",
    "text": "Drop it\n\nWe can remove such columns.\n\n\ndf.shape\n\n(118, 30)\n\n\n\n# Have to specify columns (we can also drop rows)\ndf = df.drop(columns=[\"NumberofProtons\",\"NumberofElectrons\"])\ndf.shape\n\n(118, 28)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#summary-statistics",
    "href": "06_pandas.html#summary-statistics",
    "title": "pandas",
    "section": "Summary Statistics",
    "text": "Summary Statistics\n\nThere’s a variety of ways to describe a DataFrame other than just seeing all of it’s data.\n\n\ndf.describe()\n\n\n\n\n\n\n\n\nAtomicNumber\nAtomicMass\nNumberofNeutrons\nPeriod\nGroup\nAtomicRadius\nElectronegativity\nFirstIonization\nDensity\nMeltingPoint\nBoilingPoint\nNumberOfIsotopes\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\n\n\n\n\ncount\n118.000000\n118.000000\n118.000000\n118.000000\n90.000000\n86.000000\n96.000000\n102.000000\n105.000000\n98.000000\n98.000000\n103.000000\n107.000000\n85.000000\n118.000000\n49.000000\n118.000000\n118.000000\n\n\nmean\n59.500000\n145.988297\n86.483051\n5.254237\n9.944444\n1.825814\n1.695000\n7.988505\n9.232161\n1281.475184\n2513.143163\n28.116505\n1865.280374\n0.635976\n5.254237\n4.428571\n12.483051\n26.983051\n\n\nstd\n34.207699\n88.954899\n54.785320\n1.618200\n5.597674\n0.611058\n0.621174\n3.334571\n8.630406\n903.685175\n1601.901036\n35.864205\n97.951740\n1.653965\n1.618200\n2.345208\n8.830535\n20.782547\n\n\nmin\n1.000000\n1.007000\n0.000000\n1.000000\n1.000000\n0.490000\n0.700000\n3.893900\n0.000090\n14.175000\n4.220000\n3.000000\n1250.000000\n0.094000\n1.000000\n1.000000\n1.000000\n-1.000000\n\n\n25%\n30.250000\n66.465750\n36.000000\n4.000000\n5.000000\n1.425000\n1.237500\n6.004850\n2.700000\n510.695000\n1069.000000\n11.000000\n1803.500000\n0.168000\n4.000000\n2.000000\n5.000000\n6.500000\n\n\n50%\n59.500000\n142.575000\n83.000000\n6.000000\n10.500000\n1.800000\n1.585000\n6.960250\n7.290000\n1204.150000\n2767.000000\n19.000000\n1878.000000\n0.244000\n6.000000\n4.000000\n11.000000\n24.500000\n\n\n75%\n88.750000\n226.750000\n138.000000\n7.000000\n15.000000\n2.200000\n2.062500\n8.964925\n12.000000\n1811.150000\n3596.750000\n24.000000\n1940.000000\n0.489000\n7.000000\n6.000000\n18.000000\n49.750000\n\n\nmax\n118.000000\n295.000000\n178.000000\n7.000000\n18.000000\n3.300000\n3.980000\n24.587400\n41.000000\n3948.150000\n5869.000000\n203.000000\n2010.000000\n14.304000\n7.000000\n8.000000\n32.000000\n61.000000",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#info",
    "href": "06_pandas.html#info",
    "title": "pandas",
    "section": "Info",
    "text": "Info\n\nInfo is often helpful\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 118 entries, 0 to 117\nData columns (total 28 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   AtomicNumber         118 non-null    int64  \n 1   Element              118 non-null    object \n 2   Symbol               118 non-null    object \n 3   AtomicMass           118 non-null    float64\n 4   NumberofNeutrons     118 non-null    int64  \n 5   Period               118 non-null    int64  \n 6   Group                90 non-null     float64\n 7   Phase                118 non-null    object \n 8   Radioactive          37 non-null     object \n 9   Natural              90 non-null     object \n 10  Metal                92 non-null     object \n 11  Nonmetal             19 non-null     object \n 12  Metalloid            7 non-null      object \n 13  Type                 115 non-null    object \n 14  AtomicRadius         86 non-null     float64\n 15  Electronegativity    96 non-null     float64\n 16  FirstIonization      102 non-null    float64\n 17  Density              105 non-null    float64\n 18  MeltingPoint         98 non-null     float64\n 19  BoilingPoint         98 non-null     float64\n 20  NumberOfIsotopes     103 non-null    float64\n 21  Discoverer           109 non-null    object \n 22  Year                 107 non-null    float64\n 23  SpecificHeat         85 non-null     float64\n 24  NumberofShells       118 non-null    int64  \n 25  NumberofValence      49 non-null     float64\n 26  OutermostElectrons   118 non-null    float64\n 27  NeutronsLessProtons  118 non-null    int64  \ndtypes: float64(13), int64(5), object(10)\nmemory usage: 25.9+ KB",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#columns-1",
    "href": "06_pandas.html#columns-1",
    "title": "pandas",
    "section": "Columns",
    "text": "Columns\n\nAnd remember we can see all the column names!\nNo ()!\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Metal',\n       'Nonmetal', 'Metalloid', 'Type', 'AtomicRadius', 'Electronegativity',\n       'FirstIonization', 'Density', 'MeltingPoint', 'BoilingPoint',\n       'NumberOfIsotopes', 'Discoverer', 'Year', 'SpecificHeat',\n       'NumberofShells', 'NumberofValence', 'OutermostElectrons',\n       'NeutronsLessProtons'],\n      dtype='object')",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#shape",
    "href": "06_pandas.html#shape",
    "title": "pandas",
    "section": "Shape",
    "text": "Shape\n\nAnd of course shape!\n\n\ndf.shape\n\n(118, 28)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#column-wise",
    "href": "06_pandas.html#column-wise",
    "title": "pandas",
    "section": "Column-wise",
    "text": "Column-wise\n\nWe can do all kinds of operations over a single column.\n\n\nmp = df[\"MeltingPoint\"] # Copy column to save some typing.\n[mp.min(), mp.max(), mp.mean(), mp.median(), mp.mode(), mp.std()]\n\n[np.float64(14.175),\n np.float64(3948.15),\n np.float64(1281.4751836734692),\n np.float64(1204.15),\n 0     913.15\n 1    1204.15\n Name: MeltingPoint, dtype: float64,\n np.float64(903.6851752147392)]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#metal-or-not",
    "href": "06_pandas.html#metal-or-not",
    "title": "pandas",
    "section": "Metal or not",
    "text": "Metal or not\n\nWe helpfully can already see what metals are.\n\n\ndf.iloc[15:25:2][[\"Element\",\"Metal\"]]\n\n\n\n\n\n\n\n\nElement\nMetal\n\n\n\n\n15\nSulfur\nNaN\n\n\n17\nArgon\nNaN\n\n\n19\nCalcium\nyes\n\n\n21\nTitanium\nyes\n\n\n23\nChromium\nyes",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#nan",
    "href": "06_pandas.html#nan",
    "title": "pandas",
    "section": "NaN",
    "text": "NaN\n\nNaN means “not a number” and is used by pandas (not generally by Python) to fill in missing data.\n\n\nnp.sqrt(-1)\n\nnp.float64(nan)\n\n\n\nI find this idea a bit odd (and e.g. Polars does not do this) but we can work with it.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#nonmetalloid",
    "href": "06_pandas.html#nonmetalloid",
    "title": "pandas",
    "section": "(Non)metal(loid)",
    "text": "(Non)metal(loid)\n\nElements are “metal”, “nonmetal”, or “metalloid”.\nI regard this as how metallic an element is.\n\n\ndf.iloc[12:16][[\"Element\",\"Metal\",\"Nonmetal\",\"Metalloid\"]]\n\n\n\n\n\n\n\n\nElement\nMetal\nNonmetal\nMetalloid\n\n\n\n\n12\nAluminum\nyes\nNaN\nNaN\n\n\n13\nSilicon\nNaN\nNaN\nyes\n\n\n14\nPhosphorus\nNaN\nyes\nNaN\n\n\n15\nSulfur\nNaN\nyes\nNaN",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#metallic",
    "href": "06_pandas.html#metallic",
    "title": "pandas",
    "section": "Metallic",
    "text": "Metallic\n\nWe introduce and use np.where, which takes\n\nA condition\nA value if condition\nA value else\n\n\n\ndf[\"Metallic\"] = np.where(df[\"Metal\"] == \"yes\", \"Metal\", \"Nonmetal\")\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nNonmetal\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#metalloids",
    "href": "06_pandas.html#metalloids",
    "title": "pandas",
    "section": "Metalloids",
    "text": "Metalloids\n\nAdditionally deal with metalloids.\n\n\ndf[df[\"Metalloid\"] == \"yes\"][\"Metallic\"] = \"Metalloid\"\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nNonmetal\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal\n\n\n\n\n\n\n\n\nWhoops!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#loc",
    "href": "06_pandas.html#loc",
    "title": "pandas",
    "section": "loc",
    "text": "loc\n\ndf[df[\"Metalloid\"] == \"yes\"] is not the same dataframe as df\nChanges to it will not change df.\nWe use .loc, the cousin of .iloc to update df.\nWe must also very carefully put all indices, comma separated, in single brackets.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#recall-numpy",
    "href": "06_pandas.html#recall-numpy",
    "title": "pandas",
    "section": "Recall: NumPy",
    "text": "Recall: NumPy\n\n\narr = np.array([\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\n\n\n\nI recommend using the comma notation.\nOtherwise I get unexpected behavior.\n\n\n\n\n# reverse in both dimensions\narr[::-1][::-1] \n\narray([[9.27500e+03, 1.00000e-01],\n       [3.76500e+04, 1.50000e-01],\n       [9.11500e+04, 2.50000e-01],\n       [1.90150e+05, 2.80000e-01],\n       [4.13350e+05, 3.30000e-01],\n       [4.15051e+05, 3.50000e-01]])\n\n\n\n\n# reverse in both dimensions\narr[::-1,::-1]\n\narray([[3.50000e-01, 4.15051e+05],\n       [3.30000e-01, 4.13350e+05],\n       [2.80000e-01, 1.90150e+05],\n       [2.50000e-01, 9.11500e+04],\n       [1.50000e-01, 3.76500e+04],\n       [1.00000e-01, 9.27500e+03]])\n\n\n\n\n\nTakeaway: Always use [x,y] instead of [x][y]\nThis is why we use NumPypandas!",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#update",
    "href": "06_pandas.html#update",
    "title": "pandas",
    "section": "Update",
    "text": "Update\n\ndf.loc[df[\"Metalloid\"] == \"yes\", \"Metallic\"] = \"Metalloid\"\ndf.iloc[12:16][[\"Metal\",\"Nonmetal\",\"Metalloid\",\"Metallic\"]]\n\n\n\n\n\n\n\n\nMetal\nNonmetal\nMetalloid\nMetallic\n\n\n\n\n12\nyes\nNaN\nNaN\nMetal\n\n\n13\nNaN\nNaN\nyes\nMetalloid\n\n\n14\nNaN\nyes\nNaN\nNonmetal\n\n\n15\nNaN\nyes\nNaN\nNonmetal\n\n\n\n\n\n\n\n\nMuch nicer.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#another-drop",
    "href": "06_pandas.html#another-drop",
    "title": "pandas",
    "section": "Another drop",
    "text": "Another drop\n\nLet’s just keep “Metallic” now that we have it.\n\n\n# Have to specify columns (we can also drop rows)\ndf = df.drop(columns=[\"Metal\",\"Nonmetal\",\"Metalloid\"])\ndf.columns \n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence',\n       'OutermostElectrons', 'NeutronsLessProtons', 'Metallic'],\n      dtype='object')",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#on-groups",
    "href": "06_pandas.html#on-groups",
    "title": "pandas",
    "section": "On groups",
    "text": "On groups\n\nIn chemistry:\n\n\na group (also known as a family) is a column of elements in the periodic table of the chemical elements.\n\n\nIn computing\n\n\na set together with a binary operation satisfying certain algebraic conditions.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#on-groupby",
    "href": "06_pandas.html#on-groupby",
    "title": "pandas",
    "section": "On groupby",
    "text": "On groupby\n\nIn pandas\n\n\nA groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#element-groups",
    "href": "06_pandas.html#element-groups",
    "title": "pandas",
    "section": "Element Groups",
    "text": "Element Groups\n\ndf.iloc[:60:10][[\"Element\",\"Group\"]]\n\n\n\n\n\n\n\n\nElement\nGroup\n\n\n\n\n0\nHydrogen\n1.0\n\n\n10\nSodium\n1.0\n\n\n20\nScandium\n3.0\n\n\n30\nGallium\n13.0\n\n\n40\nNiobium\n5.0\n\n\n50\nAntimony\n15.0",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#counting",
    "href": "06_pandas.html#counting",
    "title": "pandas",
    "section": "Counting",
    "text": "Counting\n\nLet’s see how many elements are in each group!\n\n\ndf.groupby(\"Group\").count()\n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nPeriod\nPhase\nRadioactive\nNatural\nType\n...\nBoilingPoint\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\nMetallic\n\n\nGroup\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.0\n7\n7\n7\n7\n7\n7\n7\n1\n7\n7\n...\n7\n7\n7\n7\n6\n7\n7\n7\n7\n7\n\n\n2.0\n6\n6\n6\n6\n6\n6\n6\n1\n6\n6\n...\n6\n6\n6\n6\n5\n6\n6\n6\n6\n6\n\n\n3.0\n4\n4\n4\n4\n4\n4\n4\n1\n4\n4\n...\n4\n4\n4\n4\n4\n4\n0\n4\n4\n4\n\n\n4.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n5.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n6.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n7.0\n4\n4\n4\n4\n4\n4\n4\n2\n2\n4\n...\n3\n3\n4\n4\n2\n4\n0\n4\n4\n4\n\n\n8.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n3\n3\n4\n0\n4\n4\n4\n\n\n9.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n4\n4\n3\n4\n0\n4\n4\n4\n\n\n10.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n4\n3\n4\n0\n4\n4\n4\n\n\n11.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n1\n3\n4\n0\n4\n4\n4\n\n\n12.0\n4\n4\n4\n4\n4\n4\n4\n1\n3\n4\n...\n3\n3\n3\n2\n3\n4\n0\n4\n4\n4\n\n\n13.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n5\n...\n5\n5\n5\n6\n5\n6\n6\n6\n6\n6\n\n\n14.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n6\n...\n5\n5\n5\n3\n5\n6\n6\n6\n6\n6\n\n\n15.0\n6\n6\n6\n6\n6\n6\n6\n1\n5\n5\n...\n5\n5\n5\n5\n5\n6\n6\n6\n6\n6\n\n\n16.0\n6\n6\n6\n6\n6\n6\n6\n2\n5\n6\n...\n5\n5\n5\n5\n4\n6\n6\n6\n6\n6\n\n\n17.0\n6\n6\n6\n6\n6\n6\n6\n2\n5\n5\n...\n5\n5\n5\n6\n4\n6\n6\n6\n6\n6\n\n\n18.0\n7\n7\n7\n7\n7\n7\n7\n2\n6\n7\n...\n6\n6\n6\n7\n6\n7\n6\n7\n7\n7\n\n\n\n\n18 rows × 25 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#goofy",
    "href": "06_pandas.html#goofy",
    "title": "pandas",
    "section": "Goofy",
    "text": "Goofy\n\nOh it took the count of all columns.\nBut… that isn’t useless?\nLet’s perhaps look a melting point by group.\n\n\ndf.groupby(\"Group\")[\"MeltingPoint\"].mean()\n\nGroup\n1.0      298.616429\n2.0     1102.150000\n3.0     1531.900000\n4.0     2186.150000\n5.0     2728.483333\n6.0     2900.150000\n7.0     2481.816667\n8.0     2543.816667\n9.0     2241.150000\n10.0    1865.483333\n11.0    1309.876667\n12.0     507.213333\n13.0     963.304000\n14.0    1589.742000\n15.0     583.882000\n16.0     436.622000\n17.0     290.758000\n18.0     117.638600\nName: MeltingPoint, dtype: float64",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#plot-it",
    "href": "06_pandas.html#plot-it",
    "title": "pandas",
    "section": "Plot it",
    "text": "Plot it\n\nThat was too hard to see.\n\n\ndf.groupby(\"Group\")[\"MeltingPoint\"].mean().plot()",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#groupby",
    "href": "06_pandas.html#groupby",
    "title": "pandas",
    "section": "groupby",
    "text": "groupby\n\nGroupby is a cool and powerful tool.\nI tend to use it with summary statistics, and you can usually work around it with filters, but with a bit of practice it’s a real joy to work with.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#names",
    "href": "06_pandas.html#names",
    "title": "pandas",
    "section": "Names",
    "text": "Names\n\nAn astute learning will note a few oddities with names and symbols in the table.\nSome symbols and elements start with different letters.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#strings",
    "href": "06_pandas.html#strings",
    "title": "pandas",
    "section": "Strings",
    "text": "Strings\n\nLike lists, arrays, and DataFrames, we can use indices on strings of characters.\n\n\nsymbol = \"He\"\nelement = \"Helium\"\nsymbol[0] == element[0]\n\nTrue",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#differing",
    "href": "06_pandas.html#differing",
    "title": "pandas",
    "section": "Differing",
    "text": "Differing\n\nSometimes the first letter differs - but not often.\n\n\nsymbol = \"Au\"\nelement = \"Gold\"\nsymbol[0] == element[0] # != means \"does not equal\"\n\nFalse",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#write-a-function",
    "href": "06_pandas.html#write-a-function",
    "title": "pandas",
    "section": "Write a function",
    "text": "Write a function\n\nWe make a function that checks if two things start with the same letter.\n\n\ndef differ(x,y):\n    return x[0] != y[0]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#vectorize",
    "href": "06_pandas.html#vectorize",
    "title": "pandas",
    "section": "Vectorize",
    "text": "Vectorize\n\nTo apply to DataFrames, we must vectorize it.\n\nx[0] of a DataFrame is a row\nx[0] of a string is a letter\nWe wanted letters!\n\n\n\ndiff_vector = np.vectorize(differ)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#the-elements",
    "href": "06_pandas.html#the-elements",
    "title": "pandas",
    "section": "The Elements",
    "text": "The Elements\n\ndf[diff_vector(df[\"Symbol\"], df[\"Element\"])][\"Element\"]\n\n10       Sodium\n18    Potassium\n25         Iron\n46       Silver\n49          Tin\n50     Antimony\n78         Gold\n79      Mercury\n81         Lead\nName: Element, dtype: object\n\n\n\nBasically, these elements have archaic Latin names that were in use when symbols were set before developing their modern names, or something. Read more",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#adding-names",
    "href": "06_pandas.html#adding-names",
    "title": "pandas",
    "section": "Adding Names",
    "text": "Adding Names\n\nLet’s make another DataFrame\n\nWe’ll call if ad for “artus datus”, which might (I have no idea) be Latin for data frame.\n\n\n\nnames = [\n    [\"Sodium\", \"Natrium\"],\n    [\"Potassium\", \"Kalium\"],\n    [\"Iron\", \"Ferrum\"],\n    [\"Silver\", \"Argentum\"],\n    [\"Tin\", \"Stannum\"],\n    [\"Antimony\", \"Stibium\"],\n    [\"Tungsten\", \"Wolfram\"],\n    [\"Gold\", \"Aurum\"],\n    [\"Mercury\", \"Hydrargyrum\"],\n    [\"Lead\", \"Plumbum\"]\n]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#to-dataframe",
    "href": "06_pandas.html#to-dataframe",
    "title": "pandas",
    "section": "To DataFrame",
    "text": "To DataFrame\n\nad for “artus datus”, which may be Latin for data frame.\n\n\nad = pd.DataFrame(names)\nad\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\nSodium\nNatrium\n\n\n1\nPotassium\nKalium\n\n\n2\nIron\nFerrum\n\n\n3\nSilver\nArgentum\n\n\n4\nTin\nStannum\n\n\n5\nAntimony\nStibium\n\n\n6\nTungsten\nWolfram\n\n\n7\nGold\nAurum\n\n\n8\nMercury\nHydrargyrum\n\n\n9\nLead\nPlumbum",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#column-names",
    "href": "06_pandas.html#column-names",
    "title": "pandas",
    "section": "Column Names",
    "text": "Column Names\n\nRemember .columns?\n\n\ndf.columns\n\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence',\n       'OutermostElectrons', 'NeutronsLessProtons', 'Metallic'],\n      dtype='object')\n\n\n\nWe can actually use = with .columns\n\n\nad.columns = [\"Element\", \"Latin\"] \nad.iloc[0]\n\nElement     Sodium\nLatin      Natrium\nName: 0, dtype: object",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#merge-1",
    "href": "06_pandas.html#merge-1",
    "title": "pandas",
    "section": "Merge",
    "text": "Merge\n\ndf.merge(ad) \n\n\n\n\n\n\n\n\nAtomicNumber\nElement\nSymbol\nAtomicMass\nNumberofNeutrons\nPeriod\nGroup\nPhase\nRadioactive\nNatural\n...\nNumberOfIsotopes\nDiscoverer\nYear\nSpecificHeat\nNumberofShells\nNumberofValence\nOutermostElectrons\nNeutronsLessProtons\nMetallic\nLatin\n\n\n\n\n0\n11\nSodium\nNa\n22.990\n12\n3\n1.0\nsolid\nNaN\nyes\n...\n7.0\nDavy\n1807.0\n1.228\n3\n1.0\n1.0\n1\nMetal\nNatrium\n\n\n1\n19\nPotassium\nK\n39.098\n20\n4\n1.0\nsolid\nNaN\nyes\n...\n10.0\nDavy\n1807.0\n0.757\n4\n1.0\n1.0\n1\nMetal\nKalium\n\n\n2\n26\nIron\nFe\n55.845\n30\n4\n8.0\nsolid\nNaN\nyes\n...\n10.0\nPrehistoric\nNaN\n0.449\n4\nNaN\n8.0\n4\nMetal\nFerrum\n\n\n3\n47\nSilver\nAg\n107.868\n61\n5\n11.0\nsolid\nNaN\nyes\n...\n27.0\nPrehistoric\nNaN\n0.235\n5\nNaN\n11.0\n14\nMetal\nArgentum\n\n\n4\n50\nTin\nSn\n118.710\n69\n5\n14.0\nsolid\nNaN\nyes\n...\n28.0\nPrehistoric\nNaN\n0.228\n5\n4.0\n14.0\n19\nMetal\nStannum\n\n\n5\n51\nAntimony\nSb\n121.760\n71\n5\n15.0\nsolid\nNaN\nyes\n...\n29.0\nEarly historic times\nNaN\n0.207\n5\n5.0\n15.0\n20\nMetalloid\nStibium\n\n\n6\n79\nGold\nAu\n196.967\n118\n6\n11.0\nsolid\nNaN\nyes\n...\n21.0\nPrehistoric\nNaN\n0.129\n6\nNaN\n25.0\n39\nMetal\nAurum\n\n\n7\n80\nMercury\nHg\n200.590\n121\n6\n12.0\nliq\nNaN\nyes\n...\n26.0\nPrehistoric\nNaN\n0.140\n6\nNaN\n26.0\n41\nMetal\nHydrargyrum\n\n\n8\n82\nLead\nPb\n207.200\n125\n6\n14.0\nsolid\nNaN\nyes\n...\n29.0\nPrehistoric\nNaN\n0.129\n6\n4.0\n28.0\n43\nMetal\nPlumbum\n\n\n\n\n9 rows × 27 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#oh-no",
    "href": "06_pandas.html#oh-no",
    "title": "pandas",
    "section": "Oh no!",
    "text": "Oh no!\n\nSo we successfully added Latin names, but…\nWe lost all elements without a Latin name.\nThe merge only kept elements in both df and ad",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#dont-merge",
    "href": "06_pandas.html#dont-merge",
    "title": "pandas",
    "section": "Don’t merge",
    "text": "Don’t merge\n\nIn my experience, merges never work, but…\nThey explain how joins, the good thing, work.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#background",
    "href": "06_pandas.html#background",
    "title": "pandas",
    "section": "Background",
    "text": "Background\n\nTo make learning joins easier, we’ll work with two DataFrames.\n\n\nmetalloids = df[df[\"Metallic\"] == \"Metalloid\"]\nlatin_name = df.merge(ad)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#index",
    "href": "06_pandas.html#index",
    "title": "pandas",
    "section": "Index",
    "text": "Index\n\nVersus merge, which just figures it out, join likes to look at indices.\nSo we have to make sure we have the same index on both data frames.\nWe’ll use \"Symbol\"\n\n\nmetalloids.index = metalloids[\"Symbol\"]\nlatin_name.index = latin_name[\"Symbol\"]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#simplify",
    "href": "06_pandas.html#simplify",
    "title": "pandas",
    "section": "Simplify",
    "text": "Simplify\n\nTo make things easier on us, let’s just only look at a few columns.\nWe will avoid having two columns of the same name.\n\nThis is manageable, but let’s learn joins first.\n\n\n\nmetalloids = metalloids[[\"AtomicNumber\",\"Metallic\"]]\nlatin_name = latin_name[[\"Element\",\"Latin\"]]",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#the-dfs",
    "href": "06_pandas.html#the-dfs",
    "title": "pandas",
    "section": "The df’s",
    "text": "The df’s\n\n\n\nmetalloids\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\n\n\nSymbol\n\n\n\n\n\n\nB\n5\nMetalloid\n\n\nSi\n14\nMetalloid\n\n\nGe\n32\nMetalloid\n\n\nAs\n33\nMetalloid\n\n\nSb\n51\nMetalloid\n\n\nTe\n52\nMetalloid\n\n\nPo\n84\nMetalloid\n\n\n\n\n\n\n\n\n\nlatin_name\n\n\n\n\n\n\n\n\nElement\nLatin\n\n\nSymbol\n\n\n\n\n\n\nNa\nSodium\nNatrium\n\n\nK\nPotassium\nKalium\n\n\nFe\nIron\nFerrum\n\n\nAg\nSilver\nArgentum\n\n\nSn\nTin\nStannum\n\n\nSb\nAntimony\nStibium\n\n\nAu\nGold\nAurum\n\n\nHg\nMercury\nHydrargyrum\n\n\nPb\nLead\nPlumbum",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#visuals",
    "href": "06_pandas.html#visuals",
    "title": "pandas",
    "section": "Visuals",
    "text": "Visuals\n\nI will also visualize this using venn diagrams.\nTo my knowledge, there is no graceful way to visualize venn diagrams, but matplotlib-venn is okay.\nI’m spoiler-marking code that shows how I make the venn diagrams.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#section-1",
    "href": "06_pandas.html#section-1",
    "title": "pandas",
    "section": "",
    "text": "Code\nfrom matplotlib_venn import venn2, venn2_circles\n\ndef show_join(how, left, right, mid):\n    v = venn2((2, 2, 1), ('metalloids', 'latin_name'))\n    v.get_patch_by_id('100').set_color('darkblue' if left else 'white')\n    v.get_patch_by_id('010').set_color('darkblue' if right else 'white')\n    v.get_patch_by_id('110').set_color('darkblue' if mid else 'white')\n    v.get_patch_by_id('100').set_alpha(1.0)\n    v.get_patch_by_id('010').set_alpha(1.0)\n    v.get_patch_by_id('110').set_alpha(1.0)\n    venn2_circles((2, 2, 1))\n    for idx, subset in enumerate(v.subset_labels):\n        v.subset_labels[idx].set_visible(False)\n        plt.title(\"metalloids.join(latin_name, how=\\\"\" + how + \"\\\")\")\n    plt.show()",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#quoth-pandas",
    "href": "06_pandas.html#quoth-pandas",
    "title": "pandas",
    "section": "Quoth pandas",
    "text": "Quoth pandas\nhow: {‘left’,‘right’,‘outer’,‘inner’,‘cross’}\n\nHow to handle operation of the two objects.\n\n'left': use calling frame’s index\n\n'right': use other’s index.\n'outer': form union of calling frame’s index with other’s index.\n'inner': form intersection of calling frame’s index with other’s index.\n'cross': creates the cartesian product from both frames.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#join-1",
    "href": "06_pandas.html#join-1",
    "title": "pandas",
    "section": "Join",
    "text": "Join\n\nJoin uses all columns, filling with “NaN”.\n\n\nmetalloids.join(latin_name)\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\nElement\nLatin\n\n\nSymbol\n\n\n\n\n\n\n\n\nB\n5\nMetalloid\nNaN\nNaN\n\n\nSi\n14\nMetalloid\nNaN\nNaN\n\n\nGe\n32\nMetalloid\nNaN\nNaN\n\n\nAs\n33\nMetalloid\nNaN\nNaN\n\n\nSb\n51\nMetalloid\nAntimony\nStibium\n\n\nTe\n52\nMetalloid\nNaN\nNaN\n\n\nPo\n84\nMetalloid\nNaN\nNaN",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#left",
    "href": "06_pandas.html#left",
    "title": "pandas",
    "section": "Left",
    "text": "Left\n\n\n\nmetalloids.join(latin_name, how='left')[\"Element\"]\n\nSymbol\nB          NaN\nSi         NaN\nGe         NaN\nAs         NaN\nSb    Antimony\nTe         NaN\nPo         NaN\nName: Element, dtype: object\n\n\n\n\nshow_join('left',1,0,1)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#right",
    "href": "06_pandas.html#right",
    "title": "pandas",
    "section": "Right",
    "text": "Right\n\n\n\nmetalloids.join(latin_name, how='right')[\"Element\"]\n\nSymbol\nNa       Sodium\nK     Potassium\nFe         Iron\nAg       Silver\nSn          Tin\nSb     Antimony\nAu         Gold\nHg      Mercury\nPb         Lead\nName: Element, dtype: object\n\n\n\n\nshow_join('right',0,1,1)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#outer",
    "href": "06_pandas.html#outer",
    "title": "pandas",
    "section": "Outer",
    "text": "Outer\n\n\n\nmetalloids.join(latin_name, how='outer')[\"Element\"]\n\nSymbol\nAg       Silver\nAs          NaN\nAu         Gold\nB           NaN\nFe         Iron\nGe          NaN\nHg      Mercury\nK     Potassium\nNa       Sodium\nPb         Lead\nPo          NaN\nSb     Antimony\nSi          NaN\nSn          Tin\nTe          NaN\nName: Element, dtype: object\n\n\n\n\nshow_join('outer',1,1,1)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#inner",
    "href": "06_pandas.html#inner",
    "title": "pandas",
    "section": "Inner",
    "text": "Inner\n\n\n\nmetalloids.join(latin_name, how='inner')[\"Element\"]\n\nSymbol\nSb    Antimony\nName: Element, dtype: object\n\n\n\n\nshow_join('inner',0,0,1)",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#cross",
    "href": "06_pandas.html#cross",
    "title": "pandas",
    "section": "Cross",
    "text": "Cross\n\nCross makes pairs.\nI don’t see it used often.\n\n\nmetalloids.join(latin_name, how='cross')\n\n\n\n\n\n\n\n\nAtomicNumber\nMetallic\nElement\nLatin\n\n\n\n\n0\n5\nMetalloid\nSodium\nNatrium\n\n\n1\n5\nMetalloid\nPotassium\nKalium\n\n\n2\n5\nMetalloid\nIron\nFerrum\n\n\n3\n5\nMetalloid\nSilver\nArgentum\n\n\n4\n5\nMetalloid\nTin\nStannum\n\n\n...\n...\n...\n...\n...\n\n\n58\n84\nMetalloid\nTin\nStannum\n\n\n59\n84\nMetalloid\nAntimony\nStibium\n\n\n60\n84\nMetalloid\nGold\nAurum\n\n\n61\n84\nMetalloid\nMercury\nHydrargyrum\n\n\n62\n84\nMetalloid\nLead\nPlumbum\n\n\n\n\n63 rows × 4 columns",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#the-table",
    "href": "06_pandas.html#the-table",
    "title": "pandas",
    "section": "The Table",
    "text": "The Table\n\nThe periodic table was developed by laying out elements by “Groups” and “Periods”\nBasically, number of outer electrons (that can bond) and number of layers of inner “shells” of electrons that can’t bond.\n\nOr something. I’m not a real scientist.\n\nWe can plot these against each other.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#electronegativity",
    "href": "06_pandas.html#electronegativity",
    "title": "pandas",
    "section": "Electronegativity",
    "text": "Electronegativity\n\nElectronegativity is a measure of the tendency of an atom to attract a bonding pair of electrons. The Pauling scale is the most commonly used. Fluorine (the most electronegative element) is assigned a value of 4.0, and values range down to cesium and francium which are the least electronegative at 0.7.",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#exercise-1",
    "href": "06_pandas.html#exercise-1",
    "title": "pandas",
    "section": "Exercise",
    "text": "Exercise\n\nPlot the table, by plotting “Groups” vs “Periods”\nPlot electronegativity using color.\nConfirm the claims from the chemistry text about electronegativity trends.\nAnnotate the location of fluorine (F).",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#aside-inversion",
    "href": "06_pandas.html#aside-inversion",
    "title": "pandas",
    "section": "Aside: Inversion",
    "text": "Aside: Inversion\n\nThere’s a few ways to invert an axis that you may want to use.\n\n\ntaxes = pd.DataFrame(taxes)\nplt.scatter(taxes[0],taxes[1])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#supply-a--",
    "href": "06_pandas.html#supply-a--",
    "title": "pandas",
    "section": "Supply a -",
    "text": "Supply a -\n\nYou can negate, but it impacts labels.\n\n\n# Not there's a negative on taxes[1]\nplt.scatter(taxes[0],-taxes[1])",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#get-axes",
    "href": "06_pandas.html#get-axes",
    "title": "pandas",
    "section": "Get axes",
    "text": "Get axes\n\nYou can use .gca() (get current axes) and set one negative.\n\n\nplt.scatter(taxes[0],taxes[1])\nplt.gca().invert_yaxis()",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#solution",
    "href": "06_pandas.html#solution",
    "title": "pandas",
    "section": "Solution",
    "text": "Solution\n\n\nCode\n# Plot\nplt.scatter(\n    x=df[\"Group\"],\n    y=df[\"Period\"],\n    c=df[\"Electronegativity\"]\n)\nplt.gca().invert_yaxis()\n# Label\nplt.title(\"Electronegativity\")\nplt.xlabel(\"Group\")\nplt.ylabel(\"Period\")\nplt.colorbar()\n# Annotate\n_ = plt.annotate(\"F\",(17,2))",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "06_pandas.html#footnotes",
    "href": "06_pandas.html#footnotes",
    "title": "pandas",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNeutronium is a proposed but not academically interesting element with atomic number 0.↩︎",
    "crumbs": [
      "<strong>pandas</strong>"
    ]
  },
  {
    "objectID": "08_sympy.rjs.html#why-sympy",
    "href": "08_sympy.rjs.html#why-sympy",
    "title": "SymPy",
    "section": "Why SymPy",
    "text": "Why SymPy\n\n“SymPy is free both as in speech and as in beer.”\n“Most computer algebra systems invent their own language. Not SymPy.”\n“An advantage of SymPy is that it is lightweight.”"
  },
  {
    "objectID": "08_sympy.rjs.html#why-not-sympy",
    "href": "08_sympy.rjs.html#why-not-sympy",
    "title": "SymPy",
    "section": "Why not SymPy",
    "text": "Why not SymPy\n\nTo my knowledge, there’s no real competitors with SymPy.\nThe closest are probably SageMath and Mathematica.\nI use browser-based Mathematica via https://www.wolframalpha.com/ from time to time (when I don’t have a Python installation handy)."
  },
  {
    "objectID": "08_sympy.rjs.html#cite",
    "href": "08_sympy.rjs.html#cite",
    "title": "SymPy",
    "section": "Cite",
    "text": "Cite\n@article{10.7717/peerj-cs.103,\n     title = {SymPy: symbolic computing in Python},\n     author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \\v{C}ert\\'{i}k, Ond\\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\\v{c}ka, \\v{S}t\\v{e}p\\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},\n     year = 2017,\n     month = jan,\n     keywords = {Python, Computer algebra system, Symbolics},\n     abstract = {\n                SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.\n             },\n     volume = 3,\n     pages = {e103},\n     journal = {PeerJ Computer Science},\n     issn = {2376-5992},\n     url = {https://doi.org/10.7717/peerj-cs.103},\n     doi = {10.7717/peerj-cs.103}\n    }"
  },
  {
    "objectID": "08_sympy.rjs.html#pip-again",
    "href": "08_sympy.rjs.html#pip-again",
    "title": "SymPy",
    "section": "pip again",
    "text": "pip again\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install sympy\n\nThat might take a moment, when it does we can check it worked!"
  },
  {
    "objectID": "08_sympy.rjs.html#example",
    "href": "08_sympy.rjs.html#example",
    "title": "SymPy",
    "section": "Example",
    "text": "Example\n\nComputers don’t hold numbers that precisely.\n\n\n10.0 ** 100 == 10.0 ** 100 + 47\n\nTrue"
  },
  {
    "objectID": "08_sympy.rjs.html#fractions",
    "href": "08_sympy.rjs.html#fractions",
    "title": "SymPy",
    "section": "Fractions",
    "text": "Fractions\n\nMuch worse with fractions I find.\n\n\n1 / 7000000 * 7000000\n\n0.9999999999999999"
  },
  {
    "objectID": "08_sympy.rjs.html#floats",
    "href": "08_sympy.rjs.html#floats",
    "title": "SymPy",
    "section": "Floats:",
    "text": "Floats:\n\nThe IEEE 754 Floating-Point Standard\n\n\n\nIt is basically scientific notation that fits in a fixed amount of characters."
  },
  {
    "objectID": "08_sympy.rjs.html#what-is-it",
    "href": "08_sympy.rjs.html#what-is-it",
    "title": "SymPy",
    "section": "What is it?",
    "text": "What is it?\n\nThe IEEE 754 standard defines formats for representing floating-point numbers.\nIt specifies how floating-point numbers are stored and operated on in computer hardware.\nMost modern CPUs adhere to this standard.\n\n\nimport sys\n# Check the floating-point precision on your system\nsys.float_info\n\nsys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)"
  },
  {
    "objectID": "08_sympy.rjs.html#why-is-it-important",
    "href": "08_sympy.rjs.html#why-is-it-important",
    "title": "SymPy",
    "section": "Why is it important?",
    "text": "Why is it important?\n\nEnsures portability and consistency of numerical computations across different systems.\nWithout a standard, the same calculation could yield different results on different machines.\nEssential for reliable scientific and engineering software."
  },
  {
    "objectID": "08_sympy.rjs.html#single-precision-float32",
    "href": "08_sympy.rjs.html#single-precision-float32",
    "title": "SymPy",
    "section": "Single Precision (Float32)",
    "text": "Single Precision (Float32)\n\nUses 32 bits to represent a number.\n1 sign bit, 8 exponent bits, 23 significand (mantissa) bits.\nOffers approximately 7 decimal digits of precision.\n\n\nimport numpy as np\nnp.float32(1/7)\n\nnp.float32(0.14285715)"
  },
  {
    "objectID": "08_sympy.rjs.html#double-precision-float64",
    "href": "08_sympy.rjs.html#double-precision-float64",
    "title": "SymPy",
    "section": "Double Precision (Float64)",
    "text": "Double Precision (Float64)\n\nUses 64 bits to represent a number.\n1 sign bit, 11 exponent bits, 52 significand bits.\nOffers approximately 15-17 decimal digits of precision. This is the default in Python and NumPy.\n\n\n# Example of a float64 number (default in Python)\n1/7\n\n0.14285714285714285"
  },
  {
    "objectID": "08_sympy.rjs.html#special-values",
    "href": "08_sympy.rjs.html#special-values",
    "title": "SymPy",
    "section": "Special Values",
    "text": "Special Values\n\nInfinity \\(\\infty\\): Result of overflow or division by zero.\n\n\nlil = np.finfo(np.float64).resolution # smallest recognizable value\nbig = np.finfo(np.float64).max # biggest recognizable value\nbig / lil\n\nnp.float64(inf)\n\n\n\nNot a Number (NaN): Result of undefined operations (e.g., \\(0/0\\), \\(\\sqrt{-1}\\)).\n\n\nnp.sqrt(-1)\n\nnp.float64(nan)"
  },
  {
    "objectID": "08_sympy.rjs.html#pitfall-1-limited-precision",
    "href": "08_sympy.rjs.html#pitfall-1-limited-precision",
    "title": "SymPy",
    "section": "Pitfall 1: Limited Precision",
    "text": "Pitfall 1: Limited Precision\n\nNot all real numbers can be represented exactly.\nDecimal numbers like 0.1 often have an infinitely repeating binary representation.\nThis leads to small, unavoidable rounding errors.\n\n\n.1 + .2\n\n0.30000000000000004"
  },
  {
    "objectID": "08_sympy.rjs.html#pitfall-2-accumulation",
    "href": "08_sympy.rjs.html#pitfall-2-accumulation",
    "title": "SymPy",
    "section": "Pitfall 2: Accumulation",
    "text": "Pitfall 2: Accumulation\n\nSmall rounding errors can accumulate over many operations.\nThis can lead to significant inaccuracies in long computations or iterative algorithms.\nCareful algorithm design and error analysis are crucial.\n\n\ntotal = 0.0\nfor _ in range(100000):\n    total += 0.1\ntotal, 100000 * 0.1\n\n(10000.000000018848, 10000.0)"
  },
  {
    "objectID": "08_sympy.rjs.html#pitfall-3-comparison-issues",
    "href": "08_sympy.rjs.html#pitfall-3-comparison-issues",
    "title": "SymPy",
    "section": "Pitfall 3: Comparison Issues",
    "text": "Pitfall 3: Comparison Issues\n\nDue to limited precision, direct equality comparisons (==) between floating-point numbers are often unreliable.\n\n\n(1 + 2) / 10\n\n0.3\n\n\n\n1 / 10 + 2 / 10\n\n0.30000000000000004"
  },
  {
    "objectID": "08_sympy.rjs.html#pitfall-4-subtractive-cancellation",
    "href": "08_sympy.rjs.html#pitfall-4-subtractive-cancellation",
    "title": "SymPy",
    "section": "Pitfall 4: Subtractive Cancellation",
    "text": "Pitfall 4: Subtractive Cancellation\n\nOccurs when subtracting two nearly equal numbers.\nThe most significant bits cancel out, leaving only the less significant bits.\nCan drastically reduce the effective precision.\n\n\nx = 1.0000000000000001\ny = 1.0000000000000000\nx - y\n\n0.0"
  },
  {
    "objectID": "08_sympy.rjs.html#credit",
    "href": "08_sympy.rjs.html#credit",
    "title": "SymPy",
    "section": "Credit",
    "text": "Credit\n\nThe SymPy tutorial.\nSymPy solves the floating point problem."
  },
  {
    "objectID": "08_sympy.rjs.html#quoth-sympy",
    "href": "08_sympy.rjs.html#quoth-sympy",
    "title": "SymPy",
    "section": "Quoth SymPy",
    "text": "Quoth SymPy\n\nSymbolic computation deals with the computation of mathematical objects symbolically. This means that the mathematical objects are represented exactly, not approximately, and mathematical expressions with unevaluated variables are left in symbolic form."
  },
  {
    "objectID": "08_sympy.rjs.html#non-symbolic-computation",
    "href": "08_sympy.rjs.html#non-symbolic-computation",
    "title": "SymPy",
    "section": "Non-symbolic Computation",
    "text": "Non-symbolic Computation\n\nA common problem in computing is to compute the likes of distance between points separated by vectors.\nImagine two objects are separated by a horizontal displacement of 3 units, and vertical displacement of 4 units, and we wish to determine the minimum distance.\nA straightforward application of the Pythagorean Theorem.\n\n\nnp.sqrt(3 * 3 + 4 * 4)\n\nnp.float64(5.0)"
  },
  {
    "objectID": "08_sympy.rjs.html#pitfalls",
    "href": "08_sympy.rjs.html#pitfalls",
    "title": "SymPy",
    "section": "Pitfalls",
    "text": "Pitfalls\n\nThese distances quickly become inaccurate.\n\n\nnp.sqrt(2 * 2 + 4 * 4)\n\nnp.float64(4.47213595499958)\n\n\n\nThen stuff like this happens:"
  },
  {
    "objectID": "08_sympy.rjs.html#symbolic-computation-1",
    "href": "08_sympy.rjs.html#symbolic-computation-1",
    "title": "SymPy",
    "section": "Symbolic Computation",
    "text": "Symbolic Computation\n\nIn point of fact, the solution to \\(\\sqrt{2^2 + 4*2}\\) is actually \\(\\sqrt{20}\\) and there’s no other graceful way to represent it.\nSo we’ll use symbols to store values.\n\n\nimport sympy\nx = sympy.symbols('x')\ny = sympy.symbols('y')\ndist = sympy.sqrt(x + y)\ndist\n\n\\(\\displaystyle \\sqrt{x + y}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#expressions",
    "href": "08_sympy.rjs.html#expressions",
    "title": "SymPy",
    "section": "Expressions",
    "text": "Expressions\n\nWe term this a “symbolic expression”.\nWe can perform operations…\n\n\n2 * dist\n\n\\(\\displaystyle 2 \\sqrt{x + y}\\)\n\n\n\nWe can add other symbols…\n\n\nz = sympy.symbols('z')\nz + dist\n\n\\(\\displaystyle z + \\sqrt{x + y}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#niceties",
    "href": "08_sympy.rjs.html#niceties",
    "title": "SymPy",
    "section": "Niceties",
    "text": "Niceties\n\nWe can declare multiple symbols at once:\n\n\na, b, c = sympy.symbols('a b c')\n\n\nSymPy will automatically simplify.\n\n\nsympy.sqrt(20)\n\n\\(\\displaystyle 2 \\sqrt{5}\\)\n\n\n\nCompare:\n\n\nnp.sqrt(20), np.sqrt(5), 2 * np.sqrt(5)\n\n(np.float64(4.47213595499958),\n np.float64(2.23606797749979),\n np.float64(4.47213595499958))"
  },
  {
    "objectID": "08_sympy.rjs.html#extended-floats",
    "href": "08_sympy.rjs.html#extended-floats",
    "title": "SymPy",
    "section": "Extended Floats",
    "text": "Extended Floats\n\nSymPy uses floats by default, but doesn’t have to.\nYou can specify a number of decimals for any value.\nWe also should that SymPy contains some useful constants!\n\n\n# \"Evaluate as float to 100 digits\"\n# We use sympy.py, not e.g. np.pi\nsympy.pi.evalf(100)\n\n\\(\\displaystyle 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#substitution",
    "href": "08_sympy.rjs.html#substitution",
    "title": "SymPy",
    "section": "Substitution",
    "text": "Substitution\n\nOften we want to solve an equation algebraically and also know a numerical solution.\nThe usefulness of SymPy is to do both, and maximally simply the result to minimize error.\nWe can use subs() to get solutions given values.\n\n\ndist\n\n\\(\\displaystyle \\sqrt{x + y}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#value-substitution",
    "href": "08_sympy.rjs.html#value-substitution",
    "title": "SymPy",
    "section": "Value Substitution",
    "text": "Value Substitution\n\nSubstitute 3 for x\n\n\ndist.subs(x, 3)\n\n\\(\\displaystyle \\sqrt{y + 3}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#expression-substitution",
    "href": "08_sympy.rjs.html#expression-substitution",
    "title": "SymPy",
    "section": "Expression Substitution",
    "text": "Expression Substitution\n\nPerhaps y is, itself, a distance expressed over a right triangle with sides a and b\n\n\ndist.subs(y,a*a+b*b)\n\n\\(\\displaystyle \\sqrt{a^{2} + b^{2} + x}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#strings",
    "href": "08_sympy.rjs.html#strings",
    "title": "SymPy",
    "section": "Strings",
    "text": "Strings\n\nSometimes we want to take a Python expression and convert to a symbolic SymPy expression.\n\n\nstr_expr = \"x**2 + 3*x - 1/2\"\nfrom sympy import sympify\nexpr = sympify(str_expr)\nexpr\n\n\\(\\displaystyle x^{2} + 3 x - \\frac{1}{2}\\)\n\n\n\nThen calculate with .subs()\n\n\nexpr.subs(x, 2)\n\n\\(\\displaystyle \\frac{19}{2}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#functions",
    "href": "08_sympy.rjs.html#functions",
    "title": "SymPy",
    "section": "Functions",
    "text": "Functions\n\nSibling of vectorize\nTakes a SymPy expression, makes a Python function.\n\n\nexpr # so we remember.\n\n\\(\\displaystyle x^{2} + 3 x - \\frac{1}{2}\\)\n\n\n\nCalculate…\n\n\nf = sympy.lambdify(x, expr, \"scipy\")\nf(np.arange(10))\n\narray([ -0.5,   3.5,   9.5,  17.5,  27.5,  39.5,  53.5,  69.5,  87.5,\n       107.5])"
  },
  {
    "objectID": "08_sympy.rjs.html#aside-scipynumpy",
    "href": "08_sympy.rjs.html#aside-scipynumpy",
    "title": "SymPy",
    "section": "Aside: SciPy/NumPy",
    "text": "Aside: SciPy/NumPy\n\nAlways use lambdify specified with \"scipy\" (or \"numpy\") if you have SciPy or even just NumPy installed\nIt uses NumPy’s more powerful (than Python’s) mathematical operations."
  },
  {
    "objectID": "08_sympy.rjs.html#aside-plots",
    "href": "08_sympy.rjs.html#aside-plots",
    "title": "SymPy",
    "section": "Aside: Plots",
    "text": "Aside: Plots\n\n# import sympy\n# from sympy.abc import x\n# import scipy\nimport matplotlib.pyplot as plt\nf = sympy.lambdify(x,x*x,\"scipy\")\nxs = np.linspace(-5,5) \nplt.plot(xs, f(xs))"
  },
  {
    "objectID": "08_sympy.rjs.html#simplification",
    "href": "08_sympy.rjs.html#simplification",
    "title": "SymPy",
    "section": "Simplification",
    "text": "Simplification\n\nIf I use SymPy, I don’t have to remember this:\n\n\nsympy.simplify(sympy.sin(x)**2 + sympy.cos(x)**2)\n\n\\(\\displaystyle 1\\)\n\n\n\nOr figure out this:\n\n\nsympy.simplify((x**3 + x**2 - x - 1)/(x**2 + 2*x + 1))\n\n\\(\\displaystyle x - 1\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#polynomials",
    "href": "08_sympy.rjs.html#polynomials",
    "title": "SymPy",
    "section": "Polynomials",
    "text": "Polynomials\n\nOften we don’t want a simplified polynomial.\n\n\nsympy.simplify(x**2 + 2*x + 1)\n\n\\(\\displaystyle x^{2} + 2 x + 1\\)\n\n\n\nWe perhaps instead wish to factor()\n\n\nsympy.factor(x**2 + 2*x + 1)\n\n\\(\\displaystyle \\left(x + 1\\right)^{2}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#expand",
    "href": "08_sympy.rjs.html#expand",
    "title": "SymPy",
    "section": "Expand",
    "text": "Expand\n\nWe may also start with factored form.\n\n\neq = x**2 - (x+1) * (x-1)\n\n\nThis can deceptively by made smaller by expanding it.\n\n\nsympy.expand(eq)\n\n\\(\\displaystyle 1\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#fractions-1",
    "href": "08_sympy.rjs.html#fractions-1",
    "title": "SymPy",
    "section": "Fractions",
    "text": "Fractions\n\nWe can also cancel out fractions.\n\n\neq = (x**2 + 2*x + 1)/(x**2 + x)\neq\n\n\\(\\displaystyle \\frac{x^{2} + 2 x + 1}{x^{2} + x}\\)\n\n\n\nUsing sympy.factor()\n\n\nsympy.factor(eq)\n\n\\(\\displaystyle \\frac{x + 1}{x}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#powers",
    "href": "08_sympy.rjs.html#powers",
    "title": "SymPy",
    "section": "Powers",
    "text": "Powers\n\nSymPy can also perform some simplifications related to exponention.\nMovie size in memory is frame size time frame rate times duration.\n\n\neq = x**10*x**9*x**5*x*9 # Avatar in HD is ~4 hrs long at ~60fps\neq\n\n\\(\\displaystyle 9 x^{25}\\)\n\n\n\nOr just sub in 2\n\n\neq.subs(x,2)\n\n\\(\\displaystyle 301989888\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#derivatives",
    "href": "08_sympy.rjs.html#derivatives",
    "title": "SymPy",
    "section": "Derivatives",
    "text": "Derivatives\n\nWe can calculate derivatives.\n\n\nsympy.diff(x*x, x)\n\n\\(\\displaystyle 2 x\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#integrals",
    "href": "08_sympy.rjs.html#integrals",
    "title": "SymPy",
    "section": "Integrals",
    "text": "Integrals\n\nsympy.integrate(sympy.sin(x), x)\n\n\\(\\displaystyle - \\cos{\\left(x \\right)}\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#solve-integrals",
    "href": "08_sympy.rjs.html#solve-integrals",
    "title": "SymPy",
    "section": "Solve Integrals",
    "text": "Solve Integrals\n\nGive a variable a domain…\n\n\nintegral = sympy.Integral(sympy.exp(x), (x, 0, 1))\nintegral\n\n\\(\\displaystyle \\int\\limits_{0}^{1} e^{x}\\, dx\\)\n\n\n\nAnd evaluate.\n\n\nintegral.evalf()\n\n\\(\\displaystyle 1.71828182845905\\)"
  },
  {
    "objectID": "08_sympy.rjs.html#compute-limits",
    "href": "08_sympy.rjs.html#compute-limits",
    "title": "SymPy",
    "section": "Compute Limits",
    "text": "Compute Limits\n\nOne famous problem is to compute the value of the following function as it approaches zero: \\[\n\\lim{x\\to 0} \\frac{\\sin{x}}{x}\n\\]"
  },
  {
    "objectID": "08_sympy.rjs.html#solve-equations",
    "href": "08_sympy.rjs.html#solve-equations",
    "title": "SymPy",
    "section": "Solve Equations",
    "text": "Solve Equations\n\nThe Python package SymPy can symbolically solve equations, differential equations, linear equations, nonlinear equations, matrix problems, inequalities, Diophantine equations, and evaluate integrals. SymPy can also solve numerically."
  },
  {
    "objectID": "08_sympy.rjs.html#algebra",
    "href": "08_sympy.rjs.html#algebra",
    "title": "SymPy",
    "section": "Algebra",
    "text": "Algebra\n\nWe use the much nicer way to get variable names.\n\n\nfrom sympy.abc import x, y\n\n\nWe will aim to solve the following: \\[\nx^2 = y\n\\]"
  },
  {
    "objectID": "08_sympy.rjs.html#write-in-sympy",
    "href": "08_sympy.rjs.html#write-in-sympy",
    "title": "SymPy",
    "section": "Write in SymPy",
    "text": "Write in SymPy\n\nSymPy, like many algebra systems, expects equations to be expressed as equal to zero.\nWe note the following equivalence. \\[\nx^2 = y \\equiv x^2 - y = 0\n\\]\nSo we write:\n\n\neq = x*x - y"
  },
  {
    "objectID": "08_sympy.rjs.html#solve",
    "href": "08_sympy.rjs.html#solve",
    "title": "SymPy",
    "section": "Solve",
    "text": "Solve\n\nTo solve, we simply use sympy.solve()\n\nWe specify the equation to solve, and\nThe variable for which to solve.\n\n\n\nsympy.solve(eq, x)\n\n[-sqrt(y), sqrt(y)]\n\n\n\nWe could also do:\n\n\nsympy.solve(eq, y)\n\n[x**2]"
  },
  {
    "objectID": "08_sympy.html",
    "href": "08_sympy.html",
    "title": "SymPy",
    "section": "",
    "text": "A Python library for symbolic mathematics. It aims to become a full-featured computer algebra system (CAS) while keeping the code as simple as possible in order to be comprehensible and easily extensible. SymPy is written entirely in Python.\n\n\nSymbolic Python\n\n\n\n\n“SymPy is free both as in speech and as in beer.”\n“Most computer algebra systems invent their own language. Not SymPy.”\n“An advantage of SymPy is that it is lightweight.”\n\n\n\n\n\nTo my knowledge, there’s no real competitors with SymPy.\nThe closest are probably SageMath and Mathematica.\nI use browser-based Mathematica via https://www.wolframalpha.com/ from time to time (when I don’t have a Python installation handy).\n\n\n\n\n@article{10.7717/peerj-cs.103,\n     title = {SymPy: symbolic computing in Python},\n     author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \\v{C}ert\\'{i}k, Ond\\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\\v{c}ka, \\v{S}t\\v{e}p\\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},\n     year = 2017,\n     month = jan,\n     keywords = {Python, Computer algebra system, Symbolics},\n     abstract = {\n                SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.\n             },\n     volume = 3,\n     pages = {e103},\n     journal = {PeerJ Computer Science},\n     issn = {2376-5992},\n     url = {https://doi.org/10.7717/peerj-cs.103},\n     doi = {10.7717/peerj-cs.103}\n    }\n\n\n\n\nJust like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install sympy\n\nThat might take a moment, when it does we can check it worked!",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#why-sympy",
    "href": "08_sympy.html#why-sympy",
    "title": "SymPy",
    "section": "",
    "text": "“SymPy is free both as in speech and as in beer.”\n“Most computer algebra systems invent their own language. Not SymPy.”\n“An advantage of SymPy is that it is lightweight.”",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#why-not-sympy",
    "href": "08_sympy.html#why-not-sympy",
    "title": "SymPy",
    "section": "",
    "text": "To my knowledge, there’s no real competitors with SymPy.\nThe closest are probably SageMath and Mathematica.\nI use browser-based Mathematica via https://www.wolframalpha.com/ from time to time (when I don’t have a Python installation handy).",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#cite",
    "href": "08_sympy.html#cite",
    "title": "SymPy",
    "section": "",
    "text": "@article{10.7717/peerj-cs.103,\n     title = {SymPy: symbolic computing in Python},\n     author = {Meurer, Aaron and Smith, Christopher P. and Paprocki, Mateusz and \\v{C}ert\\'{i}k, Ond\\v{r}ej and Kirpichev, Sergey B. and Rocklin, Matthew and Kumar, AMiT and Ivanov, Sergiu and Moore, Jason K. and Singh, Sartaj and Rathnayake, Thilina and Vig, Sean and Granger, Brian E. and Muller, Richard P. and Bonazzi, Francesco and Gupta, Harsh and Vats, Shivam and Johansson, Fredrik and Pedregosa, Fabian and Curry, Matthew J. and Terrel, Andy R. and Rou\\v{c}ka, \\v{S}t\\v{e}p\\'{a}n and Saboo, Ashutosh and Fernando, Isuru and Kulal, Sumith and Cimrman, Robert and Scopatz, Anthony},\n     year = 2017,\n     month = jan,\n     keywords = {Python, Computer algebra system, Symbolics},\n     abstract = {\n                SymPy is an open source computer algebra system written in pure Python. It is built with a focus on extensibility and ease of use, through both interactive and programmatic applications. These characteristics have led SymPy to become a popular symbolic library for the scientific Python ecosystem. This paper presents the architecture of SymPy, a description of its features, and a discussion of select submodules. The supplementary material provide additional examples and further outline details of the architecture and features of SymPy.\n             },\n     volume = 3,\n     pages = {e103},\n     journal = {PeerJ Computer Science},\n     issn = {2376-5992},\n     url = {https://doi.org/10.7717/peerj-cs.103},\n     doi = {10.7717/peerj-cs.103}\n    }",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pip-again",
    "href": "08_sympy.html#pip-again",
    "title": "SymPy",
    "section": "",
    "text": "Just like NumPy, Matplotlib is a Python package which we install via pip\n\npython3 -m pip install sympy\n\nThat might take a moment, when it does we can check it worked!",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#example",
    "href": "08_sympy.html#example",
    "title": "SymPy",
    "section": "Example",
    "text": "Example\n\nComputers don’t hold numbers that precisely.\n\n\n10.0 ** 100 == 10.0 ** 100 + 47\n\nTrue",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#fractions",
    "href": "08_sympy.html#fractions",
    "title": "SymPy",
    "section": "Fractions",
    "text": "Fractions\n\nMuch worse with fractions I find.\n\n\n1 / 7000000 * 7000000\n\n0.9999999999999999",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#floats",
    "href": "08_sympy.html#floats",
    "title": "SymPy",
    "section": "Floats:",
    "text": "Floats:\n\nThe IEEE 754 Floating-Point Standard\n\n\n\nIt is basically scientific notation that fits in a fixed amount of characters.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#what-is-it",
    "href": "08_sympy.html#what-is-it",
    "title": "SymPy",
    "section": "What is it?",
    "text": "What is it?\n\nThe IEEE 754 standard defines formats for representing floating-point numbers.\nIt specifies how floating-point numbers are stored and operated on in computer hardware.\nMost modern CPUs adhere to this standard.\n\n\nimport sys\n# Check the floating-point precision on your system\nsys.float_info\n\nsys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#why-is-it-important",
    "href": "08_sympy.html#why-is-it-important",
    "title": "SymPy",
    "section": "Why is it important?",
    "text": "Why is it important?\n\nEnsures portability and consistency of numerical computations across different systems.\nWithout a standard, the same calculation could yield different results on different machines.\nEssential for reliable scientific and engineering software.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#single-precision-float32",
    "href": "08_sympy.html#single-precision-float32",
    "title": "SymPy",
    "section": "Single Precision (Float32)",
    "text": "Single Precision (Float32)\n\nUses 32 bits to represent a number.\n1 sign bit, 8 exponent bits, 23 significand (mantissa) bits.\nOffers approximately 7 decimal digits of precision.\n\n\nimport numpy as np\nnp.float32(1/7)\n\nnp.float32(0.14285715)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#double-precision-float64",
    "href": "08_sympy.html#double-precision-float64",
    "title": "SymPy",
    "section": "Double Precision (Float64)",
    "text": "Double Precision (Float64)\n\nUses 64 bits to represent a number.\n1 sign bit, 11 exponent bits, 52 significand bits.\nOffers approximately 15-17 decimal digits of precision. This is the default in Python and NumPy.\n\n\n# Example of a float64 number (default in Python)\n1/7\n\n0.14285714285714285",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#special-values",
    "href": "08_sympy.html#special-values",
    "title": "SymPy",
    "section": "Special Values",
    "text": "Special Values\n\nInfinity \\(\\infty\\): Result of overflow or division by zero.\n\n\nlil = np.finfo(np.float64).resolution # smallest recognizable value\nbig = np.finfo(np.float64).max # biggest recognizable value\nbig / lil\n\nnp.float64(inf)\n\n\n\nNot a Number (NaN): Result of undefined operations (e.g., \\(0/0\\), \\(\\sqrt{-1}\\)).\n\n\nnp.sqrt(-1)\n\nnp.float64(nan)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pitfall-1-limited-precision",
    "href": "08_sympy.html#pitfall-1-limited-precision",
    "title": "SymPy",
    "section": "Pitfall 1: Limited Precision",
    "text": "Pitfall 1: Limited Precision\n\nNot all real numbers can be represented exactly.\nDecimal numbers like 0.1 often have an infinitely repeating binary representation.\nThis leads to small, unavoidable rounding errors.\n\n\n.1 + .2\n\n0.30000000000000004",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pitfall-2-accumulation",
    "href": "08_sympy.html#pitfall-2-accumulation",
    "title": "SymPy",
    "section": "Pitfall 2: Accumulation",
    "text": "Pitfall 2: Accumulation\n\nSmall rounding errors can accumulate over many operations.\nThis can lead to significant inaccuracies in long computations or iterative algorithms.\nCareful algorithm design and error analysis are crucial.\n\n\ntotal = 0.0\nfor _ in range(100000):\n    total += 0.1\ntotal, 100000 * 0.1\n\n(10000.000000018848, 10000.0)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pitfall-3-comparison-issues",
    "href": "08_sympy.html#pitfall-3-comparison-issues",
    "title": "SymPy",
    "section": "Pitfall 3: Comparison Issues",
    "text": "Pitfall 3: Comparison Issues\n\nDue to limited precision, direct equality comparisons (==) between floating-point numbers are often unreliable.\n\n\n(1 + 2) / 10\n\n0.3\n\n\n\n1 / 10 + 2 / 10\n\n0.30000000000000004",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pitfall-4-subtractive-cancellation",
    "href": "08_sympy.html#pitfall-4-subtractive-cancellation",
    "title": "SymPy",
    "section": "Pitfall 4: Subtractive Cancellation",
    "text": "Pitfall 4: Subtractive Cancellation\n\nOccurs when subtracting two nearly equal numbers.\nThe most significant bits cancel out, leaving only the less significant bits.\nCan drastically reduce the effective precision.\n\n\nx = 1.0000000000000001\ny = 1.0000000000000000\nx - y\n\n0.0",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#credit",
    "href": "08_sympy.html#credit",
    "title": "SymPy",
    "section": "Credit",
    "text": "Credit\n\nThe SymPy tutorial.\nSymPy solves the floating point problem.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#quoth-sympy",
    "href": "08_sympy.html#quoth-sympy",
    "title": "SymPy",
    "section": "Quoth SymPy",
    "text": "Quoth SymPy\n\nSymbolic computation deals with the computation of mathematical objects symbolically. This means that the mathematical objects are represented exactly, not approximately, and mathematical expressions with unevaluated variables are left in symbolic form.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#non-symbolic-computation",
    "href": "08_sympy.html#non-symbolic-computation",
    "title": "SymPy",
    "section": "Non-symbolic Computation",
    "text": "Non-symbolic Computation\n\nA common problem in computing is to compute the likes of distance between points separated by vectors.\nImagine two objects are separated by a horizontal displacement of 3 units, and vertical displacement of 4 units, and we wish to determine the minimum distance.\nA straightforward application of the Pythagorean Theorem.\n\n\nnp.sqrt(3 * 3 + 4 * 4)\n\nnp.float64(5.0)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#pitfalls",
    "href": "08_sympy.html#pitfalls",
    "title": "SymPy",
    "section": "Pitfalls",
    "text": "Pitfalls\n\nThese distances quickly become inaccurate.\n\n\nnp.sqrt(2 * 2 + 4 * 4)\n\nnp.float64(4.47213595499958)\n\n\n\nThen stuff like this happens:",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#symbolic-computation-1",
    "href": "08_sympy.html#symbolic-computation-1",
    "title": "SymPy",
    "section": "Symbolic Computation",
    "text": "Symbolic Computation\n\nIn point of fact, the solution to \\(\\sqrt{2^2 + 4*2}\\) is actually \\(\\sqrt{20}\\) and there’s no other graceful way to represent it.\nSo we’ll use symbols to store values.\n\n\nimport sympy\nx = sympy.symbols('x')\ny = sympy.symbols('y')\ndist = sympy.sqrt(x + y)\ndist\n\n\\(\\displaystyle \\sqrt{x + y}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#expressions",
    "href": "08_sympy.html#expressions",
    "title": "SymPy",
    "section": "Expressions",
    "text": "Expressions\n\nWe term this a “symbolic expression”.\nWe can perform operations…\n\n\n2 * dist\n\n\\(\\displaystyle 2 \\sqrt{x + y}\\)\n\n\n\nWe can add other symbols…\n\n\nz = sympy.symbols('z')\nz + dist\n\n\\(\\displaystyle z + \\sqrt{x + y}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#niceties",
    "href": "08_sympy.html#niceties",
    "title": "SymPy",
    "section": "Niceties",
    "text": "Niceties\n\nWe can declare multiple symbols at once:\n\n\na, b, c = sympy.symbols('a b c')\n\n\nSymPy will automatically simplify.\n\n\nsympy.sqrt(20)\n\n\\(\\displaystyle 2 \\sqrt{5}\\)\n\n\n\nCompare:\n\n\nnp.sqrt(20), np.sqrt(5), 2 * np.sqrt(5)\n\n(np.float64(4.47213595499958),\n np.float64(2.23606797749979),\n np.float64(4.47213595499958))",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#extended-floats",
    "href": "08_sympy.html#extended-floats",
    "title": "SymPy",
    "section": "Extended Floats",
    "text": "Extended Floats\n\nSymPy uses floats by default, but doesn’t have to.\nYou can specify a number of decimals for any value.\nWe also should that SymPy contains some useful constants!\n\n\n# \"Evaluate as float to 100 digits\"\n# We use sympy.py, not e.g. np.pi\nsympy.pi.evalf(100)\n\n\\(\\displaystyle 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117068\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#substitution",
    "href": "08_sympy.html#substitution",
    "title": "SymPy",
    "section": "Substitution",
    "text": "Substitution\n\nOften we want to solve an equation algebraically and also know a numerical solution.\nThe usefulness of SymPy is to do both, and maximally simply the result to minimize error.\nWe can use subs() to get solutions given values.\n\n\ndist\n\n\\(\\displaystyle \\sqrt{x + y}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#value-substitution",
    "href": "08_sympy.html#value-substitution",
    "title": "SymPy",
    "section": "Value Substitution",
    "text": "Value Substitution\n\nSubstitute 3 for x\n\n\ndist.subs(x, 3)\n\n\\(\\displaystyle \\sqrt{y + 3}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#expression-substitution",
    "href": "08_sympy.html#expression-substitution",
    "title": "SymPy",
    "section": "Expression Substitution",
    "text": "Expression Substitution\n\nPerhaps y is, itself, a distance expressed over a right triangle with sides a and b\n\n\ndist.subs(y,a*a+b*b)\n\n\\(\\displaystyle \\sqrt{a^{2} + b^{2} + x}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#strings",
    "href": "08_sympy.html#strings",
    "title": "SymPy",
    "section": "Strings",
    "text": "Strings\n\nSometimes we want to take a Python expression and convert to a symbolic SymPy expression.\n\n\nstr_expr = \"x**2 + 3*x - 1/2\"\nfrom sympy import sympify\nexpr = sympify(str_expr)\nexpr\n\n\\(\\displaystyle x^{2} + 3 x - \\frac{1}{2}\\)\n\n\n\nThen calculate with .subs()\n\n\nexpr.subs(x, 2)\n\n\\(\\displaystyle \\frac{19}{2}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#functions",
    "href": "08_sympy.html#functions",
    "title": "SymPy",
    "section": "Functions",
    "text": "Functions\n\nSibling of vectorize\nTakes a SymPy expression, makes a Python function.\n\n\nexpr # so we remember.\n\n\\(\\displaystyle x^{2} + 3 x - \\frac{1}{2}\\)\n\n\n\nCalculate…\n\n\nf = sympy.lambdify(x, expr, \"scipy\")\nf(np.arange(10))\n\narray([ -0.5,   3.5,   9.5,  17.5,  27.5,  39.5,  53.5,  69.5,  87.5,\n       107.5])",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#aside-scipynumpy",
    "href": "08_sympy.html#aside-scipynumpy",
    "title": "SymPy",
    "section": "Aside: SciPy/NumPy",
    "text": "Aside: SciPy/NumPy\n\nAlways use lambdify specified with \"scipy\" (or \"numpy\") if you have SciPy or even just NumPy installed\nIt uses NumPy’s more powerful (than Python’s) mathematical operations.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#aside-plots",
    "href": "08_sympy.html#aside-plots",
    "title": "SymPy",
    "section": "Aside: Plots",
    "text": "Aside: Plots\n\n# import sympy\n# from sympy.abc import x\n# import scipy\nimport matplotlib.pyplot as plt\nf = sympy.lambdify(x,x*x,\"scipy\")\nxs = np.linspace(-5,5) \nplt.plot(xs, f(xs))",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#simplification",
    "href": "08_sympy.html#simplification",
    "title": "SymPy",
    "section": "Simplification",
    "text": "Simplification\n\nIf I use SymPy, I don’t have to remember this:\n\n\nsympy.simplify(sympy.sin(x)**2 + sympy.cos(x)**2)\n\n\\(\\displaystyle 1\\)\n\n\n\nOr figure out this:\n\n\nsympy.simplify((x**3 + x**2 - x - 1)/(x**2 + 2*x + 1))\n\n\\(\\displaystyle x - 1\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#polynomials",
    "href": "08_sympy.html#polynomials",
    "title": "SymPy",
    "section": "Polynomials",
    "text": "Polynomials\n\nOften we don’t want a simplified polynomial.\n\n\nsympy.simplify(x**2 + 2*x + 1)\n\n\\(\\displaystyle x^{2} + 2 x + 1\\)\n\n\n\nWe perhaps instead wish to factor()\n\n\nsympy.factor(x**2 + 2*x + 1)\n\n\\(\\displaystyle \\left(x + 1\\right)^{2}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#expand",
    "href": "08_sympy.html#expand",
    "title": "SymPy",
    "section": "Expand",
    "text": "Expand\n\nWe may also start with factored form.\n\n\neq = x**2 - (x+1) * (x-1)\n\n\nThis can deceptively by made smaller by expanding it.\n\n\nsympy.expand(eq)\n\n\\(\\displaystyle 1\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#fractions-1",
    "href": "08_sympy.html#fractions-1",
    "title": "SymPy",
    "section": "Fractions",
    "text": "Fractions\n\nWe can also cancel out fractions.\n\n\neq = (x**2 + 2*x + 1)/(x**2 + x)\neq\n\n\\(\\displaystyle \\frac{x^{2} + 2 x + 1}{x^{2} + x}\\)\n\n\n\nUsing sympy.factor()\n\n\nsympy.factor(eq)\n\n\\(\\displaystyle \\frac{x + 1}{x}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#powers",
    "href": "08_sympy.html#powers",
    "title": "SymPy",
    "section": "Powers",
    "text": "Powers\n\nSymPy can also perform some simplifications related to exponention.\nMovie size in memory is frame size time frame rate times duration.\n\n\neq = x**10*x**9*x**5*x*9 # Avatar in HD is ~4 hrs long at ~60fps\neq\n\n\\(\\displaystyle 9 x^{25}\\)\n\n\n\nOr just sub in 2\n\n\neq.subs(x,2)\n\n\\(\\displaystyle 301989888\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#derivatives",
    "href": "08_sympy.html#derivatives",
    "title": "SymPy",
    "section": "Derivatives",
    "text": "Derivatives\n\nWe can calculate derivatives.\n\n\nsympy.diff(x*x, x)\n\n\\(\\displaystyle 2 x\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#integrals",
    "href": "08_sympy.html#integrals",
    "title": "SymPy",
    "section": "Integrals",
    "text": "Integrals\n\nsympy.integrate(sympy.sin(x), x)\n\n\\(\\displaystyle - \\cos{\\left(x \\right)}\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#solve-integrals",
    "href": "08_sympy.html#solve-integrals",
    "title": "SymPy",
    "section": "Solve Integrals",
    "text": "Solve Integrals\n\nGive a variable a domain…\n\n\nintegral = sympy.Integral(sympy.exp(x), (x, 0, 1))\nintegral\n\n\\(\\displaystyle \\int\\limits_{0}^{1} e^{x}\\, dx\\)\n\n\n\nAnd evaluate.\n\n\nintegral.evalf()\n\n\\(\\displaystyle 1.71828182845905\\)",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#compute-limits",
    "href": "08_sympy.html#compute-limits",
    "title": "SymPy",
    "section": "Compute Limits",
    "text": "Compute Limits\n\nOne famous problem is to compute the value of the following function as it approaches zero: \\[\n\\lim{x\\to 0} \\frac{\\sin{x}}{x}\n\\]",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#solve-equations",
    "href": "08_sympy.html#solve-equations",
    "title": "SymPy",
    "section": "Solve Equations",
    "text": "Solve Equations\n\nThe Python package SymPy can symbolically solve equations, differential equations, linear equations, nonlinear equations, matrix problems, inequalities, Diophantine equations, and evaluate integrals. SymPy can also solve numerically.",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#algebra",
    "href": "08_sympy.html#algebra",
    "title": "SymPy",
    "section": "Algebra",
    "text": "Algebra\n\nWe use the much nicer way to get variable names.\n\n\nfrom sympy.abc import x, y\n\n\nWe will aim to solve the following: \\[\nx^2 = y\n\\]",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#write-in-sympy",
    "href": "08_sympy.html#write-in-sympy",
    "title": "SymPy",
    "section": "Write in SymPy",
    "text": "Write in SymPy\n\nSymPy, like many algebra systems, expects equations to be expressed as equal to zero.\nWe note the following equivalence. \\[\nx^2 = y \\equiv x^2 - y = 0\n\\]\nSo we write:\n\n\neq = x*x - y",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "08_sympy.html#solve",
    "href": "08_sympy.html#solve",
    "title": "SymPy",
    "section": "Solve",
    "text": "Solve\n\nTo solve, we simply use sympy.solve()\n\nWe specify the equation to solve, and\nThe variable for which to solve.\n\n\n\nsympy.solve(eq, x)\n\n[-sqrt(y), sqrt(y)]\n\n\n\nWe could also do:\n\n\nsympy.solve(eq, y)\n\n[x**2]",
    "crumbs": [
      "SymPy"
    ]
  },
  {
    "objectID": "A1_keybinds.rjs.html#python",
    "href": "A1_keybinds.rjs.html#python",
    "title": "Scientific Computing",
    "section": "Python",
    "text": "Python\n\nPython can be used within the Python prompt, prefixed with &gt;&gt;&gt;, or via .py files.\nPython is used to conduct computations.\nVersus a calculator, it supports arithmetic, comparisons, code reuse, and repeated actions."
  },
  {
    "objectID": "A1_keybinds.rjs.html#section",
    "href": "A1_keybinds.rjs.html#section",
    "title": "Scientific Computing",
    "section": "",
    "text": "\\[\nf(x) =\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\]\n\n\ndef f(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x"
  },
  {
    "objectID": "A1_keybinds.rjs.html#section-1",
    "href": "A1_keybinds.rjs.html#section-1",
    "title": "Scientific Computing",
    "section": "",
    "text": "Find \\(f(x)\\) for each of the following \\(x\\) values: \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\n\nresult = []\nfor x in [-1, 4, 5, 8, 11]:\n    result = result + [f(x)]\nresult\n\n[14, 9, 9, 9, -9]"
  },
  {
    "objectID": "A1_keybinds.rjs.html#neovim",
    "href": "A1_keybinds.rjs.html#neovim",
    "title": "Scientific Computing",
    "section": "Neovim",
    "text": "Neovim\n\nUse nvim to access a modal text editor.\nIn i or insert mode, is like other editors.\nOutside i there’s “motions”, “operators”, “commands”\n\n“Motions” move the cursor - where you would type in i mode\n“Operators” manipulate text - add, delete, yank (copy), paste\n“Commands” load and save files and exit Neovim."
  },
  {
    "objectID": "A1_keybinds.rjs.html#section-2",
    "href": "A1_keybinds.rjs.html#section-2",
    "title": "Scientific Computing",
    "section": "",
    "text": "Motion\nMovement\n\n\n\n\nh\nleft one character\n\n\nj\ndown one line\n\n\nk\nup one line\n\n\nl\nright one character\n\n\n0\nbeginning of line\n\n\n$\nend of line\n\n\n/search_term\ngo to next occurance of “search_term”\n\n\ne\nend of word\n\n\nb\nbeginning of word"
  },
  {
    "objectID": "A1_keybinds.rjs.html#section-3",
    "href": "A1_keybinds.rjs.html#section-3",
    "title": "Scientific Computing",
    "section": "",
    "text": "Operator\nAction\n\n\n\n\ni\ninsert text\n\n\nr\nreplace character\n\n\nd\ndelete text, combined with a motion\n\n\ny\nyank text, combined with a motion\n\n\np\npaste yanked text\n\n\n\n\n\n\n\n\n\nCommand\nAction\n\n\n\n\n:saveas file.txt\nsave text as “file.txt”\n\n\n:w\nsave file\n\n\n:x\nsave and exit\n\n\n:q!\nexit without saving\n\n\n\n\nBash\n\nBash commands are used folder-relative.\nBash is used within a terminal and is the default terminal environment.\nTo get bash running:\n\nWindows: Check Appendix - Git Bash\nMacOS: Spotlight menu -&gt; “Terminal” (zsh, but close enough)\n\nMostly used to navigate the file system, organize files, launch programs like Python and Neovim\n\n\n\n\n\n\nCommand\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt"
  },
  {
    "objectID": "A1_keybinds.rjs.html#bash",
    "href": "A1_keybinds.rjs.html#bash",
    "title": "Scientific Computing",
    "section": "Bash",
    "text": "Bash\n\nBash commands are used folder-relative.\nBash is used within a terminal and is the default terminal environment.\nTo get bash running:\n\nWindows: Check Appendix - Git Bash\nMacOS: Spotlight menu -&gt; “Terminal” (zsh, but close enough)\n\nMostly used to navigate the file system, organize files, launch programs like Python and Neovim"
  },
  {
    "objectID": "A1_keybinds.rjs.html#section-4",
    "href": "A1_keybinds.rjs.html#section-4",
    "title": "Scientific Computing",
    "section": "",
    "text": "Command\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt"
  },
  {
    "objectID": "A1_keybinds.html#python",
    "href": "A1_keybinds.html#python",
    "title": "",
    "section": "Python",
    "text": "Python\n\nPython can be used within the Python prompt, prefixed with &gt;&gt;&gt;, or via .py files.\nPython is used to conduct computations.\nVersus a calculator, it supports arithmetic, comparisons, code reuse, and repeated actions.",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#section",
    "href": "A1_keybinds.html#section",
    "title": "",
    "section": "",
    "text": "\\[\nf(x) =\n\\begin{cases}\n  9x^2 + 5 & x &lt; 4 \\\\\n  9 & 4 \\leq x \\leq 8 \\\\\n  2 - x & x &gt; 8\n\\end{cases}\n\\]\n\n\ndef f(x):\n    if (x &lt; 4):\n        return 9 * x ** 2 + 5\n    elif (4 &lt;= x &lt;= 8):\n        return 9\n    elif (x &gt; 8):\n        return 2 - x",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#section-1",
    "href": "A1_keybinds.html#section-1",
    "title": "",
    "section": "",
    "text": "Find \\(f(x)\\) for each of the following \\(x\\) values: \\[\n\\{-1, 4, 5, 8, 11\\}\n\\]\n\n\n\nresult = []\nfor x in [-1, 4, 5, 8, 11]:\n    result = result + [f(x)]\nresult\n\n[14, 9, 9, 9, -9]",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#neovim",
    "href": "A1_keybinds.html#neovim",
    "title": "",
    "section": "Neovim",
    "text": "Neovim\n\nUse nvim to access a modal text editor.\nIn i or insert mode, is like other editors.\nOutside i there’s “motions”, “operators”, “commands”\n\n“Motions” move the cursor - where you would type in i mode\n“Operators” manipulate text - add, delete, yank (copy), paste\n“Commands” load and save files and exit Neovim.",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#section-2",
    "href": "A1_keybinds.html#section-2",
    "title": "",
    "section": "",
    "text": "Motion\nMovement\n\n\n\n\nh\nleft one character\n\n\nj\ndown one line\n\n\nk\nup one line\n\n\nl\nright one character\n\n\n0\nbeginning of line\n\n\n$\nend of line\n\n\n/search_term\ngo to next occurance of “search_term”\n\n\ne\nend of word\n\n\nb\nbeginning of word",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#section-3",
    "href": "A1_keybinds.html#section-3",
    "title": "",
    "section": "",
    "text": "Operator\nAction\n\n\n\n\ni\ninsert text\n\n\nr\nreplace character\n\n\nd\ndelete text, combined with a motion\n\n\ny\nyank text, combined with a motion\n\n\np\npaste yanked text\n\n\n\n\n\n\n\n\n\nCommand\nAction\n\n\n\n\n:saveas file.txt\nsave text as “file.txt”\n\n\n:w\nsave file\n\n\n:x\nsave and exit\n\n\n:q!\nexit without saving\n\n\n\n\nBash\n\nBash commands are used folder-relative.\nBash is used within a terminal and is the default terminal environment.\nTo get bash running:\n\nWindows: Check Appendix - Git Bash\nMacOS: Spotlight menu -&gt; “Terminal” (zsh, but close enough)\n\nMostly used to navigate the file system, organize files, launch programs like Python and Neovim\n\n\n\n\n\n\nCommand\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#bash",
    "href": "A1_keybinds.html#bash",
    "title": "",
    "section": "Bash",
    "text": "Bash\n\nBash commands are used folder-relative.\nBash is used within a terminal and is the default terminal environment.\nTo get bash running:\n\nWindows: Check Appendix - Git Bash\nMacOS: Spotlight menu -&gt; “Terminal” (zsh, but close enough)\n\nMostly used to navigate the file system, organize files, launch programs like Python and Neovim",
    "crumbs": [
      "Appendix - Commands"
    ]
  },
  {
    "objectID": "A1_keybinds.html#section-4",
    "href": "A1_keybinds.html#section-4",
    "title": "",
    "section": "",
    "text": "Command\nAction\n\n\n\n\nls\nlist files in folder\n\n\nrm f.txt\ndelete file “f.txt”\n\n\nmkdir dir\ncreate a new folder named “dir”\n\n\nmv f.txt dir\nmove file “f.txt” to folder “dir”\n\n\npwd\nprint current folder\n\n\ncd dir\nchange current folder to “dir”\n\n\ncd ..\ngo to “parent” folder\n\n\necho hi\nprint the text “hi”\n\n\necho hi &gt;f.txt\nwrite “hi” to file “f.txt”\n\n\ncat f.txt\nsee the text in f.txt",
    "crumbs": [
      "Appendix - Commands"
    ]
  }
]