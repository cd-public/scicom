{
  "hash": "d5e79f6fa3a88818aa1cdde8c43117e6",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Neovim\n---\n\n\n\n\n\n\n# Why Neovim?\n\n## On Neovim\n\n* Neovim is free,\n* Neovim is very widely available,\n* Neovim is highly customizable,\n* Neovim is stable, year-on-year,\n* and Neovim is quite powerful.\n\n[Watch more](https://www.youtube.com/watch?v=dR00OugPlLc&list=PLabWm-zCaD1axcMGvf7wFxJz8FZmyHSJ7&index=14)\n\n## Why not Neovim?\n\n\n- **Modal** - it is not a \"What you see is what you get\" (WYSIWYG) editor like MS Word, Google Docs, Notepad, or VS Code\n- **Terminal-based** - it is used within the terminal and not often as a stand-alone program.\n- **Steep-learning curve** - students generally find it difficult to get started, though it is widely preferred by experienced users\n\n# Running Example\n\n## Diving In\n\n- Taking Neovim as a given, we'll:\n    - Continue the *piecewise functions* example\n    - Touch on Python and the terminal in the context of Neovim\n    - Introduce Neovim *modes*, *motions*, and *operators*.\n- Spoilers for the last exercise!\n\n\n## Exercise\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n- Write function\n- `def single_tax(pay):`\n- *Return* tax cost.\n    - Return not print!\n- Bonus: Also write `single_tax_rate` which returns the percent tax rate at some income level.\n\n:::\n\n::: {.column width=\"50%\"}\n\n| Rate   | From    |\n|--------|--------:|\n| 10%    | 0       |\n| 15%    | 9275    |\n| 25%    | 37650   |\n| 28%    | 91150   |\n| 33%    | 190150  |\n| 35%    | 413350  |\n| 39.6%  | 415050  |\n\n:::\n\n::::\n\n## Solutions\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#4ba47d29 .cell execution_count=2}\n``` {.python .cell-code}\ndef single_tax(pay):\n    tax = 0\n    if pay > 415050:\n        tax += (pay - 415050) * .396\n        pay = 415050\n    if pay > 413350:\n        tax += (pay - 413350) * .35\n        pay = 413350\n    if pay > 190150:\n        tax += (pay - 190150) * .33\n        pay = 190150\n    if pay > 91150:\n        tax += (pay - 91150) * .28\n        pay = 91150\n    if pay > 37650:\n        tax += (pay - 37650) * .25\n        pay = 37650\n    if pay > 9275:\n        tax += (pay - 9275) * .15\n        pay = 9275\n    return tax + pay * .1\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#adb34ed7 .cell execution_count=3}\n``` {.python .cell-code}\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay > bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1\n```\n:::\n\n\n:::\n\n::::\n\n## Tedious to Type\n\n```{.bash code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> def single_tax(pay):\n...     tax_policy = [\n...         [415050, .396],\n...         [413350, .35],\n...         [190150, .33],\n...         [91150, .28],\n...         [37650, .25],\n...         [9275, .15]\n...     ]\n...     tax = 0\n...     for bracket in tax_policy:\n...         if pay > bracket[0]:\n...             tax += (pay - bracket[0]) * bracket[1]\n...             pay = bracket[0]\n...     return tax + pay * .1\n...\n>>> single_tax(400000)\n115529.25\n>>>\n```\n\n## Instead: .py files\n\n- Python has an associated file type, the `.py` file.\n    - Similar to `.png` (portable network graphic) for images\n    - Similar to `.pdf` (portable document format) for papers\n\n## Test-based\n\n- The `.py` file is much like a `.txt` file in that:\n    - It is a small, lightweight file containing only typed characters.\n    - It can be opened, edited, and viewed in many editors.\n- The `.py` file can save typed code to be used within `python`.\n\n## Enter Neovim\n\n- Neovim is a *great* way to edit text.\n\n::: {.callout-tip}\n\n## Give it a shot!\n\nStudents often object to switching from WYSIWYG editors but:\n\n- Many students know *no other way* to write text-based files, and\n- We've ample time this term to properly explore Neovim\n\nBe patient, but also work hard!\n\n:::\n\n# Getting Neovim\n\n## Installation\n\n- We go to the offial webpage to get an installer for our computer:\n    - [https://neovim.io/](https://neovim.io/)\n- Neovim offers a few more installation options than you may be used to.\n- I recommend...\n\n## Install from download\n\nDownloads are available on the [Releases](https://github.com/neovim/neovim/releases) page.\n\n* Latest [stable release](https://github.com/neovim/neovim/releases/latest)\n    * [macOS x86_64](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-x86_64.tar.gz)\n    * [macOS arm64](https://github.com/neovim/neovim/releases/latest/download/nvim-macos-arm64.tar.gz)\n    * [Linux x86_64](https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz)\n    * [Linux arm64](https://github.com/neovim/neovim/releases/latest/download/nvim-linux-arm64.tar.gz)\n    * [Windows](https://github.com/neovim/neovim/releases/latest/download/nvim-win64.msi)\n\n## Terminal\n\n- On MS Windows\n    - I press Windows key, type \"terminal\" then press enter.\n- On MacOS\n    - I open Launchpad, type \"terminal\" then press enter.\n\n## MacOS\n\n![](img/zsh.png)\n\n## Windows\n\n![](img/ps.webp)\n\n## Expression evaluation\n\n- Returning to the terminal, we can type at the \"prompt\".\n- On MacOS, perhaps a line that begins with `$` and a flashing cursor\n- On Window, perhaps `PS C:\\Users\\calvin>`\n    - `PS` stands for \"powershell\" - more latter.\n    - `C:\\Users\\calvin` is the name of a folder - more latter\n    - `>` is the prompt, with a flashing cursor.\n\n## Run Neovim \n\n*In the following examples, I remove line numbers to denote they are not Python code snippets.*\n\n- On MacOS, type `nvim`\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ nvim\n```\n- On Windows, type `nvim`\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> nvim\n```\n- On both, press the **↵ᴇɴᴛᴇʀ** key.\n\n## See Neovim\n\n- You'll see something like this:\n```{.bash code-line-numbers=\"false\"}\n                  NVIM v0.11.1\n\n  Nvim is open source and freely distributable\n           https://neovim.io/#chat\n\n type :help nvim<Enter>               if you are new!\n type :checkhealth<Enter>             to optimize Nvim\n type :q<Enter>                       to exit\n type :help<Enter>                    for help\n\ntype :help news<Enter> to see changes in v0.11\n\n        Help poor children in Uganda!\n type :help iccf<Enter>               for information\n```\n\n# Modes\n\n## Modality\n\n- `nvim` is a *modal* text editor\n- By default, typed characters will not appear in the document.\n- Rather, by default, we being in *command* mode.\n- We won't worry about that too much, but the first command to learn is\n```{.bash code-line-numbers=\"false\"}\ni\n```\n- `i` for insert\n\n## Insert Mode\n\n- By the way, you should see `-- INSERT --` at the bottom of the terminal window.\n- Insert mode is not unlike WYSIWYG\n- Use it prolificly until you are more comfortable.\n- Navigate with arrow keys or (depending on system) mouse\n- For now, let's copy paste in the `piecewise` function.\n\n\n## Piecewise\n\n- For me, basic copy/paste commands like:\n\t- ctrl/cmd+c, ctrl/cmd+v \n\t- rclick->menu->copy\n- Worked amicably in `i` insert mode\n\n```{.python filename=\"pw.py\"}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n```\n\n- For `.py` files I'll include line numbers but add a filename on top.\n\n## Command Mode\n\n- Having written some text, we now need to save it to a file.\n- Press the \"ESC\" (Escape) key to return to command mode\n- Your cursor will move the bottom of the terminal, where `-- INSERT --` was\n\n## Remember!\n\n::: {.callout-note appearance=\"simple\"}\n\n## Remember to press escape!\n\n- In `nvim` examples today, it will not always be easy to make a note of when to press escape!\n- As a rule, use escape before anytime you try to do something (exit, save)\n- These \"do things\" usually are `:` prefixed\n- Press `i` to get back to typing (insert mode)\n\n:::\n\n## Issuing commands\n\n- After `:w` (write) and the name of the file\n- Include the `.py` ending!\n- I wrote:\n```{.bash code-line-numbers=\"false\"}\n:w pw.py\n```\n\n## Save and Quit\n\n- You can always use `:w` to save while working.\n- Make any edits you make need to make - a missed paren perhaps.\n- Then both save *and* exit `nvim` with `:x`\n\t- This special command saves the file and exits `nvim`\n- You will return to the command line you started with, likely without incident.\n  \t- But there will now be a new file you can use!\n\n# Scripting\n\n## Back in Terminal\n\n- On MacOS, you'll see `nvim` and a new prompt\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ nvim\n$\n```\n- On Windows, the same\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> nvim\nPS C:\\Users\\calvin> \n```\n\n## Aside: Terminal Commands\n\n- Like Python and Neovim, there are also terminal commands!\n  - Two are `python`/`python3` and `nvim`!\n- Another is `ls`, which stands for \"list\"\n\t- This command has been around so long, it is from an era when commands were shorter to save precious computer memory!\n- It \"lists\" local files, and can list them by name!\n\n## Aside: Using `ls`\n\n- Try out this command, to see that you have a `pw.py` file!\n```{.ps  code-line-numbers=\"false\"}\n$ ls pw.py\n```\n- What do you see (different on Windows and MacOS)?\n\n## Checkpoint\n\n- If you do not have a `pw.py` file, stop here until you have one!\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> ls pw.py\n\n\n    Directory: C:\\Users\\cd-desk\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/20/2025   3:21 PM            151 pw.py\n```\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ ls pw.py\npw.py\n$\n```\n\n## .py files\n\n- There are two common ways to use `.py` files\n- I believe the most common is via `import`\n- To begin, at the command line, start Pythoni\n\n- On Windows, type `python`\n```{.ps filename=\"Windows\" code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\n```\n- On MacOS, type `python3`\n```{.zsh filename=\"MacOS\" code-line-numbers=\"false\"}\n$ python3\n```\n- On both, press the **↵ᴇɴᴛᴇʀ** key.\n\n## See Python\n\n- You'll see something like this:\n```{.email code-line-numbers=\"false\"}\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n- Take note of the prompt!\n- `>>>`\n- Those three are how you know it is Python, and not the Terminal, that you are working in.\n\n## Import\n\n- Versus last time, we now have a piecewise function written in a `.py` file we can reference.\n- To do so, we:\n\t- Type `import` followed by a space\n\t- Type the filename less the `.py` *extension*\n\t- It should look like this:\n\n```{.email code-line-numbers=\"false\"}\nPS C:\\Users\\calvin> python\nPython 3.12.5 (tags/v3.12.5:ff3bc82, Aug  6 2024, 20:45:27) [MSC v.1940 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pw\n>>>\n```\n\n## Modules\n\n- `import pw` will introduce a new variable to Python to which we can refer by name (pw)\n- It is of a new type for us, \"module\"\n```{.email code-line-numbers=\"false\"}\n>>> type(pw)\n<class 'module'>\n```\n- Modules correspond to `.py` files!\n```{.email code-line-numbers=\"false\"}\n>>> pw\n<module 'pw' from 'C:\\\\Users\\\\calvin\\\\pw.py'>\n```\n- (The `from` will look different on different computers)\n\n## Importing Functions\n\n- We can use functions inside modules in a few ways.\n- First, we can use the module name (`pw`) followed by a dot or period (`.`) followed by the name of the function.\n```{.email code-line-numbers=\"false\"}\n>>> pw.piecewise(-1)\n14\n```\n\n## Renaming Functions\n\n- Second, we can just use single equals assignment\n```{.email code-line-numbers=\"false\"}\n>>> piecewise = pw.piecewise\n>>> piecewise(4)\n9\n```\n\n## Using `from`\n\n- Third, we can use the `from` keyword in our import.\n\t- This is *by far* preferred (it is more clear)\n\n```{.email code-line-numbers=\"false\"}\n>>> from pw import piecewise\n>>> piecewise(11)\n-9\n```\n\n- I only show you the other methods to make it clear what this method is doing.\n\n## Exit Python\n\n- Oftentimes, we'll run a bit of Python then want to go back to the command line to use `nvim`\n\n::: {.callout-tip}\n\n## `exit()`\n\nYou can exit the Python `>>>` prompt back to Windows `>` or MacOS `$` at any time:\n\n- Use `exit()` \n- Use `quit()`\n- Use ctrl/cmd+z\n\nPractice starting and leaving Python a few times!\n\n:::\n\n# Using Terminal\n\n## Command Line Utilities\n\nI find the following tedious:\n\n1. `nvim`\n2. Write some code\n3. `:w somefile.py`\n4. ESC then `:x`\n5. `python`\n6. `from somefile import somefunction`\n7. `somefunction(x)`\n8. `exit()`\n\n## Alternative\n\n- We will instead:\n  - Show how to how run script files\n  - Show how to provide input to script files\n\n## Hello, Terminal\n\n- To begin, we will do terminal \"Hello, World!\"\n- I use `nvim hi.py` to create *and* open a new file named `hi.py`\n- Then I write:\n```{.py filename=\"hi.py\"}\nprint(\"Hello, terminal!\")\n```\n\n## Running Scripts\n\n- I save and exit via `:x`\n- Then I run the Python script via `python hi.py`\n- For me, it looks like this:\n```{.email code-line-numbers=\"false\"}\n$ nvim hi.py\n$ python3 hi.py\nHello, terminal!\n$\n```\n\n## What happened?\n\n- Basically, Python runs the code written in the file as if it were entered at the prompts.\n- It then provides the expected print statements.\n- We can run multiple times without rewriting the script.\n\n## Piecewise Script\n\n- Say we wish to find the piecewise results from the prior lecture.\n- `nvim pw.py`\n- I use `G` to jump to the end of the file\n\t- This is a \"vim motion\"\n- I use `i` to change into insert mode, and add:\n```{.py filename=\"pw.py\"}\nfor e in [-1, 4, 5, 8, 11]:\n    print([e, piecewise(e)])\n```\n- Save and exit with (escape then) `:x` \n\n## Test it\n\n```{.email code-line-numbers=\"false\"}\n$ nvim pw.py\n$ python3 pw.py\n[-1, 14]\n[4, 9]\n[5, 9]\n[8, 9]\n[11, -9]\n$\n```\n\n## Using input\n\n- Fortunately, Python has a built-in function that is (basically) the opposite of `print`\n- Within the terminal, run `python`\n- Then within Python, call `input()`\n```{.email code-line-numbers=\"false\"}\n>>> input() \n```\n- What happens?\n\n## What if?\n\n- We want to be able to check values without either\n  - Opening `python` and doing an `import`, or\n  - Opening `nvim` and editing the list\n- We can do that by providing *input*\n  - We write a script that expects us to type in some information!\n\n## Python input\n\n- Python helpfully has an input that is basically the opposite of print.\n- `input`\n- It is easiest to learn by trying it out!\n\n## Providing input\n\n- Open Python\n- Call the function `input()`\n- Type something - anything - then press enter.\n\n\n```{.email code-line-numbers=\"false\"}\n>>> input()\nsomething anything\n'something anything'\n```\n\n- *The `input()` function **returns** the text that is typed in*\n\n## Script input\n\n- Let's make a little script to try out `input()`\n```{.py filename=\"reply.py\"}\nx = input()\nprint(x)\n```\n- Think about the steps to create and run this file!\n\n## Example\n\n```{.email code-line-numbers=\"false\"}\n$ nvim\n$ python3 reply.py\nI wrote this text then pressed enter.\nI wrote this text then pressed enter.\n$\n```\n\n- Try it out!\n\n## Return v. Print\n\n::: {.callout-note appearance=\"simple\"}\n\n## Print, Not Return\n\n- To see the results of some expression or computation other work in the terminal, we must `print` within scripts.\n- `print()` for terminal\n- `return` within Python\n\n:::\n\n# Datatypes\n\n## A Wrinkle\n\n- There's one little problem here.\n- Let's update `pw.py` to to run on `input()` and see what happens.\n```{.py filename=\"pw.py\"}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n\nx = input()\ny = piecewise(x)\nprint(y)\n```\n\n## Uh oh!\n\n- I see the following:\n\n```{.email code-line-numbers=\"false\"}\n$ python3 pw.py\n10\nTraceback (most recent call last):\n  File \"/home/user/pw.py\", line 10, in <module>\n    y = piecewise(x)\n  File \"/home/user/pw.py\", line 2, in piecewise\n    if (x < 4):\nTypeError: '<' not supported between instances of 'str' and 'int'\n$\n```\n\n## Recall\n\n- We worked with different types last time:\n\t- *Think about what is happening here*\n\n::: {#7d648ac0 .cell execution_count=4}\n``` {.python .cell-code}\n[type(1), type(1 == 2), type([1,2]), type({1,2})]\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[int, bool, list, set]\n```\n:::\n:::\n\n\n- The type of `input()` is a new type - `str`\n  - Short for \"string\" - as in string of characters\n\n::: {#7730e8c9 .cell execution_count=5}\n``` {.python .cell-code}\ntype(\"Hello, world!\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nstr\n```\n:::\n:::\n\n\n## Casting\n\n- Changing data of one type (like `str`) into another (like `int`) is called *casting*\n- In Python, to cast we use the name of the type we want as a function on the value in the type we *don't* want.\n- Easy to try within `python`\n\n## Try it\n\n```{.email code-line-numbers=\"false\"}\n>>> x = input()\n10\n>>> x\n'10'\n>>> type(x)\n<class 'str'>\n>>> y = int(x)\n>>> y\n10\n>>> type(y)\n<class 'int'>\n>>> y < 11\nTrue\n```\n\n- Python shows something is a string by enclosing it within quote marks `''`\n\n## Fix `pw.py`\n\n```{.py filename=\"pw.py\"}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n\nx = input()\ny = int(x)\nz = piecewise(y)\nprint(z)\n```\n\n## Use it\n\n```{.email code-line-numbers=\"false\"}\n$ nvim pw.py\n$ python3 pw.py\n10\n-8\n$ python3 pw.py\n-1\n14\n$\n```\n\n# Exercise\n\n## Income Tax\n\n- We'll return to the income tax example, and\n- Add a wrinkle.\n- Here's an income tax solution:\n\n::: {#58746c0b .cell execution_count=6}\n``` {.python .cell-code code-fold=\"true\"}\ndef single_tax(pay):\n    tax_policy = [\n        [415050, .396], \n        [413350, .35],\n        [190150, .33],\n        [91150, .28],\n        [37650, .25],\n        [9275, .15]\n    ]\n    tax = 0\n    for bracket in tax_policy:\n        if pay > bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1\n```\n:::\n\n\n## Arguments\n\n- There is one other way to specify what you want a script to do.\n- *Command line arguments*\n- This is my favorite way (simpliest to use)\n\t- (Bit harder to write)\n- It is based on the Python `sys` module\n\n## `sys`\n\n- Create and try out the following file:\n```{.py filename=\"args.py\"}\nimport sys\n\nprint(sys.argv)\n```\n- What does it do?\n\n## 'argv'\n\n- 'argv' stands for \"argument vector\"\n- You may have noticed it is a list\n  - Other programming languages sometimes call lists vectors\n  - *Computer systems* often call lists vectors\n  - Python follows this convention\n\n## Add an arg\n\n- What happens if you do this?\n\n```{.email code-line-numbers=\"false\"}\n$ python3 args.py hello world\n```\n\n## Remember!\n\n::: {.callout-note appearance=\"simple\"}\n\n## Lists begin with zero! \n\n- When using `argv`, recall it is a Python list!\n- The initial element - what we would often call first - is at position *zero*\n- Would would print *only this element* as follows:\n\n```{.py filename=\"args.py\"}\nimport sys\n\nprint(sys.argv[0])\n```\n\n:::\n\n\n## Exercise\n\n- Create a file `tax.py`\n- Have it accept an income as a *command line argument*\n- Have it print a tax cost at command line.\n- Here's an example how it should work!\n```{.email code-line-numbers=\"false\"}\n$ python3 tax.py 40000\n115529.25\n```\n\n## Challenge Problem\n\n- Accept two command line arguments\n  - Income, and\n  - One of `['single', 'married', 'separate', 'head']`\n- Print the tax regardless of \"single-ness\"\n\n## Solution\n\n<details>\n<summary>Code</summary>\n```{.python}\nimport sys\n\nprint(single_tax(int(sys.argv[1])))\n```\n</details>\n\n",
    "supporting": [
      "02_neovim_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}