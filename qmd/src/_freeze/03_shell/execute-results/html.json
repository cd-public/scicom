{
  "hash": "61ce323ef5a583283c1cef8346d12521",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Shell \n---\n\n# Why Shell?\n\n## What is the \"shell\"?\n\n- For lack of a better word, the command line shell.\n- We've called it the terminal.\n- Thus far, we've used the shell to run `python` and `nvim`\n- We've also briefly used a single shell command - `ls`\n  - Recall we used it to see we'd written a file with `nvim`\n\n## Conceptualizing\n\n- So far we've used the shell as follows:\n\n```{dot}\n//| echo: false\n//| fig-width: 400px\ndigraph shell {\n  rankdir=TB; bgcolor=\"transparent\";\n  node [shape=circle, fontcolor = \"#ffffff\", color = \"#ffffff\"]\n  edge [color = \"#ffffff\",fontcolor = \"#ffffff\"]\n\n  Terminal -> Python [label=\"python3\"]\n  Python -> Terminal [label=\"exit()\"]\n  Terminal -> Neovim [label=\"nvim\"]\n  Neovim -> Terminal [label=\":x\"]\n  Terminal -> Terminal [label=\"ls\"]\n}\n```\n\n## On the Shell \n\n* Shell scripting is used to control compute *clusters*\n  - These clusters do complex computations like climate modelling, protein folding.\n  - Sometimes called \"HPC\" - high performance computing.\n* We can practice using the same techniques on our own computers!\n\n## More on the Shell\n\n* Shell scripting is *durable*\n  - Unlike Google Drive or Dropbox, shell scripts from the 70s and 80s (more or less) work today\n  - Similar arguments for Neovim vs. Microsoft Office Word or Google Docs\n* Shell scripting is *portable*\n  - People all around the world use the exact same commands.\n\n## Automation\n\n* Shell scripting can be automated\n  - Sometimes we just want a computer to do something without us thinking about it.\n  - Say you want to collate data every Sunday at 2 PM PT.\n  \t- Write a `.py` script that collates\n\t- Schedule it to run automatically with the shell `cron` command\n\n\n## Why not the shell?\n\n- **Non-graphical** - When first learning, students are used to see pictures and clicking them\n- **OS-based** - Windows and MacOS have different shell scripts\n- **Steep-learning curve** - Like Neovim, students generally find it difficult to get started, though it is widely preferred by experienced users\n\n# Git Bash\n\n## Setup\n\n- We need to do a bit more setup to:\n  - Make the course run smoothly\n  - Learn the general, transferrable skills we want.\n\n## Bash\n\n- The standard for shell scripting is \"bash\"\n\n> [In computing, Bash (short for \"Bourne Again SHell,\") is an interactive command interpreter and command programming language developed for UNIX-like operating systems.](https://en.wikipedia.org/wiki/Bash_(Unix_shell))\n\n- (It's free)\n\n## Windows\n\n- By default, Windows has two shells:\n\t- `cmd.exe` - From the 90s\n\t- PowerShell - Newer standard\n- Neither used in scientific computing.\n- Instead use:\n\t- [Git Bash](https://git-scm.com/downloads/win)\n\t  \t- Like Python, there is a very important box to check!\n\t  \t- I provide an [Appendix](A0_gitbash.qmd)\n\n## MacOS\n\n- MacOS uses `zsh`\n- It is close enough to bash to use in this course.\n- You will still need to install `git`, however, a critical shell command.\n  \t- Install [Git for macOS](https://git-scm.com/downloads/mac)\n\t- It installs through command line!\n\n## Why standardize?\n\n- It is bad enough to have to say \"type `python` or `python3`\"\n- But even just using `ls` we see perhaps frustrating differences.\n\t- `ls` on bash lists only file names\n\t- `ls` on PowerShell lists file names, dates, and more\n\t- `ls` on `cmd.exe` is an error.\n\n## Diving In\n\n- Today we will use shell scripting in the terminal to...\n\t- Delete old files\n\t- Organize files within folders\n\t- Save the output of scripts as files\n\n## Starting Point\n\n- Let's see what `.py` files you have.\n- We'll issue an `ls` command.\n- We'll provide an *argument* to the command.\n- We'll use the `.py` *file extension* in the command\n- And importantly, we'll use the \"wildcard\" `*`\n```{.bash}\nls *.py\n```\n\n## Wildcard\n\n- The `*` will \"match\" any name.\n- So `.py` will \"match\" and Python file!\n- I don't know what you've saved, I see this!\n```{.bash code-line-numbers=\"false\"}\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n```\n- What about `ls *`? `ls *w.py`?\n\n# The File System\n\n## File Management\n\n- I tend to like to:\n\t- Delete old files\n\t- Organize files within folders\n\t- Save the output of scripts as files\n- Let's do that.\n\n## `rm`\n\n::: {.callout-warning}\nThis command is *dangerous*.\n:::\n\n- The `rm` command removes files by name.\n- For example, I don't use `reply.py` anymore.\n- I can remove it like so:\n```{.bash code-line-numbers=\"false\"}\n$ ls *.py\nargs.py  hi.py  pw.py  reply.py  tax.py\n$ rm reply.py\n$ ls *.py\nargs.py  hi.py  pw.py  tax.py\n```\n\n## Remove/Recycle\n\n- You may be used to being able to restore deleted files from a recycling bin on your device.\n- Restoring from `rm` is sometimes possible, but never easy.\n- Be conscientious!\n\t- Learning to think about file deletion is an important part of the scientific computing process!\n\n## Alternative\n\n- Sometimes I don't want to look at a file, but I don't want to delete it either.\n- I often keep a folder around called \"old\"\n- It's stuff that's old!\n- I can make a folder with `mkdir` and the folder name, so\n```{.bash code-line-numbers=\"false\"}\n$ ls\nargs.py  hi.py  pw.py  tax.py\n$ mkdir old\n$ ls\nargs.py  hi.py  old  pw.py  tax.py\n```\n\n# Movement\n\n## Moving Files\n\n- You may be used to \"drag and drop\" movement of files between folders.\n- In bash, we can do this using the `mv` command.\n- It takes *two* arguments.\n\t- The file to move, and\n\t- A folder to move it to.\n\n```{.bash code-line-numbers=\"false\"}\n$ ls\nargs.py  hi.py  old  pw.py  tax.py\n$ mv hi.py old\nargs.py  old  pw.py  tax.py\n```\n\n- Where is `hi.py`?\n\n## Moving in Terminal\n\n- When we are using the terminal, we have a notion of some *location*\n- It is the same kind of location a file can have, that is, within some folder.\n- These locations are called \"paths\" and are defined by how we get to them.\n\n## Locating ourselves\n\n- You can see where you are at in the terminal at any time with `pwd`\n- Stands for \"print working directory\"\n- If you just opened Terminal on Windows you would see:\n```{.bash code-line-numbers=\"false\"}\n$ pwd\n/c/Users/cd-desk\n```\n- On MacOS, I believe\n```{.bash code-line-numbers=\"false\"}\n$ pwd\n/home/user\n```\n\n## Moving ourselves\n\n- To change which folder (or directory) the terminal is currently working within\n\t- The \"working directory\"\n- We use the \"change directory\" command `cd`\n```{.bash code-line-numbers=\"false\"}\n$ ls\nargs.py  old  pw.py  tax.py  \n$ pwd\n/home/user\n$ cd old\n$ ls\nhi.py\n$ pwd\n/home/user/old\n```\n\n\n## Movement\n\n- We can move a file, like `hi.py`, to a folder, like `old`\n```{.bash code-line-numbers=\"false\"}\n$ mv hi.py old\n```\n- We can move the terminal's current location to folder, like `old`\n```{.bash code-line-numbers=\"false\"}\n$ cd old\n```\n\n## Exiting a Folder\n\n- To leave a folder after `cd`ing into it, we use a special destination\n\n```{.bash code-line-numbers=\"false\"}\n$ cd ..\nuser@DESKTOP-THMS2PJ:~$ pwd\n/home/user\n```\n\n- `..` is the name of the folder that *contains* the folder you are currently in.\n- So you can use `cd` to change to the containing folder, often called the \"parent\"\n\n## Graphically\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{dot}\n//| echo: false\n//| fig-width: 200px\ndigraph shell {\n  rankdir=TB; bgcolor=\"transparent\";  overlap = false;\n  node [shape=circle, fontcolor = \"#ffffff\", color = \"#ffffff\"]\n  edge [color = \"#ffffff\",fontcolor = \"#ffffff\"]\n\n\n  home -> old[label=\"cd old\"]\n  \n}\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{dot}\n//| echo: false\n//| fig-width: 200px\ndigraph shell {\n  rankdir=TB; bgcolor=\"transparent\";  overlap = false;\n  node [shape=circle, fontcolor = \"#ffffff\", color = \"#ffffff\"]\n  edge [color = \"#ffffff\",fontcolor = \"#ffffff\"]\n\n\n  home -> old[color=\"transparent\"]\n\n\n  old -> home[label=\"cd ..\"]\n  \n}\n```\n\n:::\n\n::::\n\n## Removing Directories\n\n- Like files, which we can remove with `rm`, we can also remove folders (or directories).\n- We do so with `rmdir`\n- Let's try on `old`\n```{.bash code-line-numbers=\"false\"}\n$ rmdir old\nrmdir: failed to remove 'old': Directory not empty\n```\n- You can only remove folders this way if they are empty.\n- This helps you not delete things by accident!\n\n# Files\n\n## Reading\n\n- The names of files are helpful, but not always all we want to know.\n- When files only contain text - like `.py` files, we can use `cat` to see what text they contain.\n```{.bash code-line-numbers=\"false\"}\n$ cat args.py\nimport sys\n\nprint(sys.argv[0])\n```\n\n## Writing\n\n- Really, the best way to write a file from the command line is with Neovim.\n- But there are other ways, and sometimes you just want to make a file to test something.\n- You can make an empty file (with noting in it) via `touch`\n```{.bash code-line-numbers=\"false\"}\n$ touch somefile.txt\n$ ls *.txt\nsomefile.txt\n```\n\n## Echoing\n\n- To put anything in a file, we often use an `echo` command.\n- `echo` is also used for shell \"Hello, world!\"\n```{.bash code-line-numbers=\"false\"}\n$ echo \"Hello, shell!\"\nHello, shell!\n```\n\n## Redirecting\n\n- For any shell command - including `echo` - we can \"redirect\" what is printed to some file.\n- We do so using the special shell `>` operator\n  \t- It's just a special thing, like `*`\n\n```{.bash code-line-numbers=\"false\"}\n$ echo \"Hello, redirect!\" > hi.txt\n$ cat hi.txt\nHello, redirect!\n```\n\n- This is *very* helpful to save the results of Python computations.\n\n## Example\n\n- Here's an example how it should work!\n```{.email code-line-numbers=\"false\"}\n$ python3 tax.py 40000 > tax_burden.txt\n$ cat tax_burden.txt\n115529.25\n```\n\n## References\n\n- You can see the commands used here in a table reference in an [Appendix](A1_keybinds.qmd)\n- I'll include them here as well!\n\n## {.smaller}\n\n|Command|Action|\n|-------|------|\n|`ls`| list files in folder |\n|`rm f.txt`| delete file \"f.txt\"|\n|`mkdir dir`| create a new folder named \"dir\"|\n|`mv f.txt dir`| move file \"f.txt\" to folder \"dir\"|\n|`pwd`| print current folder |\n|`cd dir`| change current folder to \"dir\"|\n|`cd ..` | go to \"parent\" folder |\n|`echo hi`| print the text \"hi\"|\n|`echo hi >f.txt`| write \"hi\" to file \"f.txt\"|\n|`cat f.txt`| see the text in f.txt|\n\n\n# Comments\n\n## Taking notes\n\n- I claim it is *hard* to tell what this code is for.\n\n::: {#a7ddebd2 .cell execution_count=2}\n``` {.python .cell-code}\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n```\n:::\n\n\n- We may know, from taking this class, but in a few weeks, if I find and `cat` it, I am unlikely to know\n\n## Documentation\n\n- Good code tends to come with good *documentation* - written descriptions of what the code does.\n- In Python, we can include \"comments\" - text that is not evaluated as code - by starting lines with `#`\n\n::: {#b714684c .cell execution_count=3}\n``` {.python .cell-code}\n# This is a comment.\nprint(\"This is code.\")\n# This is another comment.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is code.\n```\n:::\n:::\n\n\n## Update `pw.py`\n\n- Here is how I documented `pw.py`:\n\n::: {#6ad6e784 .cell execution_count=4}\n``` {.python .cell-code}\n# Example of a piecewise function, from a student.\n# f(x) = 9x^2 + 5 | x < 4\n#        9        | 4 <= x <= 8\n#        2 - x    | x > 8\ndef piecewise(x):\n    if (x < 4):\n        return 9 * x ** 2 + 5\n    elif (4 <= x <= 8):\n        return 9\n    elif (x > 8):\n        return 2 - x\n```\n:::\n\n\n- This is functionally indentical, but easier on me!\n\n## Updating `tax.py`\n\n- With the benefit of comments, I'd like to look at income tax again.\n- Comments can make it much nicer to work with.\n- How?\n\n::: {#f2b605a6 .cell execution_count=5}\n``` {.python .cell-code}\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n- Uh... what does that mean?\n\n# Vim Motions\n\n## Command Mode\n\n- The beauty of Neovim is how powerful command mode, vim motions, and vim operators can be.\n- We'll just introduce a few.\n- The goal is to give a sense of what is possible, and give you things to start practicing.\n- If you ever want to do something in Neovim, chances are you can!\n\n## Solution\n\n<details>\n<summary>Code</summary>\n\n::: {#3facc237 .cell execution_count=6}\n``` {.python .cell-code}\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\ndef single_tax(pay):\n    tax = 0\n    for bracket in tax_policy:\n        if pay > bracket[0]:\n            tax += (pay - bracket[0]) * bracket[1]\n            pay = bracket[0]\n    return tax + pay * .1\n```\n:::\n\n\n</details>\n\n## Insert is easy\n\n- After opening the file, just press `i` and start typing...\n\n::: {#b58710fd .cell execution_count=7}\n``` {.python .cell-code}\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], \n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n## `$` is end-of-line\n\n- ESC to exit `i` mode\n- \"hjkl\" are left-up-down-right\n  - So `j` down to the 415050 line\n- `$` jumps to the end of the line\n\n::: {#4c471c02 .cell execution_count=8}\n``` {.python .cell-code}\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n## `0` is start-of-line\n\n- We'll now copy that comment rather than re-typing the whole thing\n- ESC into command mode\n- `0` brings to beginning of line.\n- `/` let's us search, so `/#` searches for the start of the comment\n  \t- Windows I had to \"ENTER\" after.\n\nPractice this a few times!\n\n## Aside: Mouse\n::: {.callout-tip}\n\nI know you can do this with the mouse.\n:::\n- I type a lot. \n- I promise this is faster once you practice.\n  - Took me around 2 weeks.\n  - Like 15% of a semester.\n- It is *way* faster than laptop trackpads.\n\n## Yank & Paste\n\n- Vim predates copy paste!\n- Type `y` to yank and then `$` to yank until the end of the line.\n  \t- We can combine *motions* (`$`) and operators (`y`)\n- Use `j` to go down to the next line.\n- Use `p` to paste the comment.\n\n::: {#eb0ef2b0 .cell execution_count=9}\n``` {.python .cell-code}\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .396 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n## Update it\n\n- I used\n\t- `/9` - first character to change\n\t- `r` - replace mode\n\t- Type \"5\".\n\t- `l` to move right (onto \"6\") then `dl` to delete the next character.\n\n::: {#e148735b .cell execution_count=10}\n``` {.python .cell-code}\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar over 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n## Add the range\n\n- I used\n\t- `/over` - first character to change\n\t- `de` - We introduce the new `e` motion for \"end of word\" and combine with delete.\n\t- Type \"between 413350 and \"\n\t- I escaped (ESC) and saved (`:w`)\n\n::: {#82a2b964 .cell execution_count=11}\n``` {.python .cell-code}\n# Gives the tax rate *above* a certain income level\ntax_policy = [\n    [415050, .396], # e.g. .396 of every 1 dollar over 415050 is taxed\n    [413350, .35],# e.g. .35 of every 1 dollar between 413350 and 415050 is taxed\n    [190150, .33],\n    [91150, .28],\n    [37650, .25],\n    [9275, .15]    \n]\n```\n:::\n\n\n# Scientific Writing\n\n## Writing as Thinking\n\n- I consider writing *part of the scientific process*.\n- You may realize while working through this that...\n- Each tax braket is a simple linear relation!\n  \t- The rate is the slope\n\t- The intercept is how much they don't have to pay due to marginal rates.\n- *By writing and explain our computations, we can uncover insights*\n\n## Naive notes\n\n- Here's some naive notes I took.\n- They can be made better!\n\n::: {#754f2394 .cell execution_count=12}\n``` {.python .cell-code}\n# Tax on first bracket, up to 9725 at .1\nfirst = 9725 * .1\n# Second - to 37650 at .25\nsecond = first + (37650 - 9725) * .15\n```\n:::\n\n\n## Compute Intercept\n\n- We know e.g. the tax cost at 500000\n\n::: {#17215585 .cell execution_count=13}\n``` {.python .cell-code}\nx = single_tax(500000)\nx\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n154169.95\n```\n:::\n:::\n\n\n- Compare to a non-marginal 39.6%\n\n::: {#cef42a99 .cell execution_count=14}\n``` {.python .cell-code}\ny = 500000 * .396\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n198000.0\n```\n:::\n:::\n\n\n- We can find the difference.\n\n::: {#737f6116 .cell execution_count=15}\n``` {.python .cell-code}\nb = x - y \nb\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n-43830.04999999999\n```\n:::\n:::\n\n\n## A Linear Equation \n\n- Try 450000\n\n::: {#80a424ff .cell execution_count=16}\n``` {.python .cell-code}\nincome = 450000\n[single_tax(income), income * .396 + b]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n[134369.95, 134369.95]\n```\n:::\n:::\n\n\n- Try 650000\n\n::: {#6cb41357 .cell execution_count=17}\n``` {.python .cell-code}\nincome = 650000\n[single_tax(income), income * .396 + b]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n[213569.95, 213569.95]\n```\n:::\n:::\n\n\n- *We can precompute these and make **much simpler** functions*\n\n## Aside: Slope-Intercept\n\n- I think of this as\n$$\ny = mx + b\n$$\n- The slope-intercept form of a line, or linear equation.\n- We calculated it from the point-slope form of a line.\n\n## Aside: Scientific Application\n\n- Thinking in slopes and intercepts is a powerful scientific skill!\n\n::: {#bcfdd531 .cell execution_count=18}\n``` {.python .cell-code}\ndef in_degrees_f(degrees_c):\n\treturn (9/5) * degrees_c + 32\n```\n:::\n\n\n- Recognize this?\n\n::: {#3b593b14 .cell execution_count=19}\n``` {.python .cell-code}\n[in_degrees_f(0), in_degrees_f(100)]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n[32.0, 212.0]\n```\n:::\n:::\n\n\n# Exercise\n\n## Intercept Computation\n\n- One of my favorite ways to use Python, Neovim, and the shell is to:\n  - Compute some numerical values\n    \t- Intercept values for linear equations of tax.\n  - Run the script and output the results to the shell.\n  - Use `>` to direct the output to file.\n  - Use `nvim` to edit that file into a *new* Python script that uses the numerical values I found.\n\n## First\n\n- Write a python script, `points.py`, that computes the tax cost at the end of each bracket.\n- Here it is for \"Married Filing Jointly\"\n- You can do this with a loop using the `tax_policy` list-of-lists!\n\n::: {#5c0284ab .cell execution_count=20}\n``` {.python .cell-code}\nb = 18550 * .1\nprint(b)\nb += (75300 - 18550) * .15\nprint(b)\nb += (151900 - 75300) * .25\nprint(b)\nb += (231450 - 151900) * .28\nprint(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1855.0\n10367.5\n29517.5\n51791.5\n```\n:::\n:::\n\n\n## Aside: Loop Version\n\n<details>\n<summary>Code</summary>\n\n::: {#00a71d41 .cell output-location='column' execution_count=21}\n``` {.python .cell-code}\ntaxes = [\n    [18550, .10],\n    [75300, .15],\n    [151900, .25],\n    [231450, .28],\n    [413350, .33],\n    [466951, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print(cost)\n    start = tax[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85\n```\n:::\n:::\n\n\n</details>\n\n## Second\n\n- Run the Python script and direct the output to some file, like `tax.py`\n```{.bash code-line-numbers=\"false\"}\n$ python points.py > tax.py\n$ nvim tax.py\n```\n- From here, you can convert to a Python list of your choosing with a variety of means.\n\n## Aside: Visual Block\n\n::: {.callout-warning}\nThis is an advanced topic.\n:::\n\n- We introduce *visual block mode*\n- A way to modifying multiple lines all at once.\n\t- There is also a regular \"visual mode\" `v` which I use less often.\n\n## Example\n\n::::{.columns}\n\n:::{.column width=\"70%\"}\n\n- `nvim tax.py`\n- ctrl+q or ctrl+v to enter \"visual block\"\n- `5j` to move down 5 lines\n- `I` (shift + \"i\") to enter \"insert block\"\n- Type \"[\" to begin a list\n- ESC to exit \"insert block\"\n- \"[\" will appear at the start of every line.\n\n:::\n\n:::{.column width=\"30%\"}\n\n- Before:\n\n```{.python filename=\"tax.py\"}\n1855.0\n10367.5\n29517.5\n51791.5\n111818.5\n130578.85\n```\n\n- After:\n\n```{.python filename=\"tax.py\"}\n[1855.0\n[10367.5\n[29517.5\n[51791.5\n[111818.5\n[130578.85\n```\n\n- Press `u` to undo to practice.\n\n:::\n\n::::\n\n## Aside: Printing Python\n\n- Alternatively, you can use `print()` to directly print things usable as Python.\n\n<details>\n<summary>Code</summary>\n\n::: {#1fca2744 .cell execution_count=22}\n``` {.python .cell-code}\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    print([cost, start, tax[1]])\n    start = tax[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1855.0, 0, 0.1]\n[10367.5, 18550, 0.15]\n[29517.5, 75300, 0.25]\n[51791.5, 151900, 0.28]\n[111818.5, 231450, 0.33]\n[130578.85, 413350, 0.35]\n```\n:::\n:::\n\n\n</details>\n\n\n## Third\n\n- Use points to determine intercepts\n- Consider:\n\n::: {#b44a59e1 .cell execution_count=23}\n``` {.python .cell-code}\n# For taxpayers making more than 151900\n# They pay 51791.50, plus\n# .28 for every dollar over 151900\nbracket = [51791.5, 151900, 0.28]\n# What is the linear equation?\n```\n:::\n\n\n- We can calculate it as follows:\n\n::: {#9da7dd7b .cell execution_count=24}\n``` {.python .cell-code}\nb = 51791.5 - (151900 * .28)\nb\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n9259.499999999993\n```\n:::\n:::\n\n\n## Fourth\n\n- Given the calculated slopes and intercepts, construct a piecewise function capturing income tax.\n- Something like this:\n\n::: {#12fa0a89 .cell execution_count=25}\n``` {.python .cell-code}\ndef married_tax(income):\n\tif (151900 <= income < 231450):\n\t\treturn income * .28 - 9259.5\n\t# There will be more brackets of course!\n```\n:::\n\n\n## Exercise\n\n- Create two Python files:\n  - One which calculates intercepts\n    \t- Perhaps `intercepts.py`\n  - One which uses intercepts to compute tax cost linearly.\n    \t- Perhaps `tax_line.py`\n\n## Solution pt. 1\n\n::: {#d546c3a3 .cell execution_count=26}\n``` {.python .cell-code code-fold=\"true\"}\ntaxes = [\n    [9275, .10],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n]\n\ncost = 0\nstart = 0\nfor tax in taxes:\n    cost += (tax[0] - start) * tax[1]\n    tax += [cost - tax[0] * tax[1]]\n    start = tax[0]\n    print(tax)\n```\n:::\n\n\n## Solution pt. 2\n\n::: {#4667216c .cell execution_count=27}\n``` {.python .cell-code code-fold=\"true\"}\n# Generate with `intercepts` then modify with visual block mode\ntaxes = [\n    [9275, 0.1, 0.0],\n    [37650, 0.15, -463.75],\n    [91150, 0.25, -4228.75],\n    [190150, 0.28, -6963.25],\n    [413350, 0.33, -16470.75],\n    [415051, 0.35, -24737.75],\n]\n\ndef single_tax(income):\n    # Check all brackets\n    for tax in taxes:\n        if income < tax[0]:\n            return income * tax[1] + tax[2]\n    # We calculated the top bracket earlier\n    return income * .396 + -43830.05\n```\n:::\n\n\n",
    "supporting": [
      "03_shell_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}