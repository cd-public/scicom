{
  "hash": "6114b55f5e11edb6ef5c85ba37851f77",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: <strong>pandas</strong>\n---\n\n\n\n\n\n\n# What is **pandas**?\n\n- In its own words:\n\n> a fast, powerful, flexible and easy to use open source data analysis and manipulation tool\n\n- In my words:\n\n\"The basis of the modern 'boom' in data and data analysis\"\n\n## **pandas**\n\n- Stands for \"panel data\"\n- Original built on NumPy, now on supercomputing technologies.\n- Core innovation: The DataFrame\n\n> [A DataFrame is a data structure that organizes data into a 2-dimensional table of rows and columns, much like a spreadsheet.](https://www.databricks.com/glossary/what-are-dataframes)\n\n## \"like a spreadsheet\"\n\n- With **pandas**, we can do all the things we can do in a spreadsheet, but:\n  \t- Automatically\n\t- Repeatedly\n\t- Consistently\n- Basically, we never have to find a button again, but instead we have to learn functions from code documentation.\n\n## Spreadsheet Usage\n\n- I mostly (used to) use spreadsheets to make charts.\n- **pandas** works *very* well with Matplotlib (better than NumPy does, I think)\n- In the NumPy tutorial, **pandas** and Matplotlib are the two other Python packages mentioned, to read spreadsheets and plot them, respectively.\n\n## Why not **pandas**?\n\n- After years undisputed prominence as the best data library, **pandas** has recently received a challenger called \"Polars\" which is situationally faster and rapidly gaining popularity.\n- I expect Polars to take over in cloud computing but not in scientific computing.\n- Polars uses neither NumPy not Matplotlib, but plots with Altair, which I found insuitable for scientific applications.\n\n## Relevance\n\n- We have only calculated and plotted data we have typed in ourselves!\n- Yuck!\n\n# Install\n\n## pip again\n\n- Just like NumPy and Matplotlib, **pandas** is a Python package which we install via `pip`\n```{.bash code-line-numbers=\"false\"}\npython3 -m pip install pandas\n```\n- That might take a moment, when it does we can check it worked!\n\n## Two First Steps\n\n- There are two *great* ways to get a **pandas** DataFrame.\n- We quickly show both.\n\n::: {#e22060e7 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n## From NumPy\n\n::: {#000c64ab .cell execution_count=3}\n``` {.python .cell-code}\ntaxes = np.array([\n    [9275, .1],\n    [37650, .15],\n    [91150, .25],\n    [190150, .28],\n    [413350, .33],\n    [415051, .35]\n])\ndf = pd.DataFrame(taxes) # use \"df\" for dataframes by convention\ndf # You'll notice this may look a lot nicer\n```\n\n::: {.cell-output .cell-output-display execution_count=218}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9275.0</td>\n      <td>0.10</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37650.0</td>\n      <td>0.15</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>91150.0</td>\n      <td>0.25</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>190150.0</td>\n      <td>0.28</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>413350.0</td>\n      <td>0.33</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>415051.0</td>\n      <td>0.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Get a File\n\n- I will use some nuclear data.\n- Usually data will come from your research group or experiments.\n- Often stored as a CSV.\n  \t- A \".csv\" file, for \"comma separated value\"\n- We'll use \"Periodic Table of Elements.csv\"\n  \t- Spaces in maes are annoying; we'll manage.\n- It's from [here](https://gist.github.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee)\n\n## From a URL\n\n- You can use files on your computer, or...\n- From a url.\n- But the url must be the address *of the file*\n  - Not a page that talks about the file.\n  - Not a page with the same data but presented in a pretty table.\n\n## \"Raw\" Files\n\n- On GitHub (common place to keep files) these are called \"raw\" files.\n  - [https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv](https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv)\n- Note - that ends in `.csv`\n\n## From File\n\n::: {#d0d8c077 .cell execution_count=4}\n``` {.python .cell-code}\ndf = pd.read_csv(\"https://gist.githubusercontent.com/GoodmanSciences/c2dd862cd38f21b0ad36b8f96b4bf1ee/raw/1d92663004489a5b6926e944c1b3d9ec5c40900e/Periodic%2520Table%2520of%2520Elements.csv\")\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=219}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AtomicNumber</th>\n      <th>Element</th>\n      <th>Symbol</th>\n      <th>AtomicMass</th>\n      <th>NumberofNeutrons</th>\n      <th>NumberofProtons</th>\n      <th>NumberofElectrons</th>\n      <th>Period</th>\n      <th>Group</th>\n      <th>Phase</th>\n      <th>...</th>\n      <th>FirstIonization</th>\n      <th>Density</th>\n      <th>MeltingPoint</th>\n      <th>BoilingPoint</th>\n      <th>NumberOfIsotopes</th>\n      <th>Discoverer</th>\n      <th>Year</th>\n      <th>SpecificHeat</th>\n      <th>NumberofShells</th>\n      <th>NumberofValence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Hydrogen</td>\n      <td>H</td>\n      <td>1.007</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1.0</td>\n      <td>gas</td>\n      <td>...</td>\n      <td>13.5984</td>\n      <td>0.000090</td>\n      <td>14.175</td>\n      <td>20.28</td>\n      <td>3.0</td>\n      <td>Cavendish</td>\n      <td>1766.0</td>\n      <td>14.304</td>\n      <td>1</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Helium</td>\n      <td>He</td>\n      <td>4.002</td>\n      <td>2</td>\n      <td>2</td>\n      <td>2</td>\n      <td>1</td>\n      <td>18.0</td>\n      <td>gas</td>\n      <td>...</td>\n      <td>24.5874</td>\n      <td>0.000179</td>\n      <td>NaN</td>\n      <td>4.22</td>\n      <td>5.0</td>\n      <td>Janssen</td>\n      <td>1868.0</td>\n      <td>5.193</td>\n      <td>1</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Lithium</td>\n      <td>Li</td>\n      <td>6.941</td>\n      <td>4</td>\n      <td>3</td>\n      <td>3</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>solid</td>\n      <td>...</td>\n      <td>5.3917</td>\n      <td>0.534000</td>\n      <td>453.850</td>\n      <td>1615.00</td>\n      <td>5.0</td>\n      <td>Arfvedson</td>\n      <td>1817.0</td>\n      <td>3.582</td>\n      <td>2</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Beryllium</td>\n      <td>Be</td>\n      <td>9.012</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>solid</td>\n      <td>...</td>\n      <td>9.3227</td>\n      <td>1.850000</td>\n      <td>1560.150</td>\n      <td>2742.00</td>\n      <td>6.0</td>\n      <td>Vaulquelin</td>\n      <td>1798.0</td>\n      <td>1.825</td>\n      <td>2</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Boron</td>\n      <td>B</td>\n      <td>10.811</td>\n      <td>6</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>13.0</td>\n      <td>solid</td>\n      <td>...</td>\n      <td>8.2980</td>\n      <td>2.340000</td>\n      <td>2573.150</td>\n      <td>4200.00</td>\n      <td>6.0</td>\n      <td>Gay-Lussac</td>\n      <td>1808.0</td>\n      <td>1.026</td>\n      <td>2</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>114</td>\n      <td>Flerovium</td>\n      <td>Fl</td>\n      <td>289.000</td>\n      <td>175</td>\n      <td>114</td>\n      <td>114</td>\n      <td>7</td>\n      <td>14.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1999.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>115</td>\n      <td>Moscovium</td>\n      <td>Mc</td>\n      <td>288.000</td>\n      <td>173</td>\n      <td>115</td>\n      <td>115</td>\n      <td>7</td>\n      <td>15.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2010.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>116</td>\n      <td>Livermorium</td>\n      <td>Lv</td>\n      <td>292.000</td>\n      <td>176</td>\n      <td>116</td>\n      <td>116</td>\n      <td>7</td>\n      <td>16.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2000.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>117</td>\n      <td>Tennessine</td>\n      <td>Ts</td>\n      <td>295.000</td>\n      <td>178</td>\n      <td>117</td>\n      <td>117</td>\n      <td>7</td>\n      <td>17.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2010.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>118</td>\n      <td>Oganesson</td>\n      <td>Og</td>\n      <td>294.000</td>\n      <td>176</td>\n      <td>118</td>\n      <td>118</td>\n      <td>7</td>\n      <td>18.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2006.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>8.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>118 rows × 28 columns</p>\n</div>\n```\n:::\n:::\n\n\n# DataFrames\n\n## DataFrames and Arrays\n\n- DataFrames:\n  \t- Have row and column labels\n\t- Can store multiple types of data (strings/words, integers, and floating point numbers)\n- Arrays:\n  \t- Don't\n\t- Can't\n\n## Subsetting\n\n- One of the most common uses for **pandas** is to *subset*, to look at part of DataFrame but not all.\n- Usually by looking at a specific column or columns - by name.\n  \t- Vs. arrays and lists, DataFrames still have indices, but they are now usually strings.\n\n::: {#d8e098fb .cell execution_count=5}\n``` {.python .cell-code}\ndf[\"Element\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=220}\n```\n0         Hydrogen\n1           Helium\n2          Lithium\n3        Beryllium\n4            Boron\n          ...     \n113      Flerovium\n114      Moscovium\n115    Livermorium\n116     Tennessine\n117      Oganesson\nName: Element, Length: 118, dtype: object\n```\n:::\n:::\n\n\n## Multiple Indices\n\n- We can also subset multiple indices using a *list* of *indices* (column names).\n\n::: {#79ebf0de .cell execution_count=6}\n``` {.python .cell-code}\ndf[[\"Element\",\"Symbol\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=221}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Element</th>\n      <th>Symbol</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Hydrogen</td>\n      <td>H</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Helium</td>\n      <td>He</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Lithium</td>\n      <td>Li</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Beryllium</td>\n      <td>Be</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Boron</td>\n      <td>B</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>Flerovium</td>\n      <td>Fl</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>Moscovium</td>\n      <td>Mc</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>Livermorium</td>\n      <td>Lv</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>Tennessine</td>\n      <td>Ts</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>Oganesson</td>\n      <td>Og</td>\n    </tr>\n  </tbody>\n</table>\n<p>118 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Filtering\n\n- We can subset rows by *filtering*\n- Basically we write what would be an `if` statement, but use it as an index.\n- The \"transuranic\" elements are elements higher than number 92.\n\n::: {#231e9873 .cell execution_count=7}\n``` {.python .cell-code}\ndf[df[\"AtomicNumber\"] > 92]\n```\n\n::: {.cell-output .cell-output-display execution_count=222}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AtomicNumber</th>\n      <th>Element</th>\n      <th>Symbol</th>\n      <th>AtomicMass</th>\n      <th>NumberofNeutrons</th>\n      <th>NumberofProtons</th>\n      <th>NumberofElectrons</th>\n      <th>Period</th>\n      <th>Group</th>\n      <th>Phase</th>\n      <th>...</th>\n      <th>FirstIonization</th>\n      <th>Density</th>\n      <th>MeltingPoint</th>\n      <th>BoilingPoint</th>\n      <th>NumberOfIsotopes</th>\n      <th>Discoverer</th>\n      <th>Year</th>\n      <th>SpecificHeat</th>\n      <th>NumberofShells</th>\n      <th>NumberofValence</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>92</th>\n      <td>93</td>\n      <td>Neptunium</td>\n      <td>Np</td>\n      <td>237.0</td>\n      <td>144</td>\n      <td>93</td>\n      <td>93</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.2657</td>\n      <td>20.5</td>\n      <td>913.15</td>\n      <td>4273.0</td>\n      <td>153.0</td>\n      <td>McMillan and Abelson</td>\n      <td>1940.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>93</th>\n      <td>94</td>\n      <td>Plutonium</td>\n      <td>Pu</td>\n      <td>244.0</td>\n      <td>150</td>\n      <td>94</td>\n      <td>94</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.0262</td>\n      <td>19.8</td>\n      <td>913.15</td>\n      <td>3501.0</td>\n      <td>163.0</td>\n      <td>Seaborg et al.</td>\n      <td>1940.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>94</th>\n      <td>95</td>\n      <td>Americium</td>\n      <td>Am</td>\n      <td>243.0</td>\n      <td>148</td>\n      <td>95</td>\n      <td>95</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>5.9738</td>\n      <td>13.7</td>\n      <td>1267.15</td>\n      <td>2880.0</td>\n      <td>133.0</td>\n      <td>Seaborg et al.</td>\n      <td>1944.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>95</th>\n      <td>96</td>\n      <td>Curium</td>\n      <td>Cm</td>\n      <td>247.0</td>\n      <td>151</td>\n      <td>96</td>\n      <td>96</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>5.9915</td>\n      <td>13.5</td>\n      <td>1340.15</td>\n      <td>3383.0</td>\n      <td>133.0</td>\n      <td>Seaborg et al.</td>\n      <td>1944.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>96</th>\n      <td>97</td>\n      <td>Berkelium</td>\n      <td>Bk</td>\n      <td>247.0</td>\n      <td>150</td>\n      <td>97</td>\n      <td>97</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.1979</td>\n      <td>14.8</td>\n      <td>1259.15</td>\n      <td>983.0</td>\n      <td>83.0</td>\n      <td>Seaborg et al.</td>\n      <td>1949.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>97</th>\n      <td>98</td>\n      <td>Californium</td>\n      <td>Cf</td>\n      <td>251.0</td>\n      <td>153</td>\n      <td>98</td>\n      <td>98</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.2817</td>\n      <td>15.1</td>\n      <td>1925.15</td>\n      <td>1173.0</td>\n      <td>123.0</td>\n      <td>Seaborg et al.</td>\n      <td>1950.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>98</th>\n      <td>99</td>\n      <td>Einsteinium</td>\n      <td>Es</td>\n      <td>252.0</td>\n      <td>153</td>\n      <td>99</td>\n      <td>99</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.4200</td>\n      <td>13.5</td>\n      <td>1133.15</td>\n      <td>NaN</td>\n      <td>123.0</td>\n      <td>Ghiorso et al.</td>\n      <td>1952.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>99</th>\n      <td>100</td>\n      <td>Fermium</td>\n      <td>Fm</td>\n      <td>257.0</td>\n      <td>157</td>\n      <td>100</td>\n      <td>100</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.5000</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>103.0</td>\n      <td>Ghiorso et al.</td>\n      <td>1953.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>101</td>\n      <td>Mendelevium</td>\n      <td>Md</td>\n      <td>258.0</td>\n      <td>157</td>\n      <td>101</td>\n      <td>101</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.5800</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>33.0</td>\n      <td>Ghiorso et al.</td>\n      <td>1955.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>102</td>\n      <td>Nobelium</td>\n      <td>No</td>\n      <td>259.0</td>\n      <td>157</td>\n      <td>102</td>\n      <td>102</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>6.6500</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>73.0</td>\n      <td>Ghiorso et al.</td>\n      <td>1958.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>102</th>\n      <td>103</td>\n      <td>Lawrencium</td>\n      <td>Lr</td>\n      <td>262.0</td>\n      <td>159</td>\n      <td>103</td>\n      <td>103</td>\n      <td>7</td>\n      <td>NaN</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>203.0</td>\n      <td>Ghiorso et al.</td>\n      <td>1961.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>103</th>\n      <td>104</td>\n      <td>Rutherfordium</td>\n      <td>Rf</td>\n      <td>261.0</td>\n      <td>157</td>\n      <td>104</td>\n      <td>104</td>\n      <td>7</td>\n      <td>4.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>18.1</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Ghiorso et al.</td>\n      <td>1969.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>104</th>\n      <td>105</td>\n      <td>Dubnium</td>\n      <td>Db</td>\n      <td>262.0</td>\n      <td>157</td>\n      <td>105</td>\n      <td>105</td>\n      <td>7</td>\n      <td>5.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>39.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Ghiorso et al.</td>\n      <td>1970.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>106</td>\n      <td>Seaborgium</td>\n      <td>Sg</td>\n      <td>266.0</td>\n      <td>160</td>\n      <td>106</td>\n      <td>106</td>\n      <td>7</td>\n      <td>6.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>35.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Ghiorso et al.</td>\n      <td>1974.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>106</th>\n      <td>107</td>\n      <td>Bohrium</td>\n      <td>Bh</td>\n      <td>264.0</td>\n      <td>157</td>\n      <td>107</td>\n      <td>107</td>\n      <td>7</td>\n      <td>7.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Armbruster and M�nzenberg</td>\n      <td>1981.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>107</th>\n      <td>108</td>\n      <td>Hassium</td>\n      <td>Hs</td>\n      <td>267.0</td>\n      <td>159</td>\n      <td>108</td>\n      <td>108</td>\n      <td>7</td>\n      <td>8.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>41.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Armbruster and M�nzenberg</td>\n      <td>1983.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>108</th>\n      <td>109</td>\n      <td>Meitnerium</td>\n      <td>Mt</td>\n      <td>268.0</td>\n      <td>159</td>\n      <td>109</td>\n      <td>109</td>\n      <td>7</td>\n      <td>9.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>35.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>GSI, Darmstadt, West Germany</td>\n      <td>1982.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>109</th>\n      <td>110</td>\n      <td>Darmstadtium</td>\n      <td>Ds</td>\n      <td>271.0</td>\n      <td>161</td>\n      <td>110</td>\n      <td>110</td>\n      <td>7</td>\n      <td>10.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1994.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>110</th>\n      <td>111</td>\n      <td>Roentgenium</td>\n      <td>Rg</td>\n      <td>272.0</td>\n      <td>161</td>\n      <td>111</td>\n      <td>111</td>\n      <td>7</td>\n      <td>11.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1994.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>112</td>\n      <td>Copernicium</td>\n      <td>Cn</td>\n      <td>285.0</td>\n      <td>173</td>\n      <td>112</td>\n      <td>112</td>\n      <td>7</td>\n      <td>12.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1996.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>112</th>\n      <td>113</td>\n      <td>Nihonium</td>\n      <td>Nh</td>\n      <td>284.0</td>\n      <td>171</td>\n      <td>113</td>\n      <td>113</td>\n      <td>7</td>\n      <td>13.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2004.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>113</th>\n      <td>114</td>\n      <td>Flerovium</td>\n      <td>Fl</td>\n      <td>289.0</td>\n      <td>175</td>\n      <td>114</td>\n      <td>114</td>\n      <td>7</td>\n      <td>14.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1999.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>4.0</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>115</td>\n      <td>Moscovium</td>\n      <td>Mc</td>\n      <td>288.0</td>\n      <td>173</td>\n      <td>115</td>\n      <td>115</td>\n      <td>7</td>\n      <td>15.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2010.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>115</th>\n      <td>116</td>\n      <td>Livermorium</td>\n      <td>Lv</td>\n      <td>292.0</td>\n      <td>176</td>\n      <td>116</td>\n      <td>116</td>\n      <td>7</td>\n      <td>16.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2000.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>6.0</td>\n    </tr>\n    <tr>\n      <th>116</th>\n      <td>117</td>\n      <td>Tennessine</td>\n      <td>Ts</td>\n      <td>295.0</td>\n      <td>178</td>\n      <td>117</td>\n      <td>117</td>\n      <td>7</td>\n      <td>17.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2010.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>117</th>\n      <td>118</td>\n      <td>Oganesson</td>\n      <td>Og</td>\n      <td>294.0</td>\n      <td>176</td>\n      <td>118</td>\n      <td>118</td>\n      <td>7</td>\n      <td>18.0</td>\n      <td>artificial</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>2006.0</td>\n      <td>NaN</td>\n      <td>7</td>\n      <td>8.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>26 rows × 28 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Double `df`\n\n- We use `df` twice in that expression:\n  - Once to check the `df` if some value is greater than 92\n  - Once to look up all elements *for which* the value is greater.\n\n::: {#290db9c5 .cell execution_count=8}\n``` {.python .cell-code}\ndf[\"AtomicNumber\"] > 92\n```\n\n::: {.cell-output .cell-output-display execution_count=223}\n```\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n113     True\n114     True\n115     True\n116     True\n117     True\nName: AtomicNumber, Length: 118, dtype: bool\n```\n:::\n:::\n\n\n## .columns\n\n- By the way, what all do we know?\n\n::: {#5fb4f8bb .cell execution_count=9}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=224}\n```\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'NumberofProtons', 'NumberofElectrons', 'Period', 'Group', 'Phase',\n       'Radioactive', 'Natural', 'Metal', 'Nonmetal', 'Metalloid', 'Type',\n       'AtomicRadius', 'Electronegativity', 'FirstIonization', 'Density',\n       'MeltingPoint', 'BoilingPoint', 'NumberOfIsotopes', 'Discoverer',\n       'Year', 'SpecificHeat', 'NumberofShells', 'NumberofValence'],\n      dtype='object')\n```\n:::\n:::\n\n\n- Oh that's a lot of information!\n\n## How big?\n\n- How big is `df`?\n\n::: {#483a3263 .cell execution_count=10}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=225}\n```\n(118, 28)\n```\n:::\n:::\n\n\n- And by the way, `np.array`'s have `shape` too.\n\n::: {#9815e232 .cell execution_count=11}\n``` {.python .cell-code}\ntaxes.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=226}\n```\n(6, 2)\n```\n:::\n:::\n\n\n- Aside: Multiple values within a `()` are asically lists but called tuples.\n\n::: {#d5f2860f .cell execution_count=12}\n``` {.python .cell-code}\ntype(taxes.shape)\n```\n\n::: {.cell-output .cell-output-display execution_count=227}\n```\ntuple\n```\n:::\n:::\n\n\n## Locating Entries\n\n- Sometimes you want to use an integer index. \n\n::: {#57ee79eb .cell execution_count=13}\n``` {.python .cell-code}\ndf.iloc[10] # \"Integer Location\"\n```\n\n::: {.cell-output .cell-output-display execution_count=228}\n```\nAtomicNumber                   11\nElement                    Sodium\nSymbol                         Na\nAtomicMass                  22.99\nNumberofNeutrons               12\nNumberofProtons                11\nNumberofElectrons              11\nPeriod                          3\nGroup                         1.0\nPhase                       solid\nRadioactive                   NaN\nNatural                       yes\nMetal                         yes\nNonmetal                      NaN\nMetalloid                     NaN\nType                 Alkali Metal\nAtomicRadius                  2.2\nElectronegativity            0.93\nFirstIonization            5.1391\nDensity                     0.971\nMeltingPoint               371.15\nBoilingPoint               1156.0\nNumberOfIsotopes              7.0\nDiscoverer                   Davy\nYear                       1807.0\nSpecificHeat                1.228\nNumberofShells                  3\nNumberofValence               1.0\nName: 10, dtype: object\n```\n:::\n:::\n\n\n## Zero/One index\n\n- DataFrames are 0-indexed\n\n::: {#9ba9643b .cell execution_count=14}\n``` {.python .cell-code}\ndf[\"AtomicNumber\"].iloc[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=229}\n```\nnp.int64(1)\n```\n:::\n:::\n\n\n- Elements are 1-indexed[^1] with good reason.\n\n::: {#81f18ec4 .cell execution_count=15}\n``` {.python .cell-code}\ndf[[\"AtomicNumber\",\"NumberofProtons\"]].head(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=230}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AtomicNumber</th>\n      <th>NumberofProtons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n[^1]: Neutronium is a proposed as an element with atomic number of `0`.\n\n\n\n## Data Manipulation\n\n- Check out these columns\n\n::: {#9ab9c40e .cell execution_count=16}\n``` {.python .cell-code}\ndf.iloc[::20][[\"NumberofNeutrons\", \"NumberofProtons\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=231}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NumberofNeutrons</th>\n      <th>NumberofProtons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>24</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>52</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>84</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>123</td>\n      <td>81</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>157</td>\n      <td>101</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Pattern\n\n- It *looks* like atoms with fewer protons have the same number of protons and neutrons, and atoms with many protons have many more neutrons.\n- Let's calculate the difference.\n\n::: {#c79e66f1 .cell execution_count=17}\n``` {.python .cell-code}\ndf[\"NumberofProtons\"] - df[\"NumberofNeutrons\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=232}\n```\n0       1\n1       0\n2      -1\n3      -1\n4      -1\n       ..\n113   -61\n114   -58\n115   -60\n116   -61\n117   -58\nLength: 118, dtype: int64\n```\n:::\n:::\n\n\n# Plots\n\n## Visualize\n\n- Easier to visualize.\n\n::: {#be1b4556 .cell execution_count=18}\n``` {.python .cell-code}\n# import Matplotlib if you don't have it yet!\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## Scatterplot\n\n::: {#6445f64d .cell execution_count=19}\n``` {.python .cell-code}\nplt.scatter(df[\"NumberofProtons\"], df[\"NumberofNeutrons\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](06_pandas_files/figure-html/cell-19-output-1.png){width=575 height=411}\n:::\n:::\n\n\n## Insights\n\n- A lot of science, as far as I can tell is finding novel insights.\n- I noticed that boiling/melting point seemed to go up and down at some intervals.\n- I recall that the number of outermost electrons did that too...\n- Let's make `num_es` again, from last time.\n\n## `num_es`\n\n::: {#7a73d5da .cell execution_count=20}\n``` {.python .cell-code}\nes = np.array([2, 8, 8, 18, 18, 32, 32])\nnum_es = np.array([]) # The first zero elements\nfor e in es:\n    num_es = np.append(num_es, np.arange(e))\nnum_es += 1\nnum_es\n```\n\n::: {.cell-output .cell-output-display execution_count=235}\n```\narray([ 1.,  2.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,\n        9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,  1.,  2.,  3.,\n        4.,  5.,  6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16.,\n       17., 18.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.,\n       12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24.,\n       25., 26., 27., 28., 29., 30., 31., 32.,  1.,  2.,  3.,  4.,  5.,\n        6.,  7.,  8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18.,\n       19., 20., 21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31.,\n       32.])\n```\n:::\n:::\n\n\n## Expanding DataFrames\n\n- We can create a new column and new data to it from a `np.array`\n- At least if the dimensions work out...\n\n::: {#bdb71aef .cell execution_count=21}\n``` {.python .cell-code}\ndf.shape, num_es.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=236}\n```\n((118, 28), (118,))\n```\n:::\n:::\n\n\n- We have 118 elements, so it is good we have 118 possible outermost electron counts!\n\n## Update list\n\n- Like updating the element of a list by index...\n\n::: {#eed4a373 .cell execution_count=22}\n``` {.python .cell-code}\ncolors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet']\ncolors[-1] = \"purple\"\ncolors\n```\n\n::: {.cell-output .cell-output-display execution_count=237}\n```\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']\n```\n:::\n:::\n\n\n## Update DataFrame\n\n- We can update *or add* a column to a DataFrame by index:\n\n::: {#29fa6509 .cell execution_count=23}\n``` {.python .cell-code}\ndf[\"OutermostElectrons\"] = num_es\ndf.iloc[::20][[\"Element\",\"OutermostElectrons\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=238}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Element</th>\n      <th>OutermostElectrons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Hydrogen</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Scandium</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Niobium</td>\n      <td>5.0</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>Promethium</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>Thallium</td>\n      <td>27.0</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>Mendelevium</td>\n      <td>15.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Patterns\n\n- For a scatter, that is two (`2`) DataFrames (or subsets), **not** one DataFrame with two columns\n\n::: {#35245f59 .cell execution_count=24}\n``` {.python .cell-code}\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](06_pandas_files/figure-html/cell-24-output-1.png){width=583 height=411}\n:::\n:::\n\n\n## 3D\n\n- Third dimension via `s=` for size \n\n::: {#4a681552 .cell execution_count=25}\n``` {.python .cell-code}\nplt.scatter(df[\"OutermostElectrons\"], df[\"MeltingPoint\"], s=df[\"AtomicNumber\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](06_pandas_files/figure-html/cell-25-output-1.png){width=583 height=411}\n:::\n:::\n\n\n## Columns to Columns\n\n- Using vector operations, we can make novel columns from existing columns.\n\n::: {#ef395815 .cell execution_count=26}\n``` {.python .cell-code}\ndf[\"NeutronsLessProtons\"] = df[\"NumberofNeutrons\"] - df[\"NumberofProtons\"]\nplt.plot(df[\"NeutronsLessProtons\"])\n```\n\n::: {.cell-output .cell-output-display}\n![](06_pandas_files/figure-html/cell-26-output-1.png){width=567 height=411}\n:::\n:::\n\n\n## 4D\n\n::: {#ae1a026b .cell execution_count=27}\n``` {.python .cell-code}\nplt.scatter(x=df[\"OutermostElectrons\"], # we can optional specify x and y \n            y=df[\"MeltingPoint\"], \n            s=df[\"AtomicNumber\"], \n            c=df[\"NeutronsLessProtons\"]) # color\nplt.colorbar() # Like a legend for colors.\n```\n\n::: {.cell-output .cell-output-display}\n![](06_pandas_files/figure-html/cell-27-output-1.png){width=550 height=411}\n:::\n:::\n\n\n## \"kwargs\"\n\n- When we call a function and use something like `x=` in the arguments, `x` is a keyword so we call these \"kwargs\" for \"keyword arguments\".\n- You may see this when looking up functions.\n- Just follow examples.\n\n::: {#c2dc09f2 .cell execution_count=28}\n``` {.python .cell-code}\ndef triple(x):\n\treturn 3 * x\n\n[triple(x=7), triple(7)]\n```\n\n::: {.cell-output .cell-output-display execution_count=243}\n```\n[21, 21]\n```\n:::\n:::\n\n\n## Dropping\n\n- Some columns may be useless or redundant.\n\n::: {#2f077e6a .cell execution_count=29}\n``` {.python .cell-code}\ndf.iloc[::20][[\"AtomicNumber\",\"NumberofProtons\",\"NumberofElectrons\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=244}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AtomicNumber</th>\n      <th>NumberofProtons</th>\n      <th>NumberofElectrons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>21</td>\n      <td>21</td>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>41</td>\n      <td>41</td>\n      <td>41</td>\n    </tr>\n    <tr>\n      <th>60</th>\n      <td>61</td>\n      <td>61</td>\n      <td>61</td>\n    </tr>\n    <tr>\n      <th>80</th>\n      <td>81</td>\n      <td>81</td>\n      <td>81</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>101</td>\n      <td>101</td>\n      <td>101</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Drop it\n\n- We can remove such columns.\n\n::: {#3be9df3e .cell execution_count=30}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=245}\n```\n(118, 30)\n```\n:::\n:::\n\n\n::: {#4647d48f .cell execution_count=31}\n``` {.python .cell-code}\n# Have to specify columns (we can also drop rows)\ndf = df.drop(columns=[\"NumberofProtons\",\"NumberofElectrons\"])\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=246}\n```\n(118, 28)\n```\n:::\n:::\n\n\n# Summaries\n\n## Summary Statistics\n\n- There's a variety of ways to describe a DataFrame other than just seeing all of it's data.\n\n::: {#0dcf058a .cell execution_count=32}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=247}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>AtomicNumber</th>\n      <th>AtomicMass</th>\n      <th>NumberofNeutrons</th>\n      <th>Period</th>\n      <th>Group</th>\n      <th>AtomicRadius</th>\n      <th>Electronegativity</th>\n      <th>FirstIonization</th>\n      <th>Density</th>\n      <th>MeltingPoint</th>\n      <th>BoilingPoint</th>\n      <th>NumberOfIsotopes</th>\n      <th>Year</th>\n      <th>SpecificHeat</th>\n      <th>NumberofShells</th>\n      <th>NumberofValence</th>\n      <th>OutermostElectrons</th>\n      <th>NeutronsLessProtons</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>118.000000</td>\n      <td>118.000000</td>\n      <td>118.000000</td>\n      <td>118.000000</td>\n      <td>90.000000</td>\n      <td>86.000000</td>\n      <td>96.000000</td>\n      <td>102.000000</td>\n      <td>105.000000</td>\n      <td>98.000000</td>\n      <td>98.000000</td>\n      <td>103.000000</td>\n      <td>107.000000</td>\n      <td>85.000000</td>\n      <td>118.000000</td>\n      <td>49.000000</td>\n      <td>118.000000</td>\n      <td>118.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>59.500000</td>\n      <td>145.988297</td>\n      <td>86.483051</td>\n      <td>5.254237</td>\n      <td>9.944444</td>\n      <td>1.825814</td>\n      <td>1.695000</td>\n      <td>7.988505</td>\n      <td>9.232161</td>\n      <td>1281.475184</td>\n      <td>2513.143163</td>\n      <td>28.116505</td>\n      <td>1865.280374</td>\n      <td>0.635976</td>\n      <td>5.254237</td>\n      <td>4.428571</td>\n      <td>12.483051</td>\n      <td>26.983051</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>34.207699</td>\n      <td>88.954899</td>\n      <td>54.785320</td>\n      <td>1.618200</td>\n      <td>5.597674</td>\n      <td>0.611058</td>\n      <td>0.621174</td>\n      <td>3.334571</td>\n      <td>8.630406</td>\n      <td>903.685175</td>\n      <td>1601.901036</td>\n      <td>35.864205</td>\n      <td>97.951740</td>\n      <td>1.653965</td>\n      <td>1.618200</td>\n      <td>2.345208</td>\n      <td>8.830535</td>\n      <td>20.782547</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>1.007000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>0.490000</td>\n      <td>0.700000</td>\n      <td>3.893900</td>\n      <td>0.000090</td>\n      <td>14.175000</td>\n      <td>4.220000</td>\n      <td>3.000000</td>\n      <td>1250.000000</td>\n      <td>0.094000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>-1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>30.250000</td>\n      <td>66.465750</td>\n      <td>36.000000</td>\n      <td>4.000000</td>\n      <td>5.000000</td>\n      <td>1.425000</td>\n      <td>1.237500</td>\n      <td>6.004850</td>\n      <td>2.700000</td>\n      <td>510.695000</td>\n      <td>1069.000000</td>\n      <td>11.000000</td>\n      <td>1803.500000</td>\n      <td>0.168000</td>\n      <td>4.000000</td>\n      <td>2.000000</td>\n      <td>5.000000</td>\n      <td>6.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>59.500000</td>\n      <td>142.575000</td>\n      <td>83.000000</td>\n      <td>6.000000</td>\n      <td>10.500000</td>\n      <td>1.800000</td>\n      <td>1.585000</td>\n      <td>6.960250</td>\n      <td>7.290000</td>\n      <td>1204.150000</td>\n      <td>2767.000000</td>\n      <td>19.000000</td>\n      <td>1878.000000</td>\n      <td>0.244000</td>\n      <td>6.000000</td>\n      <td>4.000000</td>\n      <td>11.000000</td>\n      <td>24.500000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>88.750000</td>\n      <td>226.750000</td>\n      <td>138.000000</td>\n      <td>7.000000</td>\n      <td>15.000000</td>\n      <td>2.200000</td>\n      <td>2.062500</td>\n      <td>8.964925</td>\n      <td>12.000000</td>\n      <td>1811.150000</td>\n      <td>3596.750000</td>\n      <td>24.000000</td>\n      <td>1940.000000</td>\n      <td>0.489000</td>\n      <td>7.000000</td>\n      <td>6.000000</td>\n      <td>18.000000</td>\n      <td>49.750000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>118.000000</td>\n      <td>295.000000</td>\n      <td>178.000000</td>\n      <td>7.000000</td>\n      <td>18.000000</td>\n      <td>3.300000</td>\n      <td>3.980000</td>\n      <td>24.587400</td>\n      <td>41.000000</td>\n      <td>3948.150000</td>\n      <td>5869.000000</td>\n      <td>203.000000</td>\n      <td>2010.000000</td>\n      <td>14.304000</td>\n      <td>7.000000</td>\n      <td>8.000000</td>\n      <td>32.000000</td>\n      <td>61.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Info\n\n- Info is often helpful\n\n::: {#779b3e72 .cell execution_count=33}\n``` {.python .cell-code}\ndf.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 118 entries, 0 to 117\nData columns (total 28 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   AtomicNumber         118 non-null    int64  \n 1   Element              118 non-null    object \n 2   Symbol               118 non-null    object \n 3   AtomicMass           118 non-null    float64\n 4   NumberofNeutrons     118 non-null    int64  \n 5   Period               118 non-null    int64  \n 6   Group                90 non-null     float64\n 7   Phase                118 non-null    object \n 8   Radioactive          37 non-null     object \n 9   Natural              90 non-null     object \n 10  Metal                92 non-null     object \n 11  Nonmetal             19 non-null     object \n 12  Metalloid            7 non-null      object \n 13  Type                 115 non-null    object \n 14  AtomicRadius         86 non-null     float64\n 15  Electronegativity    96 non-null     float64\n 16  FirstIonization      102 non-null    float64\n 17  Density              105 non-null    float64\n 18  MeltingPoint         98 non-null     float64\n 19  BoilingPoint         98 non-null     float64\n 20  NumberOfIsotopes     103 non-null    float64\n 21  Discoverer           109 non-null    object \n 22  Year                 107 non-null    float64\n 23  SpecificHeat         85 non-null     float64\n 24  NumberofShells       118 non-null    int64  \n 25  NumberofValence      49 non-null     float64\n 26  OutermostElectrons   118 non-null    float64\n 27  NeutronsLessProtons  118 non-null    int64  \ndtypes: float64(13), int64(5), object(10)\nmemory usage: 25.9+ KB\n```\n:::\n:::\n\n\n## Columns\n\n- And remember we can see all the column names!\n- No `()`!\n\n::: {#a8b1c224 .cell execution_count=34}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=249}\n```\nIndex(['AtomicNumber', 'Element', 'Symbol', 'AtomicMass', 'NumberofNeutrons',\n       'Period', 'Group', 'Phase', 'Radioactive', 'Natural', 'Metal',\n       'Nonmetal', 'Metalloid', 'Type', 'AtomicRadius', 'Electronegativity',\n       'FirstIonization', 'Density', 'MeltingPoint', 'BoilingPoint',\n       'NumberOfIsotopes', 'Discoverer', 'Year', 'SpecificHeat',\n       'NumberofShells', 'NumberofValence', 'OutermostElectrons',\n       'NeutronsLessProtons'],\n      dtype='object')\n```\n:::\n:::\n\n\n## Shape\n\n- And of course shape!\n\n::: {#621447b9 .cell execution_count=35}\n``` {.python .cell-code}\ndf.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=250}\n```\n(118, 28)\n```\n:::\n:::\n\n\n## Column-wise\n\n- We can do all kinds of operations over a single column.\n\n::: {#fcb25841 .cell execution_count=36}\n``` {.python .cell-code}\nmp = df[\"MeltingPoint\"] # Copy column to save some typing.\n[mp.min(), mp.max(), mp.mean(), mp.median(), mp.mode(), mp.std()]\n```\n\n::: {.cell-output .cell-output-display execution_count=251}\n```\n[np.float64(14.175),\n np.float64(3948.15),\n np.float64(1281.4751836734692),\n np.float64(1204.15),\n 0     913.15\n 1    1204.15\n Name: MeltingPoint, dtype: float64,\n np.float64(903.6851752147392)]\n```\n:::\n:::\n\n\n# Groups\n\n## Metal or not\n\n- We helpfully can already see what metals are.\n\n::: {#89bc50a1 .cell execution_count=37}\n``` {.python .cell-code}\ndf.iloc[15:25:2][[\"Element\",\"Metal\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=252}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Element</th>\n      <th>Metal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>15</th>\n      <td>Sulfur</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Argon</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Calcium</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Titanium</td>\n      <td>yes</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Chromium</td>\n      <td>yes</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Todo\n\n- Do some wranglin'\n- Do some groupin'\n- Do some joinin'\n- Write a .csv\n\n",
    "supporting": [
      "06_pandas_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}