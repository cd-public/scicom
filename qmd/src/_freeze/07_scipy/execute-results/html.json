{
  "hash": "8f9b613cd5c65774ba1982bbcc7eb330",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: SciPy\n---\n\n\n\n\n\n\n# What is SciPy?\n\n> [SciPy (pronounced “Sigh Pie”) is an open-source software for mathematics, science, and engineering.](https://docs.scipy.org/doc/scipy/index.html)\n\n* **Sci**entific **Py**thon\n* Basically a NumPy extension.\n\n## Why SciPy \n\n* Most popular scientific computing platform in the world.\n* Basis of scikit-learn, the most popular machine learning platform in the world.\n* Extremely rigorous - most functions and documentation come with academic citations.\n\n## Why not SciPy\n\n- SciPy for statistics has basically one challenger (statsmodels, which is great).\n- Sometimes SciPy is too \"heavyweight\" and NumPy would be sufficient.\n- As a rule, I tend to use NumPy for easy things and scikit-learn for hard things, and don't use SciPy for much.\n\n## Relevance\n\n- This is a scientific computing course!\n- We'll do a bit of signal processing and interpolation.\n\n## Credits\n\n- SciPy is a big, complex library with many components.\n- I used each of:\n  \t- The [User Guide](https://docs.scipy.org/doc/scipy/tutorial/index.html)\n\t- The [API reference](https://docs.scipy.org/doc/scipy/reference/index.html)\n\t  \t- API is \"application program interface\" - a description of the functions in SciPy by their arguments and return values.\n\t- The [Cookbook](https://scipy-cookbook.readthedocs.io/) which may be unofficial.\n\n# Install\n\n## pip again\n\n- Just like NumPy, Matplotlib is a Python package which we install via `pip`\n```{.bash code-line-numbers=\"false\"}\npython3 -m pip install scipy\n```\n- That might take a moment, when it does we can check it worked!\n\n## Verify\n\n- We can quickly verify installation and introduce some conventions.\n- Open up Python and import the libraries:\n\n::: {#7a54b8e6 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy\n\nprint(scipy.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.14.1\n```\n:::\n:::\n\n\n# Other Installs\n\n## Motivation\n\n- I thought it would be fun to do some signal processing on a recognizable data set:\n- [PSY - GANGNAM STYLE(강남스타일) M/V](https://www.youtube.com/watch?v=9bZkp7q19f0)\n\n## YouTube \n\n::: {.callout-tip}\n## STOP\n\nInstructor's note:  Do not click this link while streaming.\n:::\n\n\n\n\n\n\n{{< video https://www.youtube.com/watch?v=9bZkp7q19f0 >}}\n\n\n\n\n\n\n\n\n\n\n## Problem Statement\n\n- SciPy has the ability to read some filetypes but not others.\n  \t- Can read: \".wav\" Waveform Audio File Format.\n\t- Can't read: YouTube urls\n- We use Python package `yt-dlp` to download from YouTube.\n- We use non-Python package `ffmpeg` to translate .mp4 files to .wav\n- We use VideoLAN VLC Media Player to play the .wav files.\n\n## Note\n\n- You do not need to download any of these.\n- Here is the .wav:\n\t- <audio controls src=\"src/psy.wav\" type=\"audio/wav\"></audio> \n- Here is a link: \n  \t- [psy.wav](psy.wav)\n\n## yt-dlp\n\n- While I don't think you need it for anything, I installed `yt-dlp` as follows, from the shell:\n```{.bash code-line-numbers=\"false\"}\npython -m pip install yt-dlp\n```\n\n## ffmpeg\n\n- I believe this is the best place to download `ffmpeg` for Windows and MacOS.\n- [https://www.ffmpeg.org/download.html](https://www.ffmpeg.org/download.html)\n- I used it on Ubuntu Linux and did not attempt and Windows or MacOS install.\n\n## Download\n\n- Both `yt-dlp` and `ffmpeg` are command line utilites (like Python, Neovim, or `ls`).\n- I didn't actually ever use `ffmpeg` directly, it is just used by `yt-dlp`.\n- Given the url, I used the following shell command:\n```{.bash code-line-numbers=\"false\"}\nyt-dlp -x --audio-format wav https://www.youtube.com/watch?v=9bZkp7q19f0 -o psy.wav\n```\n- This tells `yt-dlp` to go to the url, download to video, convert it to a .wav, and save it as \"psy.wav\"\n\n## VLC\n\n- I *highly* recommend having VLC installed.\n- [https://www.videolan.org/vlc/#download](https://www.videolan.org/vlc/#download)\n\n## curl\n\n- As an alternative, you can `curl` the file from the course webpage.\n- `curl` is a shell command that downloads a file from a url.\n  \t- Can also be used to get e.g. the \".csv\" file we used with **pandas**!\n```{.bash code-line-number=\"false\"}\ncurl https://github.com/cd-public/scicom/raw/refs/heads/main/qmd/src/psy.wav -o psy.wav\n```\n- This directs the command line to download the file from the url and save it locally as \"psy.wav\"\n\n# `scipy.io`\n\n## wavfile\n\n- To load a wavfile into SciPy, it is a simple matter.\n- But first, we note one difference:\n  \t- With NumPy, we imported as `np`\n\t- With **pandas**, we import as `pd`\n- With Matplotlib, we imported Matplotlib \"dot\" something - pyplot\n  \t- The \"Python interface\"\n\n## SciPy Modules\n\n- SciPy is composed of many *modules*\n- `matplotlib.pyplot` is a previous example of a module.\n- For example:\n  \t- `scipy.io` includes ways to read files.\n\t- `scipy.fft` does Fast Fourier Transforms.\n\t- `scipy.stats` does statistics.\n\n## Load \"psy.wav\"\n\n- We will load a sound file as an np.array.\n\n::: {#e3ea8f2d .cell execution_count=3}\n``` {.python .cell-code}\nrate, data = scipy.io.wavfile.read(\"psy.wav\")\n```\n:::\n\n\n- This may look odd!\n\n## Multiple return\n\n- This uses a slightly advanced Python topic of \"multiple return\".\n\n::: {#9147ae52 .cell execution_count=4}\n``` {.python .cell-code}\ndef roots(x):\n\troot = np.sqrt(x)\n\treturn -root, root\n```\n:::\n\n\n- Python can return multiple comma-separated values from a function.\n\n::: {#6de74cc2 .cell execution_count=5}\n``` {.python .cell-code}\nneg, pos = roots(25)\n[neg, pos]\n```\n\n::: {.cell-output .cell-output-display execution_count=812}\n```\n[np.float64(-5.0), np.float64(5.0)]\n```\n:::\n:::\n\n\n- We can \"unpack\" the multiple values by providing comma separated variable names.\n\n## Aside: Tuples\n\n- These multiple returns are just tuples.\n\t- The things that are like lists, but not exactly.\n\n::: {#92d42b10 .cell execution_count=6}\n``` {.python .cell-code}\nboth = roots(64)\ntype(both)\n```\n\n::: {.cell-output .cell-output-display execution_count=813}\n```\ntuple\n```\n:::\n:::\n\n\n- We can also use indexing to see individual elements of a tuple.\n\n::: {#d7b60bc7 .cell execution_count=7}\n``` {.python .cell-code}\nboth[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=814}\n```\nnp.float64(-8.0)\n```\n:::\n:::\n\n\n## vs. Lists\n\n- The only difference compared to lists is updates.\n- In a list, we can change an element with its index:\n\n::: {#f64f3383 .cell execution_count=8}\n``` {.python .cell-code}\ncolor_lst = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"]\ncolor_lst[-1] = \"purple\"\ncolor_lst\n```\n\n::: {.cell-output .cell-output-display execution_count=815}\n```\n['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'purple']\n```\n:::\n:::\n\n\n## Aside: Errors\n\n- Doing this to a list would create an error.\n- Thus far we have avoided showing example code that won't work.\n- We can use `try` and `except` (like `if` and `else`) on erroneous code.\n\n::: {#49c0fbac .cell execution_count=9}\n``` {.python .cell-code}\ncolor_tup = tuple(color_lst)\ntry:\n\tcolor_tup[-1] = \"violet\"\nexcept:\n\tprint(\"Tuples can't do that.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTuples can't do that.\n```\n:::\n:::\n\n\n## Reading files\n\n- Try except is *very* handy when reading files.\n- A lot of files I try to read are garbled and can't be read.\n- Using `try` and `except` prevents Python errors.\n  \t- More useful in big scripts than single-line things.\n\n## Example\n\n- Earlier today, I tried the `curl` command to get \"psy.wav\" while (unbeknownst to me) my internet was spotty.\n- I got a file named \"psy.wav\" that was of size `0`\n- Unsurprisingly, opening it with SciPy led to an error.\n- This happens all the time!\n\n## Data\n\n- Back to our .wav file.\n- Let's look at that data!\n\n::: {#e29c84f0 .cell execution_count=10}\n``` {.python .cell-code}\ndata[:10]\n```\n\n::: {.cell-output .cell-output-display execution_count=817}\n```\narray([[0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0],\n       [0, 0]], dtype=int16)\n```\n:::\n:::\n\n\n## Rate\n\n::: {#cbf6e0cb .cell execution_count=11}\n``` {.python .cell-code}\nrate\n```\n\n::: {.cell-output .cell-output-display execution_count=818}\n```\n48000\n```\n:::\n:::\n\n\n- You may have listened to the file (or not).\n- Audio doesn't come in for about 4 seconds.\n- The song ends and there's a kind of \"outro\".\n- We can see these on the plot.\n- But that examples the zeros.\n\n## Plot\n\n::: {#ac66c5b9 .cell execution_count=12}\n``` {.python .cell-code}\nplt.plot(data)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_scipy_files/figure-revealjs/cell-12-output-1.png){width=826 height=428}\n:::\n:::\n\n\n## Back to Data\n\n- Given the rate, we can look at values ever `rate` amount of time.\n- I bet it's seconds, so we'll see 3 or 4 zero-only then some non-zero.\n\n::: {#1492afd3 .cell execution_count=13}\n``` {.python .cell-code}\ndata[:rate*10:rate]\n```\n\n::: {.cell-output .cell-output-display execution_count=820}\n```\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      3],\n       [-13903, -13896],\n       [ 12440,  12442],\n       [  6053,   6051],\n       [  5888,   5888],\n       [    53,     52]], dtype=int16)\n```\n:::\n:::\n\n\n## Why pairs?\n\n- Those two values may look initially suspicious, then I remembered.\n- Many mammals, including some assistant professors of computer science, have two ears!\n- This is a stereo file - the pairs are for each of two speakers.\n\n## Test it\n\n- Don't believe me?\n- Let's split into a \"left\" and \"right\" file.\n- We needn't necessarily get the labels right, but these are simply NumPy operations.\n- Then listen!\n\n## Transpose\n\n- Remember `.transpose`?\n- It will take an array of pairs and make a pair of arrays.\n\n::: {#a69ddf41 .cell execution_count=14}\n``` {.python .cell-code}\ntpose = data.transpose()\ntpose[0][:rate*10:rate]\n```\n\n::: {.cell-output .cell-output-display execution_count=821}\n```\narray([     0,      0,      0,      0,     -2, -13903,  12440,   6053,\n         5888,     53], dtype=int16)\n```\n:::\n:::\n\n\n## Split\n\n- I will arbitrarily call one \"left\" and one \"rite\" (not \"right\" because we don't know if we're right).\n\n::: {#35a84c4c .cell execution_count=15}\n``` {.python .cell-code}\nleft = tpose[0]\nrite = tpose[1]\n```\n:::\n\n\n## Zeros\n\n- We'll also make a zero-only array of the same length.\n\n::: {#2279ac93 .cell execution_count=16}\n``` {.python .cell-code}\n# We note the \"dtype\" was \"int16\" so we do the same.\n# We do have to be clear it's NumPy int16 though!\nzero = np.zeros(len(left),dtype=np.int16)\n```\n:::\n\n\n## Combine\n\n- We can make left-only and rite-only arrays via:\n  - Combine\n  - Transpose\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#6151f206 .cell execution_count=17}\n``` {.python .cell-code}\nleft_only = np.array([left,zero]).transpose()\nleft_only[:rate*10:rate]\n```\n\n::: {.cell-output .cell-output-display execution_count=824}\n```\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [    -2,      0],\n       [-13903,      0],\n       [ 12440,      0],\n       [  6053,      0],\n       [  5888,      0],\n       [    53,      0]], dtype=int16)\n```\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#0acc033f .cell execution_count=18}\n``` {.python .cell-code}\nrite_only = np.array([zero,rite]).transpose()\nrite_only[:rate*10:rate]\n```\n\n::: {.cell-output .cell-output-display execution_count=825}\n```\narray([[     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      0],\n       [     0,      3],\n       [     0, -13896],\n       [     0,  12442],\n       [     0,   6051],\n       [     0,   5888],\n       [     0,     52]], dtype=int16)\n```\n:::\n:::\n\n\n:::\n\n::::\n\n\n## Save\n\n- Let's write/save both then give 'um a listen.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n::: {#e254a5d3 .cell execution_count=19}\n``` {.python .cell-code}\nscipy.io.wavfile.write(\"left.wav\", rate, left_only)\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {#e2d33cd8 .cell execution_count=20}\n``` {.python .cell-code}\nscipy.io.wavfile.write(\"rite.wav\", rate, rite_only)\n```\n:::\n\n\n:::\n\n::::\n\n## Listen \n\n- Let's write/save both then give 'um a listen.\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n\n<audio controls src=\"src/left.wav\" type=\"audio/wav\"></audio> \n\n:::\n\n::: {.column width=\"50%\"}\n\n\n<audio controls src=\"src/rite.wav\" type=\"audio/wav\"></audio> \n\n:::\n\n::::\n\n# Noise\n\n## Noise Reduction\n\n- In a way, all sound is noise.\n- Let's try and isolate the vocals and music, regarding the other variously as noise at various points.\n- First identify where vocals come in.\n- To me, 0:04 to 0:09 seems instrumental.\n\n## View it\n\n- Look for patterns\n\n::: {#eefb2c74 .cell execution_count=21}\n``` {.python .cell-code}\nsnip = left[4*rate:10*rate]\nplt.plot(snip)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_scipy_files/figure-revealjs/cell-21-output-1.png){width=846 height=411}\n:::\n:::\n\n\n## Repeats?\n\n- Looks like volume cuts low on a repeated pattern.\n- Maybe we can isolate that pattern.\n- Let's:\n  \t- Pick a range\n\t- Find a minimal value\n\t- Find where that value occurs.\n\n::: {#1d019783 .cell execution_count=22}\n``` {.python .cell-code}\nlow_val = min(snip)\nlow_val\n```\n\n::: {.cell-output .cell-output-display execution_count=829}\n```\nnp.int16(-32071)\n```\n:::\n:::\n\n\n## Whoops!\n\n- Oh we need to use absolute value.\n- No worries!\n\n::: {#c0dd0443 .cell execution_count=23}\n``` {.python .cell-code}\nlow_val = min(np.absolute(snip))\nlow_val\n```\n\n::: {.cell-output .cell-output-display execution_count=830}\n```\nnp.int16(0)\n```\n:::\n:::\n\n\n# Where?\n\n- Use `np.where` to find where the low values occur.\n  \t- We used with [**pandas**](06_pandas.qmd#metallic)\n\n::: {#5a77d243 .cell execution_count=24}\n``` {.python .cell-code}\nlows = np.where(snip == 0)\nlows\n```\n\n::: {.cell-output .cell-output-display execution_count=831}\n```\n(array([    13,     14,     18,     20,     31,     39,     44,    126,\n           127,    136,    137,    138,    148,    155,    157,    174,\n           176,    193,    197,    202,    219,    221,    222,    223,\n           231,    232,    262,    268,    317,    383,    405,    430,\n         13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n        153051, 210217, 216983, 271632, 278282]),)\n```\n:::\n:::\n\n\n## Patterns\n\n- Maybe there's something repeating on a periodicity of like... 65k?\n\n::: {#052370b3 .cell execution_count=25}\n``` {.python .cell-code}\n# We note that the result was enclosed in () so we get the [0] of it.\nlows = lows[0]\n# Then proceed\nlows = lows[np.where(lows > 500)]\nlows\n```\n\n::: {.cell-output .cell-output-display execution_count=832}\n```\narray([ 13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n       153051, 210217, 216983, 271632, 278282])\n```\n:::\n:::\n\n\n## Visualize\n\n- Let's just plot the place the minimum occurs.\n\n::: {#15821c68 .cell execution_count=26}\n``` {.python .cell-code}\n_ = plt.hist(lows)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_scipy_files/figure-revealjs/cell-26-output-1.png){width=781 height=411}\n:::\n:::\n\n\n## More Bins\n\n- Hard to see, we increase the \"bin\" count.\n\n::: {#02d7b316 .cell execution_count=27}\n``` {.python .cell-code}\n_ = plt.hist(lows, 100)\n```\n\n::: {.cell-output .cell-output-display}\n![](07_scipy_files/figure-revealjs/cell-27-output-1.png){width=802 height=411}\n:::\n:::\n\n\n## A Pattern?\n\n::: {#9d7f7755 .cell execution_count=28}\n``` {.python .cell-code}\n_ = plt.hist(np.where(left == 0))\n```\n\n::: {.cell-output .cell-output-display}\n![](07_scipy_files/figure-revealjs/cell-28-output-1.png){width=823 height=428}\n:::\n:::\n\n\n- Only before vocals enter?\n\n## Isolate\n\n- Let's see if we can isolate a motif.\n- We'll take the first zero past.\n- I hear about two repeats on this portion, so we'll take a zero in the middle.\n\n::: {#1ef8015e .cell execution_count=29}\n``` {.python .cell-code}\nnp.where(snip == 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=836}\n```\n(array([    13,     14,     18,     20,     31,     39,     44,    126,\n           127,    136,    137,    138,    148,    155,    157,    174,\n           176,    193,    197,    202,    219,    221,    222,    223,\n           231,    232,    262,    268,    317,    383,    405,    430,\n         13580,  25648,  26839,  28676,  29655,  64732, 131187, 131204,\n        153051, 210217, 216983, 271632, 278282]),)\n```\n:::\n:::\n\n\n## Motif\n\n::: {#c9815186 .cell execution_count=30}\n``` {.python .cell-code}\nstereo = np.array([snip,snip]).transpose()\nmotif = stereo[13580:131204]\nscipy.io.wavfile.write(\"motif.wav\", rate, motif)\n# os.system(\"open motif.wav\") # After import, if you have VLC, on MacOS\n```\n:::\n\n\n<audio controls src=\"src/motif.wav\" type=\"audio/wav\"></audio> \n\n::: {#1f09bf07 .cell execution_count=31}\n``` {.python .cell-code}\nother = stereo[13580:271632]\nscipy.io.wavfile.write(\"other.wav\", rate, other)\n```\n:::\n\n\n<audio controls src=\"src/motif.wav\" type=\"audio/wav\"></audio> \n\n::: {#7f08287f .cell execution_count=32}\n``` {.python .cell-code}\nscipy.io.wavfile.write(\"motifs.wav\", rate, np.concat([motif,motif,motif]))\nscipy.io.wavfile.write(\"others.wav\", rate, np.concat([other,other,other]))\n```\n:::\n\n\n<audio controls src=\"src/motifs.wav\" type=\"audio/wav\"></audio> \n\n<audio controls src=\"src/others.wav\" type=\"audio/wav\"></audio> \n\n- You can go become a dj, or...\n\n## FFT\n\n- The actual correct way to do this is with a SciPy FFT:\n  \t- [Fast Fourier Transform](https://docs.scipy.org/doc/scipy/tutorial/fft.html)\n- And with a NumPy stride:\n  \t- [Stride Tricks](https://numpy.org/devdocs/reference/generated/numpy.lib.stride_tricks.html)\n- Which is probably a bit much for now.\n\n# Stats\n\n## Linear Regression\n\n- One of the most used computation techniques is linear regression.\n- It is used throughout the sciences, but most commonly in econometrics.\n- In my my undergraduate economics class, I had a homework assignment to \"prove\" that raising minimum wage increases unemployment.\n  \t- It doesn't, but that isn't relevant here.\n\n## The Data\n\n- I usually get economic data from the \"St. Louis Fed\" which has a data portal called \"FRED\".\n  - Minimum wage [FEDMINNFRWG](https://fred.stlouisfed.org/series/FEDMINNFRWG)\n  - Unemployment rage [UNRATE](https://fred.stlouisfed.org/series/UNRATE)\n  - Inflation [CPIAUCSL](https://fred.stlouisfed.org/series/CPIAUCSL)\n\n## Curl\n\n- It is actually possible to `curl` these but you probably have to navigate the websites to find the urls regardless.\n```{.bash code-line-numbers=\"false\"}\ncurl https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23ebf3fb&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1140&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=FEDMINNFRWG&scale=left&cosd=1938-10-01&coed=2025-05-01&line_color=%230073e6&link_values=false&line_style=solid&mark_type=none&mw=3&lw=3&ost=-99999&oet=99999&mma=0&fml=a&fq=Monthly&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2025-05-31&revision_date=2025-05-31&nd=1938-10-01 -o FEDMINNFRWG.csv\ncurl https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23ebf3fb&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1140&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=UNRATE&scale=left&cosd=1948-01-01&coed=2025-04-01&line_color=%230073e6&link_values=false&line_style=solid&mark_type=none&mw=3&lw=3&ost=-99999&oet=99999&mma=0&fml=a&fq=Monthly&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2025-05-31&revision_date=2025-05-31&nd=1948-01-01 -o UNRATE.csv\ncurl https://fred.stlouisfed.org/graph/fredgraph.csv?bgcolor=%23ebf3fb&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1140&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=CPIAUCSL&scale=left&cosd=1947-01-01&coed=2025-04-01&line_color=%230073e6&link_values=false&line_style=solid&mark_type=none&mw=3&lw=3&ost=-99999&oet=99999&mma=0&fml=a&fq=Monthly&fam=avg&fgst=lin&fgsnd=2020-02-01&line_index=1&transformation=lin&vintage_date=2025-05-31&revision_date=2025-05-31&nd=1947-01-01 -o CPIAUCSL.csv\n```\n\n## From url\n\n- Given some url with Python \n  - `url = \"https://...\"`\n- You can of course also:\n  - **pandas** `pd.read_csv(url)`\n  - \"os\" `os.system(\"curl \" + url + \" -o name.csv\")\n\n",
    "supporting": [
      "07_scipy_files\\figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}