{
  "hash": "2193acc5c263833d7fa9f3f584d053c3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: SciPy\n---\n\n\n\n\n\n\n# What is SciPy?\n\n> [SciPy (pronounced “Sigh Pie”) is an open-source software for mathematics, science, and engineering.](https://docs.scipy.org/doc/scipy/index.html)\n\n* **Sci**entific **Py**thon\n* Basically a NumPy extension.\n\n## Why SciPy \n\n* Most popular scientific computing platform in the world.\n* Basis of scikit-learn, the most popular machine learning platform in the world.\n* Extremely rigorous - most functions and documentation come with academic citations.\n\n## Why not SciPy\n\n- SciPy for statistics has basically one challenger (statsmodels, which is great).\n- Sometimes SciPy is too \"heavyweight\" and NumPy would be sufficient.\n- As a rule, I tend to use NumPy for easy things and scikit-learn for hard things, and don't use SciPy for much.\n\n## Relevance\n\n- This is a scientific computing course!\n- We'll do a bit of signal processing and interpolation.\n\n# Install\n\n## pip again\n\n- Just like NumPy, Matplotlib is a Python package which we install via `pip`\n```{.bash code-line-numbers=\"false\"}\npython3 -m pip install scipy\n```\n- That might take a moment, when it does we can check it worked!\n\n## Verify\n\n- We can quickly verify installation and introduce some conventions.\n- Open up Python and import the libraries:\n\n::: {#d1acddb4 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy\n\nprint(scipy.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.14.1\n```\n:::\n:::\n\n\n# Other Installs\n\n## Motivation\n\n- I thought it would be fun to do some signal processing on a recognizable data set:\n- [PSY - GANGNAM STYLE(강남스타일) M/V](https://www.youtube.com/watch?v=9bZkp7q19f0)\n\n## \n\n::: {.callout-tip}\n## STOP\n\nInstructor's note:  Do not click this link while streaming.\n:::\n\n\n\n\n\n\n{{< video https://www.youtube.com/watch?v=9bZkp7q19f0 >}}\n\n\n\n\n\n\n\n\n\n\n## Problem Statement\n\n- SciPy has the ability to read some filetypes but not others.\n  \t- Can read: \".wav\" Waveform Audio File Format.\n\t- Can't read: YouTube urls\n- We use Python package `yt-dlp` to download from YouTube.\n- We use non-Python package `ffmpeg` to translate .mp4 files to .wav\n- We use VideoLAN VLC Media Player to play the .wav files.\n\n## Note\n\n- You do not need to download any of these.\n- Here is the .wav:\n<audio controls>\n  <source src=\"psy.wav\" type=\"audio/wav\">\n</audio> \n- Here is a link: [psy.wav](psy.wav)\n\n## yt-dlp\n\n- While I don't think you need it for anything, I installed `yt-dlp` as follows, from the shell:\n```{.bash code-line-numbers=\"false\"}\npython -m pip install yt-dlp\n```\n\n## ffmpeg\n\n- I believe this is the best place to download `ffmpeg` for Windows and MacOS.\n- [https://www.ffmpeg.org/download.html](https://www.ffmpeg.org/download.html)\n- I used it on Ubuntu Linux and did not attempt and Windows or MacOS install.\n\n## Download\n\n- Both `yt-dlp` and `ffmpeg` are command line utilites (like Python, Neovim, or `ls`).\n- I didn't actually ever use `ffmpeg` directly, it is just used by `yt-dlp`.\n- Given the url, I used the following shell command:\n```{.bash code-line-numbers=\"false\"}\nyt-dlp -x --audio-format wav https://www.youtube.com/watch?v=9bZkp7q19f0 -o psy.wav\n```\n- This tells `yt-dlp` to go to the url, download to video, convert it to a .wav, and save it as `psy.wav`\n\n",
    "supporting": [
      "07_scipy_files\\figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}